
heightmeasurement.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000072c4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000228  08007464  08007464  00017464  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800768c  0800768c  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  0800768c  0800768c  0001768c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007694  08007694  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007694  08007694  00017694  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007698  08007698  00017698  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  0800769c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002c64  20000084  08007720  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002ce8  08007720  00022ce8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012568  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002446  00000000  00000000  0003261c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001168  00000000  00000000  00034a68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001098  00000000  00000000  00035bd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018f35  00000000  00000000  00036c68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014a5a  00000000  00000000  0004fb9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009dd7b  00000000  00000000  000645f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00102372  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004fb8  00000000  00000000  001023c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000084 	.word	0x20000084
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800744c 	.word	0x0800744c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000088 	.word	0x20000088
 80001dc:	0800744c 	.word	0x0800744c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2iz>:
 8000a1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a24:	d215      	bcs.n	8000a52 <__aeabi_d2iz+0x36>
 8000a26:	d511      	bpl.n	8000a4c <__aeabi_d2iz+0x30>
 8000a28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d912      	bls.n	8000a58 <__aeabi_d2iz+0x3c>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a42:	fa23 f002 	lsr.w	r0, r3, r2
 8000a46:	bf18      	it	ne
 8000a48:	4240      	negne	r0, r0
 8000a4a:	4770      	bx	lr
 8000a4c:	f04f 0000 	mov.w	r0, #0
 8000a50:	4770      	bx	lr
 8000a52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a56:	d105      	bne.n	8000a64 <__aeabi_d2iz+0x48>
 8000a58:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a5c:	bf08      	it	eq
 8000a5e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop

08000a6c <__aeabi_uldivmod>:
 8000a6c:	b953      	cbnz	r3, 8000a84 <__aeabi_uldivmod+0x18>
 8000a6e:	b94a      	cbnz	r2, 8000a84 <__aeabi_uldivmod+0x18>
 8000a70:	2900      	cmp	r1, #0
 8000a72:	bf08      	it	eq
 8000a74:	2800      	cmpeq	r0, #0
 8000a76:	bf1c      	itt	ne
 8000a78:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000a7c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000a80:	f000 b974 	b.w	8000d6c <__aeabi_idiv0>
 8000a84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a8c:	f000 f806 	bl	8000a9c <__udivmoddi4>
 8000a90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a98:	b004      	add	sp, #16
 8000a9a:	4770      	bx	lr

08000a9c <__udivmoddi4>:
 8000a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000aa0:	9d08      	ldr	r5, [sp, #32]
 8000aa2:	4604      	mov	r4, r0
 8000aa4:	468e      	mov	lr, r1
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d14d      	bne.n	8000b46 <__udivmoddi4+0xaa>
 8000aaa:	428a      	cmp	r2, r1
 8000aac:	4694      	mov	ip, r2
 8000aae:	d969      	bls.n	8000b84 <__udivmoddi4+0xe8>
 8000ab0:	fab2 f282 	clz	r2, r2
 8000ab4:	b152      	cbz	r2, 8000acc <__udivmoddi4+0x30>
 8000ab6:	fa01 f302 	lsl.w	r3, r1, r2
 8000aba:	f1c2 0120 	rsb	r1, r2, #32
 8000abe:	fa20 f101 	lsr.w	r1, r0, r1
 8000ac2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ac6:	ea41 0e03 	orr.w	lr, r1, r3
 8000aca:	4094      	lsls	r4, r2
 8000acc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ad0:	0c21      	lsrs	r1, r4, #16
 8000ad2:	fbbe f6f8 	udiv	r6, lr, r8
 8000ad6:	fa1f f78c 	uxth.w	r7, ip
 8000ada:	fb08 e316 	mls	r3, r8, r6, lr
 8000ade:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000ae2:	fb06 f107 	mul.w	r1, r6, r7
 8000ae6:	4299      	cmp	r1, r3
 8000ae8:	d90a      	bls.n	8000b00 <__udivmoddi4+0x64>
 8000aea:	eb1c 0303 	adds.w	r3, ip, r3
 8000aee:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000af2:	f080 811f 	bcs.w	8000d34 <__udivmoddi4+0x298>
 8000af6:	4299      	cmp	r1, r3
 8000af8:	f240 811c 	bls.w	8000d34 <__udivmoddi4+0x298>
 8000afc:	3e02      	subs	r6, #2
 8000afe:	4463      	add	r3, ip
 8000b00:	1a5b      	subs	r3, r3, r1
 8000b02:	b2a4      	uxth	r4, r4
 8000b04:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b08:	fb08 3310 	mls	r3, r8, r0, r3
 8000b0c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b10:	fb00 f707 	mul.w	r7, r0, r7
 8000b14:	42a7      	cmp	r7, r4
 8000b16:	d90a      	bls.n	8000b2e <__udivmoddi4+0x92>
 8000b18:	eb1c 0404 	adds.w	r4, ip, r4
 8000b1c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000b20:	f080 810a 	bcs.w	8000d38 <__udivmoddi4+0x29c>
 8000b24:	42a7      	cmp	r7, r4
 8000b26:	f240 8107 	bls.w	8000d38 <__udivmoddi4+0x29c>
 8000b2a:	4464      	add	r4, ip
 8000b2c:	3802      	subs	r0, #2
 8000b2e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b32:	1be4      	subs	r4, r4, r7
 8000b34:	2600      	movs	r6, #0
 8000b36:	b11d      	cbz	r5, 8000b40 <__udivmoddi4+0xa4>
 8000b38:	40d4      	lsrs	r4, r2
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	e9c5 4300 	strd	r4, r3, [r5]
 8000b40:	4631      	mov	r1, r6
 8000b42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b46:	428b      	cmp	r3, r1
 8000b48:	d909      	bls.n	8000b5e <__udivmoddi4+0xc2>
 8000b4a:	2d00      	cmp	r5, #0
 8000b4c:	f000 80ef 	beq.w	8000d2e <__udivmoddi4+0x292>
 8000b50:	2600      	movs	r6, #0
 8000b52:	e9c5 0100 	strd	r0, r1, [r5]
 8000b56:	4630      	mov	r0, r6
 8000b58:	4631      	mov	r1, r6
 8000b5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b5e:	fab3 f683 	clz	r6, r3
 8000b62:	2e00      	cmp	r6, #0
 8000b64:	d14a      	bne.n	8000bfc <__udivmoddi4+0x160>
 8000b66:	428b      	cmp	r3, r1
 8000b68:	d302      	bcc.n	8000b70 <__udivmoddi4+0xd4>
 8000b6a:	4282      	cmp	r2, r0
 8000b6c:	f200 80f9 	bhi.w	8000d62 <__udivmoddi4+0x2c6>
 8000b70:	1a84      	subs	r4, r0, r2
 8000b72:	eb61 0303 	sbc.w	r3, r1, r3
 8000b76:	2001      	movs	r0, #1
 8000b78:	469e      	mov	lr, r3
 8000b7a:	2d00      	cmp	r5, #0
 8000b7c:	d0e0      	beq.n	8000b40 <__udivmoddi4+0xa4>
 8000b7e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b82:	e7dd      	b.n	8000b40 <__udivmoddi4+0xa4>
 8000b84:	b902      	cbnz	r2, 8000b88 <__udivmoddi4+0xec>
 8000b86:	deff      	udf	#255	; 0xff
 8000b88:	fab2 f282 	clz	r2, r2
 8000b8c:	2a00      	cmp	r2, #0
 8000b8e:	f040 8092 	bne.w	8000cb6 <__udivmoddi4+0x21a>
 8000b92:	eba1 010c 	sub.w	r1, r1, ip
 8000b96:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b9a:	fa1f fe8c 	uxth.w	lr, ip
 8000b9e:	2601      	movs	r6, #1
 8000ba0:	0c20      	lsrs	r0, r4, #16
 8000ba2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ba6:	fb07 1113 	mls	r1, r7, r3, r1
 8000baa:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bae:	fb0e f003 	mul.w	r0, lr, r3
 8000bb2:	4288      	cmp	r0, r1
 8000bb4:	d908      	bls.n	8000bc8 <__udivmoddi4+0x12c>
 8000bb6:	eb1c 0101 	adds.w	r1, ip, r1
 8000bba:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000bbe:	d202      	bcs.n	8000bc6 <__udivmoddi4+0x12a>
 8000bc0:	4288      	cmp	r0, r1
 8000bc2:	f200 80cb 	bhi.w	8000d5c <__udivmoddi4+0x2c0>
 8000bc6:	4643      	mov	r3, r8
 8000bc8:	1a09      	subs	r1, r1, r0
 8000bca:	b2a4      	uxth	r4, r4
 8000bcc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bd0:	fb07 1110 	mls	r1, r7, r0, r1
 8000bd4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000bd8:	fb0e fe00 	mul.w	lr, lr, r0
 8000bdc:	45a6      	cmp	lr, r4
 8000bde:	d908      	bls.n	8000bf2 <__udivmoddi4+0x156>
 8000be0:	eb1c 0404 	adds.w	r4, ip, r4
 8000be4:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000be8:	d202      	bcs.n	8000bf0 <__udivmoddi4+0x154>
 8000bea:	45a6      	cmp	lr, r4
 8000bec:	f200 80bb 	bhi.w	8000d66 <__udivmoddi4+0x2ca>
 8000bf0:	4608      	mov	r0, r1
 8000bf2:	eba4 040e 	sub.w	r4, r4, lr
 8000bf6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000bfa:	e79c      	b.n	8000b36 <__udivmoddi4+0x9a>
 8000bfc:	f1c6 0720 	rsb	r7, r6, #32
 8000c00:	40b3      	lsls	r3, r6
 8000c02:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c06:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c0a:	fa20 f407 	lsr.w	r4, r0, r7
 8000c0e:	fa01 f306 	lsl.w	r3, r1, r6
 8000c12:	431c      	orrs	r4, r3
 8000c14:	40f9      	lsrs	r1, r7
 8000c16:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c1a:	fa00 f306 	lsl.w	r3, r0, r6
 8000c1e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c22:	0c20      	lsrs	r0, r4, #16
 8000c24:	fa1f fe8c 	uxth.w	lr, ip
 8000c28:	fb09 1118 	mls	r1, r9, r8, r1
 8000c2c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c30:	fb08 f00e 	mul.w	r0, r8, lr
 8000c34:	4288      	cmp	r0, r1
 8000c36:	fa02 f206 	lsl.w	r2, r2, r6
 8000c3a:	d90b      	bls.n	8000c54 <__udivmoddi4+0x1b8>
 8000c3c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c40:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000c44:	f080 8088 	bcs.w	8000d58 <__udivmoddi4+0x2bc>
 8000c48:	4288      	cmp	r0, r1
 8000c4a:	f240 8085 	bls.w	8000d58 <__udivmoddi4+0x2bc>
 8000c4e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c52:	4461      	add	r1, ip
 8000c54:	1a09      	subs	r1, r1, r0
 8000c56:	b2a4      	uxth	r4, r4
 8000c58:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c5c:	fb09 1110 	mls	r1, r9, r0, r1
 8000c60:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c64:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c68:	458e      	cmp	lr, r1
 8000c6a:	d908      	bls.n	8000c7e <__udivmoddi4+0x1e2>
 8000c6c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c70:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000c74:	d26c      	bcs.n	8000d50 <__udivmoddi4+0x2b4>
 8000c76:	458e      	cmp	lr, r1
 8000c78:	d96a      	bls.n	8000d50 <__udivmoddi4+0x2b4>
 8000c7a:	3802      	subs	r0, #2
 8000c7c:	4461      	add	r1, ip
 8000c7e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c82:	fba0 9402 	umull	r9, r4, r0, r2
 8000c86:	eba1 010e 	sub.w	r1, r1, lr
 8000c8a:	42a1      	cmp	r1, r4
 8000c8c:	46c8      	mov	r8, r9
 8000c8e:	46a6      	mov	lr, r4
 8000c90:	d356      	bcc.n	8000d40 <__udivmoddi4+0x2a4>
 8000c92:	d053      	beq.n	8000d3c <__udivmoddi4+0x2a0>
 8000c94:	b15d      	cbz	r5, 8000cae <__udivmoddi4+0x212>
 8000c96:	ebb3 0208 	subs.w	r2, r3, r8
 8000c9a:	eb61 010e 	sbc.w	r1, r1, lr
 8000c9e:	fa01 f707 	lsl.w	r7, r1, r7
 8000ca2:	fa22 f306 	lsr.w	r3, r2, r6
 8000ca6:	40f1      	lsrs	r1, r6
 8000ca8:	431f      	orrs	r7, r3
 8000caa:	e9c5 7100 	strd	r7, r1, [r5]
 8000cae:	2600      	movs	r6, #0
 8000cb0:	4631      	mov	r1, r6
 8000cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb6:	f1c2 0320 	rsb	r3, r2, #32
 8000cba:	40d8      	lsrs	r0, r3
 8000cbc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cc0:	fa21 f303 	lsr.w	r3, r1, r3
 8000cc4:	4091      	lsls	r1, r2
 8000cc6:	4301      	orrs	r1, r0
 8000cc8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ccc:	fa1f fe8c 	uxth.w	lr, ip
 8000cd0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000cd4:	fb07 3610 	mls	r6, r7, r0, r3
 8000cd8:	0c0b      	lsrs	r3, r1, #16
 8000cda:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000cde:	fb00 f60e 	mul.w	r6, r0, lr
 8000ce2:	429e      	cmp	r6, r3
 8000ce4:	fa04 f402 	lsl.w	r4, r4, r2
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x260>
 8000cea:	eb1c 0303 	adds.w	r3, ip, r3
 8000cee:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000cf2:	d22f      	bcs.n	8000d54 <__udivmoddi4+0x2b8>
 8000cf4:	429e      	cmp	r6, r3
 8000cf6:	d92d      	bls.n	8000d54 <__udivmoddi4+0x2b8>
 8000cf8:	3802      	subs	r0, #2
 8000cfa:	4463      	add	r3, ip
 8000cfc:	1b9b      	subs	r3, r3, r6
 8000cfe:	b289      	uxth	r1, r1
 8000d00:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d04:	fb07 3316 	mls	r3, r7, r6, r3
 8000d08:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d0c:	fb06 f30e 	mul.w	r3, r6, lr
 8000d10:	428b      	cmp	r3, r1
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x28a>
 8000d14:	eb1c 0101 	adds.w	r1, ip, r1
 8000d18:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000d1c:	d216      	bcs.n	8000d4c <__udivmoddi4+0x2b0>
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d914      	bls.n	8000d4c <__udivmoddi4+0x2b0>
 8000d22:	3e02      	subs	r6, #2
 8000d24:	4461      	add	r1, ip
 8000d26:	1ac9      	subs	r1, r1, r3
 8000d28:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d2c:	e738      	b.n	8000ba0 <__udivmoddi4+0x104>
 8000d2e:	462e      	mov	r6, r5
 8000d30:	4628      	mov	r0, r5
 8000d32:	e705      	b.n	8000b40 <__udivmoddi4+0xa4>
 8000d34:	4606      	mov	r6, r0
 8000d36:	e6e3      	b.n	8000b00 <__udivmoddi4+0x64>
 8000d38:	4618      	mov	r0, r3
 8000d3a:	e6f8      	b.n	8000b2e <__udivmoddi4+0x92>
 8000d3c:	454b      	cmp	r3, r9
 8000d3e:	d2a9      	bcs.n	8000c94 <__udivmoddi4+0x1f8>
 8000d40:	ebb9 0802 	subs.w	r8, r9, r2
 8000d44:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d48:	3801      	subs	r0, #1
 8000d4a:	e7a3      	b.n	8000c94 <__udivmoddi4+0x1f8>
 8000d4c:	4646      	mov	r6, r8
 8000d4e:	e7ea      	b.n	8000d26 <__udivmoddi4+0x28a>
 8000d50:	4620      	mov	r0, r4
 8000d52:	e794      	b.n	8000c7e <__udivmoddi4+0x1e2>
 8000d54:	4640      	mov	r0, r8
 8000d56:	e7d1      	b.n	8000cfc <__udivmoddi4+0x260>
 8000d58:	46d0      	mov	r8, sl
 8000d5a:	e77b      	b.n	8000c54 <__udivmoddi4+0x1b8>
 8000d5c:	3b02      	subs	r3, #2
 8000d5e:	4461      	add	r1, ip
 8000d60:	e732      	b.n	8000bc8 <__udivmoddi4+0x12c>
 8000d62:	4630      	mov	r0, r6
 8000d64:	e709      	b.n	8000b7a <__udivmoddi4+0xde>
 8000d66:	4464      	add	r4, ip
 8000d68:	3802      	subs	r0, #2
 8000d6a:	e742      	b.n	8000bf2 <__udivmoddi4+0x156>

08000d6c <__aeabi_idiv0>:
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop

08000d70 <Max30102_WriteReg>:
}MAX30102_STATE;

MAX30102_STATE StateMachine;

MAX30102_STATUS Max30102_WriteReg(uint8_t uch_addr, uint8_t uch_data)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b086      	sub	sp, #24
 8000d74:	af04      	add	r7, sp, #16
 8000d76:	4603      	mov	r3, r0
 8000d78:	460a      	mov	r2, r1
 8000d7a:	71fb      	strb	r3, [r7, #7]
 8000d7c:	4613      	mov	r3, r2
 8000d7e:	71bb      	strb	r3, [r7, #6]
	if(HAL_I2C_Mem_Write(i2c_max30102, MAX30102_ADDRESS, uch_addr, 1, &uch_data, 1, I2C_TIMEOUT) == HAL_OK)
 8000d80:	4b0b      	ldr	r3, [pc, #44]	; (8000db0 <Max30102_WriteReg+0x40>)
 8000d82:	6818      	ldr	r0, [r3, #0]
 8000d84:	79fb      	ldrb	r3, [r7, #7]
 8000d86:	b29a      	uxth	r2, r3
 8000d88:	2301      	movs	r3, #1
 8000d8a:	9302      	str	r3, [sp, #8]
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	9301      	str	r3, [sp, #4]
 8000d90:	1dbb      	adds	r3, r7, #6
 8000d92:	9300      	str	r3, [sp, #0]
 8000d94:	2301      	movs	r3, #1
 8000d96:	21ae      	movs	r1, #174	; 0xae
 8000d98:	f003 fcd4 	bl	8004744 <HAL_I2C_Mem_Write>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d101      	bne.n	8000da6 <Max30102_WriteReg+0x36>
		return MAX30102_OK;
 8000da2:	2301      	movs	r3, #1
 8000da4:	e000      	b.n	8000da8 <Max30102_WriteReg+0x38>
	return MAX30102_ERROR;
 8000da6:	2300      	movs	r3, #0
}
 8000da8:	4618      	mov	r0, r3
 8000daa:	3708      	adds	r7, #8
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	200000a0 	.word	0x200000a0

08000db4 <Max30102_ReadReg>:

MAX30102_STATUS Max30102_ReadReg(uint8_t uch_addr, uint8_t *puch_data)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b086      	sub	sp, #24
 8000db8:	af04      	add	r7, sp, #16
 8000dba:	4603      	mov	r3, r0
 8000dbc:	6039      	str	r1, [r7, #0]
 8000dbe:	71fb      	strb	r3, [r7, #7]
	if(HAL_I2C_Mem_Read(i2c_max30102, MAX30102_ADDRESS, uch_addr, 1, puch_data, 1, I2C_TIMEOUT) == HAL_OK)
 8000dc0:	4b0b      	ldr	r3, [pc, #44]	; (8000df0 <Max30102_ReadReg+0x3c>)
 8000dc2:	6818      	ldr	r0, [r3, #0]
 8000dc4:	79fb      	ldrb	r3, [r7, #7]
 8000dc6:	b29a      	uxth	r2, r3
 8000dc8:	2301      	movs	r3, #1
 8000dca:	9302      	str	r3, [sp, #8]
 8000dcc:	2301      	movs	r3, #1
 8000dce:	9301      	str	r3, [sp, #4]
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	9300      	str	r3, [sp, #0]
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	21ae      	movs	r1, #174	; 0xae
 8000dd8:	f003 fdae 	bl	8004938 <HAL_I2C_Mem_Read>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d101      	bne.n	8000de6 <Max30102_ReadReg+0x32>
		return MAX30102_OK;
 8000de2:	2301      	movs	r3, #1
 8000de4:	e000      	b.n	8000de8 <Max30102_ReadReg+0x34>
	return MAX30102_ERROR;
 8000de6:	2300      	movs	r3, #0
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	3708      	adds	r7, #8
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	200000a0 	.word	0x200000a0

08000df4 <Max30102_WriteRegisterBit>:

MAX30102_STATUS Max30102_WriteRegisterBit(uint8_t Register, uint8_t Bit, uint8_t Value)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b084      	sub	sp, #16
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	71fb      	strb	r3, [r7, #7]
 8000dfe:	460b      	mov	r3, r1
 8000e00:	71bb      	strb	r3, [r7, #6]
 8000e02:	4613      	mov	r3, r2
 8000e04:	717b      	strb	r3, [r7, #5]
	uint8_t tmp;
	if(MAX30102_OK != Max30102_ReadReg(Register, &tmp))
 8000e06:	f107 020f 	add.w	r2, r7, #15
 8000e0a:	79fb      	ldrb	r3, [r7, #7]
 8000e0c:	4611      	mov	r1, r2
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f7ff ffd0 	bl	8000db4 <Max30102_ReadReg>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b01      	cmp	r3, #1
 8000e18:	d001      	beq.n	8000e1e <Max30102_WriteRegisterBit+0x2a>
		return MAX30102_ERROR;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	e025      	b.n	8000e6a <Max30102_WriteRegisterBit+0x76>
	tmp &= ~(1<<Bit);
 8000e1e:	79bb      	ldrb	r3, [r7, #6]
 8000e20:	2201      	movs	r2, #1
 8000e22:	fa02 f303 	lsl.w	r3, r2, r3
 8000e26:	b25b      	sxtb	r3, r3
 8000e28:	43db      	mvns	r3, r3
 8000e2a:	b25a      	sxtb	r2, r3
 8000e2c:	7bfb      	ldrb	r3, [r7, #15]
 8000e2e:	b25b      	sxtb	r3, r3
 8000e30:	4013      	ands	r3, r2
 8000e32:	b25b      	sxtb	r3, r3
 8000e34:	b2db      	uxtb	r3, r3
 8000e36:	73fb      	strb	r3, [r7, #15]
	tmp |= (Value&0x01)<<Bit;
 8000e38:	797b      	ldrb	r3, [r7, #5]
 8000e3a:	f003 0201 	and.w	r2, r3, #1
 8000e3e:	79bb      	ldrb	r3, [r7, #6]
 8000e40:	fa02 f303 	lsl.w	r3, r2, r3
 8000e44:	b25a      	sxtb	r2, r3
 8000e46:	7bfb      	ldrb	r3, [r7, #15]
 8000e48:	b25b      	sxtb	r3, r3
 8000e4a:	4313      	orrs	r3, r2
 8000e4c:	b25b      	sxtb	r3, r3
 8000e4e:	b2db      	uxtb	r3, r3
 8000e50:	73fb      	strb	r3, [r7, #15]
	if(MAX30102_OK != Max30102_WriteReg(Register, tmp))
 8000e52:	7bfa      	ldrb	r2, [r7, #15]
 8000e54:	79fb      	ldrb	r3, [r7, #7]
 8000e56:	4611      	mov	r1, r2
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f7ff ff89 	bl	8000d70 <Max30102_WriteReg>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b01      	cmp	r3, #1
 8000e62:	d001      	beq.n	8000e68 <Max30102_WriteRegisterBit+0x74>
		return MAX30102_ERROR;
 8000e64:	2300      	movs	r3, #0
 8000e66:	e000      	b.n	8000e6a <Max30102_WriteRegisterBit+0x76>

	return MAX30102_OK;
 8000e68:	2301      	movs	r3, #1
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	3710      	adds	r7, #16
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
	...

08000e74 <Max30102_ReadFifo>:

MAX30102_STATUS Max30102_ReadFifo(volatile uint32_t *pun_red_led, volatile uint32_t *pun_ir_led)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b08a      	sub	sp, #40	; 0x28
 8000e78:	af04      	add	r7, sp, #16
 8000e7a:	6078      	str	r0, [r7, #4]
 8000e7c:	6039      	str	r1, [r7, #0]
	uint32_t un_temp;
	*pun_red_led=0;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	2200      	movs	r2, #0
 8000e82:	601a      	str	r2, [r3, #0]
	*pun_ir_led=0;
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	2200      	movs	r2, #0
 8000e88:	601a      	str	r2, [r3, #0]
	uint8_t ach_i2c_data[6];

	if(HAL_I2C_Mem_Read(i2c_max30102, MAX30102_ADDRESS, REG_FIFO_DATA, 1, ach_i2c_data, 6, I2C_TIMEOUT) != HAL_OK)
 8000e8a:	4b30      	ldr	r3, [pc, #192]	; (8000f4c <Max30102_ReadFifo+0xd8>)
 8000e8c:	6818      	ldr	r0, [r3, #0]
 8000e8e:	2301      	movs	r3, #1
 8000e90:	9302      	str	r3, [sp, #8]
 8000e92:	2306      	movs	r3, #6
 8000e94:	9301      	str	r3, [sp, #4]
 8000e96:	f107 030c 	add.w	r3, r7, #12
 8000e9a:	9300      	str	r3, [sp, #0]
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	2207      	movs	r2, #7
 8000ea0:	21ae      	movs	r1, #174	; 0xae
 8000ea2:	f003 fd49 	bl	8004938 <HAL_I2C_Mem_Read>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d001      	beq.n	8000eb0 <Max30102_ReadFifo+0x3c>
	{
		return MAX30102_ERROR;
 8000eac:	2300      	movs	r3, #0
 8000eae:	e048      	b.n	8000f42 <Max30102_ReadFifo+0xce>
	}
	un_temp=(unsigned char) ach_i2c_data[0];
 8000eb0:	7b3b      	ldrb	r3, [r7, #12]
 8000eb2:	617b      	str	r3, [r7, #20]
	un_temp<<=16;
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	041b      	lsls	r3, r3, #16
 8000eb8:	617b      	str	r3, [r7, #20]
	*pun_red_led+=un_temp;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681a      	ldr	r2, [r3, #0]
 8000ebe:	697b      	ldr	r3, [r7, #20]
 8000ec0:	441a      	add	r2, r3
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	601a      	str	r2, [r3, #0]
	un_temp=(unsigned char) ach_i2c_data[1];
 8000ec6:	7b7b      	ldrb	r3, [r7, #13]
 8000ec8:	617b      	str	r3, [r7, #20]
	un_temp<<=8;
 8000eca:	697b      	ldr	r3, [r7, #20]
 8000ecc:	021b      	lsls	r3, r3, #8
 8000ece:	617b      	str	r3, [r7, #20]
	*pun_red_led+=un_temp;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681a      	ldr	r2, [r3, #0]
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	441a      	add	r2, r3
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	601a      	str	r2, [r3, #0]
	un_temp=(unsigned char) ach_i2c_data[2];
 8000edc:	7bbb      	ldrb	r3, [r7, #14]
 8000ede:	617b      	str	r3, [r7, #20]
	*pun_red_led+=un_temp;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681a      	ldr	r2, [r3, #0]
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	441a      	add	r2, r3
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	601a      	str	r2, [r3, #0]

	un_temp=(unsigned char) ach_i2c_data[3];
 8000eec:	7bfb      	ldrb	r3, [r7, #15]
 8000eee:	617b      	str	r3, [r7, #20]
	un_temp<<=16;
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	041b      	lsls	r3, r3, #16
 8000ef4:	617b      	str	r3, [r7, #20]
	*pun_ir_led+=un_temp;
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	681a      	ldr	r2, [r3, #0]
 8000efa:	697b      	ldr	r3, [r7, #20]
 8000efc:	441a      	add	r2, r3
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	601a      	str	r2, [r3, #0]
	un_temp=(unsigned char) ach_i2c_data[4];
 8000f02:	7c3b      	ldrb	r3, [r7, #16]
 8000f04:	617b      	str	r3, [r7, #20]
	un_temp<<=8;
 8000f06:	697b      	ldr	r3, [r7, #20]
 8000f08:	021b      	lsls	r3, r3, #8
 8000f0a:	617b      	str	r3, [r7, #20]
	*pun_ir_led+=un_temp;
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	681a      	ldr	r2, [r3, #0]
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	441a      	add	r2, r3
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	601a      	str	r2, [r3, #0]
	un_temp=(unsigned char) ach_i2c_data[5];
 8000f18:	7c7b      	ldrb	r3, [r7, #17]
 8000f1a:	617b      	str	r3, [r7, #20]
	*pun_ir_led+=un_temp;
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	681a      	ldr	r2, [r3, #0]
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	441a      	add	r2, r3
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	601a      	str	r2, [r3, #0]
	*pun_red_led&=0x03FFFF;  //Mask MSB [23:18]
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	f3c3 0211 	ubfx	r2, r3, #0, #18
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	601a      	str	r2, [r3, #0]
	*pun_ir_led&=0x03FFFF;  //Mask MSB [23:18]
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	f3c3 0211 	ubfx	r2, r3, #0, #18
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	601a      	str	r2, [r3, #0]

	return MAX30102_OK;
 8000f40:	2301      	movs	r3, #1
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	3718      	adds	r7, #24
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	200000a0 	.word	0x200000a0

08000f50 <Max30102_SetIntAlmostFullEnabled>:

//
//	Interrupts
//
MAX30102_STATUS Max30102_SetIntAlmostFullEnabled(uint8_t Enable)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	4603      	mov	r3, r0
 8000f58:	71fb      	strb	r3, [r7, #7]
	return Max30102_WriteRegisterBit(REG_INTR_ENABLE_1, INT_A_FULL_BIT, Enable);
 8000f5a:	79fb      	ldrb	r3, [r7, #7]
 8000f5c:	461a      	mov	r2, r3
 8000f5e:	2107      	movs	r1, #7
 8000f60:	2002      	movs	r0, #2
 8000f62:	f7ff ff47 	bl	8000df4 <Max30102_WriteRegisterBit>
 8000f66:	4603      	mov	r3, r0
}
 8000f68:	4618      	mov	r0, r3
 8000f6a:	3708      	adds	r7, #8
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}

08000f70 <Max30102_SetIntFifoDataReadyEnabled>:

MAX30102_STATUS Max30102_SetIntFifoDataReadyEnabled(uint8_t Enable)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	4603      	mov	r3, r0
 8000f78:	71fb      	strb	r3, [r7, #7]

	return Max30102_WriteRegisterBit(REG_INTR_ENABLE_1, INT_PPG_RDY_BIT, Enable);
 8000f7a:	79fb      	ldrb	r3, [r7, #7]
 8000f7c:	461a      	mov	r2, r3
 8000f7e:	2106      	movs	r1, #6
 8000f80:	2002      	movs	r0, #2
 8000f82:	f7ff ff37 	bl	8000df4 <Max30102_WriteRegisterBit>
 8000f86:	4603      	mov	r3, r0
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	3708      	adds	r7, #8
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}

08000f90 <Max30102_ReadInterruptStatus>:

	return Max30102_WriteRegisterBit(REG_INTR_ENABLE_2, INT_DIE_TEMP_RDY_BIT, Enable);
}
#endif
MAX30102_STATUS Max30102_ReadInterruptStatus(uint8_t *Status)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b084      	sub	sp, #16
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	*Status = 0;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	701a      	strb	r2, [r3, #0]

	if(MAX30102_OK != Max30102_ReadReg(REG_INTR_STATUS_1, &tmp))
 8000f9e:	f107 030f 	add.w	r3, r7, #15
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	2000      	movs	r0, #0
 8000fa6:	f7ff ff05 	bl	8000db4 <Max30102_ReadReg>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b01      	cmp	r3, #1
 8000fae:	d001      	beq.n	8000fb4 <Max30102_ReadInterruptStatus+0x24>
		return MAX30102_ERROR;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	e00d      	b.n	8000fd0 <Max30102_ReadInterruptStatus+0x40>
	*Status |= tmp & 0xE1; // 3 highest bits
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	b25a      	sxtb	r2, r3
 8000fba:	7bfb      	ldrb	r3, [r7, #15]
 8000fbc:	b25b      	sxtb	r3, r3
 8000fbe:	f023 031e 	bic.w	r3, r3, #30
 8000fc2:	b25b      	sxtb	r3, r3
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	b25b      	sxtb	r3, r3
 8000fc8:	b2da      	uxtb	r2, r3
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	701a      	strb	r2, [r3, #0]
#ifdef MAX30102_USE_INTERNAL_TEMPERATURE
	if(MAX30102_OK != Max30102_ReadReg(REG_INTR_STATUS_2, &tmp))
		return MAX30102_ERROR;
	*Status |= tmp & 0x02;
#endif
	return MAX30102_OK;
 8000fce:	2301      	movs	r3, #1
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	3710      	adds	r7, #16
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}

08000fd8 <Max30102_InterruptCallback>:

void Max30102_InterruptCallback(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
	uint8_t Status;
	while(MAX30102_OK != Max30102_ReadInterruptStatus(&Status));
 8000fde:	bf00      	nop
 8000fe0:	1dbb      	adds	r3, r7, #6
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f7ff ffd4 	bl	8000f90 <Max30102_ReadInterruptStatus>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b01      	cmp	r3, #1
 8000fec:	d1f8      	bne.n	8000fe0 <Max30102_InterruptCallback+0x8>

	// Almost Full FIFO Interrupt handle
	if(Status & (1<<INT_A_FULL_BIT))
 8000fee:	79bb      	ldrb	r3, [r7, #6]
 8000ff0:	b25b      	sxtb	r3, r3
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	da4a      	bge.n	800108c <Max30102_InterruptCallback+0xb4>
	{
		for(uint8_t i = 0; i < MAX30102_FIFO_ALMOST_FULL_SAMPLES; i++)
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	71fb      	strb	r3, [r7, #7]
 8000ffa:	e044      	b.n	8001086 <Max30102_InterruptCallback+0xae>
		{
			while(MAX30102_OK != Max30102_ReadFifo((RedBuffer+BufferHead), (IrBuffer+BufferHead)));
 8000ffc:	bf00      	nop
 8000ffe:	4b49      	ldr	r3, [pc, #292]	; (8001124 <Max30102_InterruptCallback+0x14c>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	009b      	lsls	r3, r3, #2
 8001004:	4a48      	ldr	r2, [pc, #288]	; (8001128 <Max30102_InterruptCallback+0x150>)
 8001006:	441a      	add	r2, r3
 8001008:	4b46      	ldr	r3, [pc, #280]	; (8001124 <Max30102_InterruptCallback+0x14c>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	009b      	lsls	r3, r3, #2
 800100e:	4947      	ldr	r1, [pc, #284]	; (800112c <Max30102_InterruptCallback+0x154>)
 8001010:	440b      	add	r3, r1
 8001012:	4619      	mov	r1, r3
 8001014:	4610      	mov	r0, r2
 8001016:	f7ff ff2d 	bl	8000e74 <Max30102_ReadFifo>
 800101a:	4603      	mov	r3, r0
 800101c:	2b01      	cmp	r3, #1
 800101e:	d1ee      	bne.n	8000ffe <Max30102_InterruptCallback+0x26>
			if(IsFingerOnScreen)
 8001020:	4b43      	ldr	r3, [pc, #268]	; (8001130 <Max30102_InterruptCallback+0x158>)
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	b2db      	uxtb	r3, r3
 8001026:	2b00      	cmp	r3, #0
 8001028:	d00c      	beq.n	8001044 <Max30102_InterruptCallback+0x6c>
			{
				if(IrBuffer[BufferHead] < MAX30102_IR_VALUE_FINGER_OUT_SENSOR) IsFingerOnScreen = 0;
 800102a:	4b3e      	ldr	r3, [pc, #248]	; (8001124 <Max30102_InterruptCallback+0x14c>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	4a3f      	ldr	r2, [pc, #252]	; (800112c <Max30102_InterruptCallback+0x154>)
 8001030:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001034:	f242 720f 	movw	r2, #9999	; 0x270f
 8001038:	4293      	cmp	r3, r2
 800103a:	d80e      	bhi.n	800105a <Max30102_InterruptCallback+0x82>
 800103c:	4b3c      	ldr	r3, [pc, #240]	; (8001130 <Max30102_InterruptCallback+0x158>)
 800103e:	2200      	movs	r2, #0
 8001040:	701a      	strb	r2, [r3, #0]
 8001042:	e00a      	b.n	800105a <Max30102_InterruptCallback+0x82>
			}
			else
			{
				if(IrBuffer[BufferHead] > MAX30102_IR_VALUE_FINGER_ON_SENSOR) IsFingerOnScreen = 1;
 8001044:	4b37      	ldr	r3, [pc, #220]	; (8001124 <Max30102_InterruptCallback+0x14c>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a38      	ldr	r2, [pc, #224]	; (800112c <Max30102_InterruptCallback+0x154>)
 800104a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800104e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8001052:	d902      	bls.n	800105a <Max30102_InterruptCallback+0x82>
 8001054:	4b36      	ldr	r3, [pc, #216]	; (8001130 <Max30102_InterruptCallback+0x158>)
 8001056:	2201      	movs	r2, #1
 8001058:	701a      	strb	r2, [r3, #0]
			}
			BufferHead = (BufferHead + 1) % MAX30102_BUFFER_LENGTH;
 800105a:	4b32      	ldr	r3, [pc, #200]	; (8001124 <Max30102_InterruptCallback+0x14c>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	1c5a      	adds	r2, r3, #1
 8001060:	4b34      	ldr	r3, [pc, #208]	; (8001134 <Max30102_InterruptCallback+0x15c>)
 8001062:	fba3 1302 	umull	r1, r3, r3, r2
 8001066:	099b      	lsrs	r3, r3, #6
 8001068:	f44f 7116 	mov.w	r1, #600	; 0x258
 800106c:	fb01 f303 	mul.w	r3, r1, r3
 8001070:	1ad3      	subs	r3, r2, r3
 8001072:	4a2c      	ldr	r2, [pc, #176]	; (8001124 <Max30102_InterruptCallback+0x14c>)
 8001074:	6013      	str	r3, [r2, #0]
			CollectedSamples++;
 8001076:	4b30      	ldr	r3, [pc, #192]	; (8001138 <Max30102_InterruptCallback+0x160>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	3301      	adds	r3, #1
 800107c:	4a2e      	ldr	r2, [pc, #184]	; (8001138 <Max30102_InterruptCallback+0x160>)
 800107e:	6013      	str	r3, [r2, #0]
		for(uint8_t i = 0; i < MAX30102_FIFO_ALMOST_FULL_SAMPLES; i++)
 8001080:	79fb      	ldrb	r3, [r7, #7]
 8001082:	3301      	adds	r3, #1
 8001084:	71fb      	strb	r3, [r7, #7]
 8001086:	79fb      	ldrb	r3, [r7, #7]
 8001088:	2b10      	cmp	r3, #16
 800108a:	d9b7      	bls.n	8000ffc <Max30102_InterruptCallback+0x24>
		}
	}

	// New FIFO Data Ready Interrupt handle
	if(Status & (1<<INT_PPG_RDY_BIT))
 800108c:	79bb      	ldrb	r3, [r7, #6]
 800108e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001092:	2b00      	cmp	r3, #0
 8001094:	d041      	beq.n	800111a <Max30102_InterruptCallback+0x142>
	{
		while(MAX30102_OK != Max30102_ReadFifo((RedBuffer+BufferHead), (IrBuffer+BufferHead)));
 8001096:	bf00      	nop
 8001098:	4b22      	ldr	r3, [pc, #136]	; (8001124 <Max30102_InterruptCallback+0x14c>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	009b      	lsls	r3, r3, #2
 800109e:	4a22      	ldr	r2, [pc, #136]	; (8001128 <Max30102_InterruptCallback+0x150>)
 80010a0:	441a      	add	r2, r3
 80010a2:	4b20      	ldr	r3, [pc, #128]	; (8001124 <Max30102_InterruptCallback+0x14c>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	009b      	lsls	r3, r3, #2
 80010a8:	4920      	ldr	r1, [pc, #128]	; (800112c <Max30102_InterruptCallback+0x154>)
 80010aa:	440b      	add	r3, r1
 80010ac:	4619      	mov	r1, r3
 80010ae:	4610      	mov	r0, r2
 80010b0:	f7ff fee0 	bl	8000e74 <Max30102_ReadFifo>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b01      	cmp	r3, #1
 80010b8:	d1ee      	bne.n	8001098 <Max30102_InterruptCallback+0xc0>
		if(IsFingerOnScreen)
 80010ba:	4b1d      	ldr	r3, [pc, #116]	; (8001130 <Max30102_InterruptCallback+0x158>)
 80010bc:	781b      	ldrb	r3, [r3, #0]
 80010be:	b2db      	uxtb	r3, r3
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d00c      	beq.n	80010de <Max30102_InterruptCallback+0x106>
		{
			if(IrBuffer[BufferHead] < MAX30102_IR_VALUE_FINGER_OUT_SENSOR) IsFingerOnScreen = 0;
 80010c4:	4b17      	ldr	r3, [pc, #92]	; (8001124 <Max30102_InterruptCallback+0x14c>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a18      	ldr	r2, [pc, #96]	; (800112c <Max30102_InterruptCallback+0x154>)
 80010ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010ce:	f242 720f 	movw	r2, #9999	; 0x270f
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d80e      	bhi.n	80010f4 <Max30102_InterruptCallback+0x11c>
 80010d6:	4b16      	ldr	r3, [pc, #88]	; (8001130 <Max30102_InterruptCallback+0x158>)
 80010d8:	2200      	movs	r2, #0
 80010da:	701a      	strb	r2, [r3, #0]
 80010dc:	e00a      	b.n	80010f4 <Max30102_InterruptCallback+0x11c>
		}
		else
		{
			if(IrBuffer[BufferHead] > MAX30102_IR_VALUE_FINGER_ON_SENSOR) IsFingerOnScreen = 1;
 80010de:	4b11      	ldr	r3, [pc, #68]	; (8001124 <Max30102_InterruptCallback+0x14c>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	4a12      	ldr	r2, [pc, #72]	; (800112c <Max30102_InterruptCallback+0x154>)
 80010e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010e8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80010ec:	d902      	bls.n	80010f4 <Max30102_InterruptCallback+0x11c>
 80010ee:	4b10      	ldr	r3, [pc, #64]	; (8001130 <Max30102_InterruptCallback+0x158>)
 80010f0:	2201      	movs	r2, #1
 80010f2:	701a      	strb	r2, [r3, #0]
		}
		BufferHead = (BufferHead + 1) % MAX30102_BUFFER_LENGTH;
 80010f4:	4b0b      	ldr	r3, [pc, #44]	; (8001124 <Max30102_InterruptCallback+0x14c>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	1c5a      	adds	r2, r3, #1
 80010fa:	4b0e      	ldr	r3, [pc, #56]	; (8001134 <Max30102_InterruptCallback+0x15c>)
 80010fc:	fba3 1302 	umull	r1, r3, r3, r2
 8001100:	099b      	lsrs	r3, r3, #6
 8001102:	f44f 7116 	mov.w	r1, #600	; 0x258
 8001106:	fb01 f303 	mul.w	r3, r1, r3
 800110a:	1ad3      	subs	r3, r2, r3
 800110c:	4a05      	ldr	r2, [pc, #20]	; (8001124 <Max30102_InterruptCallback+0x14c>)
 800110e:	6013      	str	r3, [r2, #0]
		CollectedSamples++;
 8001110:	4b09      	ldr	r3, [pc, #36]	; (8001138 <Max30102_InterruptCallback+0x160>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	3301      	adds	r3, #1
 8001116:	4a08      	ldr	r2, [pc, #32]	; (8001138 <Max30102_InterruptCallback+0x160>)
 8001118:	6013      	str	r3, [r2, #0]
	if(Status & (1<<INT_DIE_TEMP_RDY_BIT))
	{

	}
#endif
}
 800111a:	bf00      	nop
 800111c:	3708      	adds	r7, #8
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	20001364 	.word	0x20001364
 8001128:	20000a04 	.word	0x20000a04
 800112c:	200000a4 	.word	0x200000a4
 8001130:	20001370 	.word	0x20001370
 8001134:	1b4e81b5 	.word	0x1b4e81b5
 8001138:	2000136c 	.word	0x2000136c

0800113c <Max30102_FifoWritePointer>:

//
//	FIFO Configuration
//
MAX30102_STATUS Max30102_FifoWritePointer(uint8_t Address)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
 8001142:	4603      	mov	r3, r0
 8001144:	71fb      	strb	r3, [r7, #7]
	if(MAX30102_OK != Max30102_WriteReg(REG_FIFO_WR_PTR,(Address & 0x1F)))  //FIFO_WR_PTR[4:0]
 8001146:	79fb      	ldrb	r3, [r7, #7]
 8001148:	f003 031f 	and.w	r3, r3, #31
 800114c:	b2db      	uxtb	r3, r3
 800114e:	4619      	mov	r1, r3
 8001150:	2004      	movs	r0, #4
 8001152:	f7ff fe0d 	bl	8000d70 <Max30102_WriteReg>
 8001156:	4603      	mov	r3, r0
 8001158:	2b01      	cmp	r3, #1
 800115a:	d001      	beq.n	8001160 <Max30102_FifoWritePointer+0x24>
			return MAX30102_ERROR;
 800115c:	2300      	movs	r3, #0
 800115e:	e000      	b.n	8001162 <Max30102_FifoWritePointer+0x26>
	return MAX30102_OK;
 8001160:	2301      	movs	r3, #1
}
 8001162:	4618      	mov	r0, r3
 8001164:	3708      	adds	r7, #8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}

0800116a <Max30102_FifoOverflowCounter>:

MAX30102_STATUS Max30102_FifoOverflowCounter(uint8_t Address)
{
 800116a:	b580      	push	{r7, lr}
 800116c:	b082      	sub	sp, #8
 800116e:	af00      	add	r7, sp, #0
 8001170:	4603      	mov	r3, r0
 8001172:	71fb      	strb	r3, [r7, #7]
	if(MAX30102_OK != Max30102_WriteReg(REG_OVF_COUNTER,(Address & 0x1F)))  //OVF_COUNTER[4:0]
 8001174:	79fb      	ldrb	r3, [r7, #7]
 8001176:	f003 031f 	and.w	r3, r3, #31
 800117a:	b2db      	uxtb	r3, r3
 800117c:	4619      	mov	r1, r3
 800117e:	2005      	movs	r0, #5
 8001180:	f7ff fdf6 	bl	8000d70 <Max30102_WriteReg>
 8001184:	4603      	mov	r3, r0
 8001186:	2b01      	cmp	r3, #1
 8001188:	d001      	beq.n	800118e <Max30102_FifoOverflowCounter+0x24>
			return MAX30102_ERROR;
 800118a:	2300      	movs	r3, #0
 800118c:	e000      	b.n	8001190 <Max30102_FifoOverflowCounter+0x26>
	return MAX30102_OK;
 800118e:	2301      	movs	r3, #1
}
 8001190:	4618      	mov	r0, r3
 8001192:	3708      	adds	r7, #8
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}

08001198 <Max30102_FifoReadPointer>:

MAX30102_STATUS Max30102_FifoReadPointer(uint8_t Address)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
 800119e:	4603      	mov	r3, r0
 80011a0:	71fb      	strb	r3, [r7, #7]
	if(MAX30102_OK != Max30102_WriteReg(REG_FIFO_RD_PTR,(Address & 0x1F)))  //FIFO_RD_PTR[4:0]
 80011a2:	79fb      	ldrb	r3, [r7, #7]
 80011a4:	f003 031f 	and.w	r3, r3, #31
 80011a8:	b2db      	uxtb	r3, r3
 80011aa:	4619      	mov	r1, r3
 80011ac:	2006      	movs	r0, #6
 80011ae:	f7ff fddf 	bl	8000d70 <Max30102_WriteReg>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b01      	cmp	r3, #1
 80011b6:	d001      	beq.n	80011bc <Max30102_FifoReadPointer+0x24>
			return MAX30102_ERROR;
 80011b8:	2300      	movs	r3, #0
 80011ba:	e000      	b.n	80011be <Max30102_FifoReadPointer+0x26>
	return MAX30102_OK;
 80011bc:	2301      	movs	r3, #1
}
 80011be:	4618      	mov	r0, r3
 80011c0:	3708      	adds	r7, #8
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}

080011c6 <Max30102_FifoSampleAveraging>:

MAX30102_STATUS Max30102_FifoSampleAveraging(uint8_t Value)
{
 80011c6:	b580      	push	{r7, lr}
 80011c8:	b084      	sub	sp, #16
 80011ca:	af00      	add	r7, sp, #0
 80011cc:	4603      	mov	r3, r0
 80011ce:	71fb      	strb	r3, [r7, #7]
	uint8_t tmp;
	if(MAX30102_OK != Max30102_ReadReg(REG_FIFO_CONFIG, &tmp))
 80011d0:	f107 030f 	add.w	r3, r7, #15
 80011d4:	4619      	mov	r1, r3
 80011d6:	2008      	movs	r0, #8
 80011d8:	f7ff fdec 	bl	8000db4 <Max30102_ReadReg>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b01      	cmp	r3, #1
 80011e0:	d001      	beq.n	80011e6 <Max30102_FifoSampleAveraging+0x20>
		return MAX30102_ERROR;
 80011e2:	2300      	movs	r3, #0
 80011e4:	e018      	b.n	8001218 <Max30102_FifoSampleAveraging+0x52>
	tmp &= ~(0x07);
 80011e6:	7bfb      	ldrb	r3, [r7, #15]
 80011e8:	f023 0307 	bic.w	r3, r3, #7
 80011ec:	b2db      	uxtb	r3, r3
 80011ee:	73fb      	strb	r3, [r7, #15]
	tmp |= (Value&0x07)<<5;
 80011f0:	79fb      	ldrb	r3, [r7, #7]
 80011f2:	015b      	lsls	r3, r3, #5
 80011f4:	b25a      	sxtb	r2, r3
 80011f6:	7bfb      	ldrb	r3, [r7, #15]
 80011f8:	b25b      	sxtb	r3, r3
 80011fa:	4313      	orrs	r3, r2
 80011fc:	b25b      	sxtb	r3, r3
 80011fe:	b2db      	uxtb	r3, r3
 8001200:	73fb      	strb	r3, [r7, #15]
	if(MAX30102_OK != Max30102_WriteReg(REG_FIFO_CONFIG, tmp))
 8001202:	7bfb      	ldrb	r3, [r7, #15]
 8001204:	4619      	mov	r1, r3
 8001206:	2008      	movs	r0, #8
 8001208:	f7ff fdb2 	bl	8000d70 <Max30102_WriteReg>
 800120c:	4603      	mov	r3, r0
 800120e:	2b01      	cmp	r3, #1
 8001210:	d001      	beq.n	8001216 <Max30102_FifoSampleAveraging+0x50>
		return MAX30102_ERROR;
 8001212:	2300      	movs	r3, #0
 8001214:	e000      	b.n	8001218 <Max30102_FifoSampleAveraging+0x52>

	return MAX30102_OK;
 8001216:	2301      	movs	r3, #1
}
 8001218:	4618      	mov	r0, r3
 800121a:	3710      	adds	r7, #16
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}

08001220 <Max30102_FifoRolloverEnable>:

MAX30102_STATUS Max30102_FifoRolloverEnable(uint8_t Enable)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
 8001226:	4603      	mov	r3, r0
 8001228:	71fb      	strb	r3, [r7, #7]
	return Max30102_WriteRegisterBit(REG_FIFO_CONFIG, FIFO_CONF_FIFO_ROLLOVER_EN_BIT, (Enable & 0x01));
 800122a:	79fb      	ldrb	r3, [r7, #7]
 800122c:	f003 0301 	and.w	r3, r3, #1
 8001230:	b2db      	uxtb	r3, r3
 8001232:	461a      	mov	r2, r3
 8001234:	2104      	movs	r1, #4
 8001236:	2008      	movs	r0, #8
 8001238:	f7ff fddc 	bl	8000df4 <Max30102_WriteRegisterBit>
 800123c:	4603      	mov	r3, r0
}
 800123e:	4618      	mov	r0, r3
 8001240:	3708      	adds	r7, #8
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}

08001246 <Max30102_FifoAlmostFullValue>:

MAX30102_STATUS Max30102_FifoAlmostFullValue(uint8_t Value)
{
 8001246:	b580      	push	{r7, lr}
 8001248:	b084      	sub	sp, #16
 800124a:	af00      	add	r7, sp, #0
 800124c:	4603      	mov	r3, r0
 800124e:	71fb      	strb	r3, [r7, #7]
	if(Value < 17) Value = 17;
 8001250:	79fb      	ldrb	r3, [r7, #7]
 8001252:	2b10      	cmp	r3, #16
 8001254:	d801      	bhi.n	800125a <Max30102_FifoAlmostFullValue+0x14>
 8001256:	2311      	movs	r3, #17
 8001258:	71fb      	strb	r3, [r7, #7]
	if(Value > 32) Value = 32;
 800125a:	79fb      	ldrb	r3, [r7, #7]
 800125c:	2b20      	cmp	r3, #32
 800125e:	d901      	bls.n	8001264 <Max30102_FifoAlmostFullValue+0x1e>
 8001260:	2320      	movs	r3, #32
 8001262:	71fb      	strb	r3, [r7, #7]
	Value = 32 - Value;
 8001264:	79fb      	ldrb	r3, [r7, #7]
 8001266:	f1c3 0320 	rsb	r3, r3, #32
 800126a:	71fb      	strb	r3, [r7, #7]
	uint8_t tmp;
	if(MAX30102_OK != Max30102_ReadReg(REG_FIFO_CONFIG, &tmp))
 800126c:	f107 030f 	add.w	r3, r7, #15
 8001270:	4619      	mov	r1, r3
 8001272:	2008      	movs	r0, #8
 8001274:	f7ff fd9e 	bl	8000db4 <Max30102_ReadReg>
 8001278:	4603      	mov	r3, r0
 800127a:	2b01      	cmp	r3, #1
 800127c:	d001      	beq.n	8001282 <Max30102_FifoAlmostFullValue+0x3c>
		return MAX30102_ERROR;
 800127e:	2300      	movs	r3, #0
 8001280:	e01a      	b.n	80012b8 <Max30102_FifoAlmostFullValue+0x72>
	tmp &= ~(0x0F);
 8001282:	7bfb      	ldrb	r3, [r7, #15]
 8001284:	f023 030f 	bic.w	r3, r3, #15
 8001288:	b2db      	uxtb	r3, r3
 800128a:	73fb      	strb	r3, [r7, #15]
	tmp |= (Value & 0x0F);
 800128c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001290:	f003 030f 	and.w	r3, r3, #15
 8001294:	b25a      	sxtb	r2, r3
 8001296:	7bfb      	ldrb	r3, [r7, #15]
 8001298:	b25b      	sxtb	r3, r3
 800129a:	4313      	orrs	r3, r2
 800129c:	b25b      	sxtb	r3, r3
 800129e:	b2db      	uxtb	r3, r3
 80012a0:	73fb      	strb	r3, [r7, #15]
	if(MAX30102_OK != Max30102_WriteReg(REG_FIFO_CONFIG, tmp))
 80012a2:	7bfb      	ldrb	r3, [r7, #15]
 80012a4:	4619      	mov	r1, r3
 80012a6:	2008      	movs	r0, #8
 80012a8:	f7ff fd62 	bl	8000d70 <Max30102_WriteReg>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b01      	cmp	r3, #1
 80012b0:	d001      	beq.n	80012b6 <Max30102_FifoAlmostFullValue+0x70>
		return MAX30102_ERROR;
 80012b2:	2300      	movs	r3, #0
 80012b4:	e000      	b.n	80012b8 <Max30102_FifoAlmostFullValue+0x72>

	return MAX30102_OK;
 80012b6:	2301      	movs	r3, #1
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	3710      	adds	r7, #16
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}

080012c0 <Max30102_Reset>:
{
	return Max30102_WriteRegisterBit(REG_MODE_CONFIG, MODE_SHDN_BIT, (Enable & 0x01));
}

MAX30102_STATUS Max30102_Reset(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
	uint8_t tmp = 0xFF;
 80012c6:	23ff      	movs	r3, #255	; 0xff
 80012c8:	71fb      	strb	r3, [r7, #7]
    if(MAX30102_OK != Max30102_WriteReg(REG_MODE_CONFIG,0x40))
 80012ca:	2140      	movs	r1, #64	; 0x40
 80012cc:	2009      	movs	r0, #9
 80012ce:	f7ff fd4f 	bl	8000d70 <Max30102_WriteReg>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b01      	cmp	r3, #1
 80012d6:	d001      	beq.n	80012dc <Max30102_Reset+0x1c>
        return MAX30102_ERROR;
 80012d8:	2300      	movs	r3, #0
 80012da:	e00f      	b.n	80012fc <Max30102_Reset+0x3c>
    do
    {
    	if(MAX30102_OK != Max30102_ReadReg(REG_MODE_CONFIG, &tmp))
 80012dc:	1dfb      	adds	r3, r7, #7
 80012de:	4619      	mov	r1, r3
 80012e0:	2009      	movs	r0, #9
 80012e2:	f7ff fd67 	bl	8000db4 <Max30102_ReadReg>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b01      	cmp	r3, #1
 80012ea:	d001      	beq.n	80012f0 <Max30102_Reset+0x30>
    		return MAX30102_ERROR;
 80012ec:	2300      	movs	r3, #0
 80012ee:	e005      	b.n	80012fc <Max30102_Reset+0x3c>
    } while(tmp & (1<<6));
 80012f0:	79fb      	ldrb	r3, [r7, #7]
 80012f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d1f0      	bne.n	80012dc <Max30102_Reset+0x1c>

    return MAX30102_OK;
 80012fa:	2301      	movs	r3, #1
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	3708      	adds	r7, #8
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}

08001304 <Max30102_SetMode>:

MAX30102_STATUS Max30102_SetMode(uint8_t Mode)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b084      	sub	sp, #16
 8001308:	af00      	add	r7, sp, #0
 800130a:	4603      	mov	r3, r0
 800130c:	71fb      	strb	r3, [r7, #7]
	uint8_t tmp;
	if(MAX30102_OK != Max30102_ReadReg(REG_MODE_CONFIG, &tmp))
 800130e:	f107 030f 	add.w	r3, r7, #15
 8001312:	4619      	mov	r1, r3
 8001314:	2009      	movs	r0, #9
 8001316:	f7ff fd4d 	bl	8000db4 <Max30102_ReadReg>
 800131a:	4603      	mov	r3, r0
 800131c:	2b01      	cmp	r3, #1
 800131e:	d001      	beq.n	8001324 <Max30102_SetMode+0x20>
		return MAX30102_ERROR;
 8001320:	2300      	movs	r3, #0
 8001322:	e01a      	b.n	800135a <Max30102_SetMode+0x56>
	tmp &= ~(0x07);
 8001324:	7bfb      	ldrb	r3, [r7, #15]
 8001326:	f023 0307 	bic.w	r3, r3, #7
 800132a:	b2db      	uxtb	r3, r3
 800132c:	73fb      	strb	r3, [r7, #15]
	tmp |= (Mode & 0x07);
 800132e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001332:	f003 0307 	and.w	r3, r3, #7
 8001336:	b25a      	sxtb	r2, r3
 8001338:	7bfb      	ldrb	r3, [r7, #15]
 800133a:	b25b      	sxtb	r3, r3
 800133c:	4313      	orrs	r3, r2
 800133e:	b25b      	sxtb	r3, r3
 8001340:	b2db      	uxtb	r3, r3
 8001342:	73fb      	strb	r3, [r7, #15]
	if(MAX30102_OK != Max30102_WriteReg(REG_MODE_CONFIG, tmp))
 8001344:	7bfb      	ldrb	r3, [r7, #15]
 8001346:	4619      	mov	r1, r3
 8001348:	2009      	movs	r0, #9
 800134a:	f7ff fd11 	bl	8000d70 <Max30102_WriteReg>
 800134e:	4603      	mov	r3, r0
 8001350:	2b01      	cmp	r3, #1
 8001352:	d001      	beq.n	8001358 <Max30102_SetMode+0x54>
		return MAX30102_ERROR;
 8001354:	2300      	movs	r3, #0
 8001356:	e000      	b.n	800135a <Max30102_SetMode+0x56>

	return MAX30102_OK;
 8001358:	2301      	movs	r3, #1
}
 800135a:	4618      	mov	r0, r3
 800135c:	3710      	adds	r7, #16
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}

08001362 <Max30102_SpO2AdcRange>:
//
//	SpO2 Configuration
//
MAX30102_STATUS Max30102_SpO2AdcRange(uint8_t Value)
{
 8001362:	b580      	push	{r7, lr}
 8001364:	b084      	sub	sp, #16
 8001366:	af00      	add	r7, sp, #0
 8001368:	4603      	mov	r3, r0
 800136a:	71fb      	strb	r3, [r7, #7]
	uint8_t tmp;
	if(MAX30102_OK != Max30102_ReadReg(REG_SPO2_CONFIG, &tmp))
 800136c:	f107 030f 	add.w	r3, r7, #15
 8001370:	4619      	mov	r1, r3
 8001372:	200a      	movs	r0, #10
 8001374:	f7ff fd1e 	bl	8000db4 <Max30102_ReadReg>
 8001378:	4603      	mov	r3, r0
 800137a:	2b01      	cmp	r3, #1
 800137c:	d001      	beq.n	8001382 <Max30102_SpO2AdcRange+0x20>
		return MAX30102_ERROR;
 800137e:	2300      	movs	r3, #0
 8001380:	e01b      	b.n	80013ba <Max30102_SpO2AdcRange+0x58>
	tmp &= ~(0x03);
 8001382:	7bfb      	ldrb	r3, [r7, #15]
 8001384:	f023 0303 	bic.w	r3, r3, #3
 8001388:	b2db      	uxtb	r3, r3
 800138a:	73fb      	strb	r3, [r7, #15]
	tmp |= ((Value & 0x03) << 5);
 800138c:	79fb      	ldrb	r3, [r7, #7]
 800138e:	015b      	lsls	r3, r3, #5
 8001390:	b25b      	sxtb	r3, r3
 8001392:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8001396:	b25a      	sxtb	r2, r3
 8001398:	7bfb      	ldrb	r3, [r7, #15]
 800139a:	b25b      	sxtb	r3, r3
 800139c:	4313      	orrs	r3, r2
 800139e:	b25b      	sxtb	r3, r3
 80013a0:	b2db      	uxtb	r3, r3
 80013a2:	73fb      	strb	r3, [r7, #15]
	if(MAX30102_OK != Max30102_WriteReg(REG_SPO2_CONFIG, tmp))
 80013a4:	7bfb      	ldrb	r3, [r7, #15]
 80013a6:	4619      	mov	r1, r3
 80013a8:	200a      	movs	r0, #10
 80013aa:	f7ff fce1 	bl	8000d70 <Max30102_WriteReg>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b01      	cmp	r3, #1
 80013b2:	d001      	beq.n	80013b8 <Max30102_SpO2AdcRange+0x56>
		return MAX30102_ERROR;
 80013b4:	2300      	movs	r3, #0
 80013b6:	e000      	b.n	80013ba <Max30102_SpO2AdcRange+0x58>

	return MAX30102_OK;
 80013b8:	2301      	movs	r3, #1
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	3710      	adds	r7, #16
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}

080013c2 <Max30102_SpO2SampleRate>:

MAX30102_STATUS Max30102_SpO2SampleRate(uint8_t Value)
{
 80013c2:	b580      	push	{r7, lr}
 80013c4:	b084      	sub	sp, #16
 80013c6:	af00      	add	r7, sp, #0
 80013c8:	4603      	mov	r3, r0
 80013ca:	71fb      	strb	r3, [r7, #7]
	uint8_t tmp;
	if(MAX30102_OK != Max30102_ReadReg(REG_SPO2_CONFIG, &tmp))
 80013cc:	f107 030f 	add.w	r3, r7, #15
 80013d0:	4619      	mov	r1, r3
 80013d2:	200a      	movs	r0, #10
 80013d4:	f7ff fcee 	bl	8000db4 <Max30102_ReadReg>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b01      	cmp	r3, #1
 80013dc:	d001      	beq.n	80013e2 <Max30102_SpO2SampleRate+0x20>
		return MAX30102_ERROR;
 80013de:	2300      	movs	r3, #0
 80013e0:	e01b      	b.n	800141a <Max30102_SpO2SampleRate+0x58>
	tmp &= ~(0x07);
 80013e2:	7bfb      	ldrb	r3, [r7, #15]
 80013e4:	f023 0307 	bic.w	r3, r3, #7
 80013e8:	b2db      	uxtb	r3, r3
 80013ea:	73fb      	strb	r3, [r7, #15]
	tmp |= ((Value & 0x07) << 2);
 80013ec:	79fb      	ldrb	r3, [r7, #7]
 80013ee:	009b      	lsls	r3, r3, #2
 80013f0:	b25b      	sxtb	r3, r3
 80013f2:	f003 031c 	and.w	r3, r3, #28
 80013f6:	b25a      	sxtb	r2, r3
 80013f8:	7bfb      	ldrb	r3, [r7, #15]
 80013fa:	b25b      	sxtb	r3, r3
 80013fc:	4313      	orrs	r3, r2
 80013fe:	b25b      	sxtb	r3, r3
 8001400:	b2db      	uxtb	r3, r3
 8001402:	73fb      	strb	r3, [r7, #15]
	if(MAX30102_OK != Max30102_WriteReg(REG_SPO2_CONFIG, tmp))
 8001404:	7bfb      	ldrb	r3, [r7, #15]
 8001406:	4619      	mov	r1, r3
 8001408:	200a      	movs	r0, #10
 800140a:	f7ff fcb1 	bl	8000d70 <Max30102_WriteReg>
 800140e:	4603      	mov	r3, r0
 8001410:	2b01      	cmp	r3, #1
 8001412:	d001      	beq.n	8001418 <Max30102_SpO2SampleRate+0x56>
		return MAX30102_ERROR;
 8001414:	2300      	movs	r3, #0
 8001416:	e000      	b.n	800141a <Max30102_SpO2SampleRate+0x58>

	return MAX30102_OK;
 8001418:	2301      	movs	r3, #1
}
 800141a:	4618      	mov	r0, r3
 800141c:	3710      	adds	r7, #16
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}

08001422 <Max30102_SpO2LedPulseWidth>:

MAX30102_STATUS Max30102_SpO2LedPulseWidth(uint8_t Value)
{
 8001422:	b580      	push	{r7, lr}
 8001424:	b084      	sub	sp, #16
 8001426:	af00      	add	r7, sp, #0
 8001428:	4603      	mov	r3, r0
 800142a:	71fb      	strb	r3, [r7, #7]
	uint8_t tmp;
	if(MAX30102_OK != Max30102_ReadReg(REG_SPO2_CONFIG, &tmp))
 800142c:	f107 030f 	add.w	r3, r7, #15
 8001430:	4619      	mov	r1, r3
 8001432:	200a      	movs	r0, #10
 8001434:	f7ff fcbe 	bl	8000db4 <Max30102_ReadReg>
 8001438:	4603      	mov	r3, r0
 800143a:	2b01      	cmp	r3, #1
 800143c:	d001      	beq.n	8001442 <Max30102_SpO2LedPulseWidth+0x20>
		return MAX30102_ERROR;
 800143e:	2300      	movs	r3, #0
 8001440:	e01a      	b.n	8001478 <Max30102_SpO2LedPulseWidth+0x56>
	tmp &= ~(0x03);
 8001442:	7bfb      	ldrb	r3, [r7, #15]
 8001444:	f023 0303 	bic.w	r3, r3, #3
 8001448:	b2db      	uxtb	r3, r3
 800144a:	73fb      	strb	r3, [r7, #15]
	tmp |= (Value & 0x03);
 800144c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001450:	f003 0303 	and.w	r3, r3, #3
 8001454:	b25a      	sxtb	r2, r3
 8001456:	7bfb      	ldrb	r3, [r7, #15]
 8001458:	b25b      	sxtb	r3, r3
 800145a:	4313      	orrs	r3, r2
 800145c:	b25b      	sxtb	r3, r3
 800145e:	b2db      	uxtb	r3, r3
 8001460:	73fb      	strb	r3, [r7, #15]
	if(MAX30102_OK != Max30102_WriteReg(REG_SPO2_CONFIG, tmp))
 8001462:	7bfb      	ldrb	r3, [r7, #15]
 8001464:	4619      	mov	r1, r3
 8001466:	200a      	movs	r0, #10
 8001468:	f7ff fc82 	bl	8000d70 <Max30102_WriteReg>
 800146c:	4603      	mov	r3, r0
 800146e:	2b01      	cmp	r3, #1
 8001470:	d001      	beq.n	8001476 <Max30102_SpO2LedPulseWidth+0x54>
		return MAX30102_ERROR;
 8001472:	2300      	movs	r3, #0
 8001474:	e000      	b.n	8001478 <Max30102_SpO2LedPulseWidth+0x56>

	return MAX30102_OK;
 8001476:	2301      	movs	r3, #1
}
 8001478:	4618      	mov	r0, r3
 800147a:	3710      	adds	r7, #16
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}

08001480 <Max30102_Led1PulseAmplitude>:
//
//	LEDs Pulse Amplitute Configuration
//	LED Current = Value * 0.2 mA
//
MAX30102_STATUS Max30102_Led1PulseAmplitude(uint8_t Value)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	4603      	mov	r3, r0
 8001488:	71fb      	strb	r3, [r7, #7]
	if(MAX30102_OK != Max30102_WriteReg(REG_LED1_PA, Value))
 800148a:	79fb      	ldrb	r3, [r7, #7]
 800148c:	4619      	mov	r1, r3
 800148e:	200c      	movs	r0, #12
 8001490:	f7ff fc6e 	bl	8000d70 <Max30102_WriteReg>
 8001494:	4603      	mov	r3, r0
 8001496:	2b01      	cmp	r3, #1
 8001498:	d001      	beq.n	800149e <Max30102_Led1PulseAmplitude+0x1e>
		return MAX30102_ERROR;
 800149a:	2300      	movs	r3, #0
 800149c:	e000      	b.n	80014a0 <Max30102_Led1PulseAmplitude+0x20>
	return MAX30102_OK;
 800149e:	2301      	movs	r3, #1
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	3708      	adds	r7, #8
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}

080014a8 <Max30102_Led2PulseAmplitude>:

MAX30102_STATUS Max30102_Led2PulseAmplitude(uint8_t Value)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	4603      	mov	r3, r0
 80014b0:	71fb      	strb	r3, [r7, #7]
	if(MAX30102_OK != Max30102_WriteReg(REG_LED2_PA, Value))
 80014b2:	79fb      	ldrb	r3, [r7, #7]
 80014b4:	4619      	mov	r1, r3
 80014b6:	200d      	movs	r0, #13
 80014b8:	f7ff fc5a 	bl	8000d70 <Max30102_WriteReg>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b01      	cmp	r3, #1
 80014c0:	d001      	beq.n	80014c6 <Max30102_Led2PulseAmplitude+0x1e>
		return MAX30102_ERROR;
 80014c2:	2300      	movs	r3, #0
 80014c4:	e000      	b.n	80014c8 <Max30102_Led2PulseAmplitude+0x20>
	return MAX30102_OK;
 80014c6:	2301      	movs	r3, #1
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	3708      	adds	r7, #8
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}

080014d0 <Max30102_GetSpO2Value>:
{
	return HeartRate;
}

int32_t Max30102_GetSpO2Value(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
	return Sp02Value;
 80014d4:	4b03      	ldr	r3, [pc, #12]	; (80014e4 <Max30102_GetSpO2Value+0x14>)
 80014d6:	681b      	ldr	r3, [r3, #0]
}
 80014d8:	4618      	mov	r0, r3
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop
 80014e4:	20001374 	.word	0x20001374

080014e8 <Max30102_Task>:

void Max30102_Task(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b084      	sub	sp, #16
 80014ec:	af04      	add	r7, sp, #16
	switch(StateMachine)
 80014ee:	4b4d      	ldr	r3, [pc, #308]	; (8001624 <Max30102_Task+0x13c>)
 80014f0:	781b      	ldrb	r3, [r3, #0]
 80014f2:	2b03      	cmp	r3, #3
 80014f4:	f200 8092 	bhi.w	800161c <Max30102_Task+0x134>
 80014f8:	a201      	add	r2, pc, #4	; (adr r2, 8001500 <Max30102_Task+0x18>)
 80014fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014fe:	bf00      	nop
 8001500:	08001511 	.word	0x08001511
 8001504:	08001549 	.word	0x08001549
 8001508:	08001579 	.word	0x08001579
 800150c:	080015e5 	.word	0x080015e5
	{
		case MAX30102_STATE_BEGIN:
			HeartRate = 0;
 8001510:	4b45      	ldr	r3, [pc, #276]	; (8001628 <Max30102_Task+0x140>)
 8001512:	2200      	movs	r2, #0
 8001514:	601a      	str	r2, [r3, #0]
			Sp02Value = 0;
 8001516:	4b45      	ldr	r3, [pc, #276]	; (800162c <Max30102_Task+0x144>)
 8001518:	2200      	movs	r2, #0
 800151a:	601a      	str	r2, [r3, #0]
			if(IsFingerOnScreen)
 800151c:	4b44      	ldr	r3, [pc, #272]	; (8001630 <Max30102_Task+0x148>)
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	b2db      	uxtb	r3, r3
 8001522:	2b00      	cmp	r3, #0
 8001524:	d075      	beq.n	8001612 <Max30102_Task+0x12a>
			{
				CollectedSamples = 0;
 8001526:	4b43      	ldr	r3, [pc, #268]	; (8001634 <Max30102_Task+0x14c>)
 8001528:	2200      	movs	r2, #0
 800152a:	601a      	str	r2, [r3, #0]
				BufferTail = BufferHead;
 800152c:	4b42      	ldr	r3, [pc, #264]	; (8001638 <Max30102_Task+0x150>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a42      	ldr	r2, [pc, #264]	; (800163c <Max30102_Task+0x154>)
 8001532:	6013      	str	r3, [r2, #0]
				Max30102_Led1PulseAmplitude(MAX30102_RED_LED_CURRENT_HIGH);
 8001534:	2024      	movs	r0, #36	; 0x24
 8001536:	f7ff ffa3 	bl	8001480 <Max30102_Led1PulseAmplitude>
				Max30102_Led2PulseAmplitude(MAX30102_IR_LED_CURRENT_HIGH);
 800153a:	2024      	movs	r0, #36	; 0x24
 800153c:	f7ff ffb4 	bl	80014a8 <Max30102_Led2PulseAmplitude>
				StateMachine = MAX30102_STATE_CALIBRATE;
 8001540:	4b38      	ldr	r3, [pc, #224]	; (8001624 <Max30102_Task+0x13c>)
 8001542:	2201      	movs	r2, #1
 8001544:	701a      	strb	r2, [r3, #0]
			}
			break;
 8001546:	e064      	b.n	8001612 <Max30102_Task+0x12a>

		case MAX30102_STATE_CALIBRATE:
				if(IsFingerOnScreen)
 8001548:	4b39      	ldr	r3, [pc, #228]	; (8001630 <Max30102_Task+0x148>)
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	b2db      	uxtb	r3, r3
 800154e:	2b00      	cmp	r3, #0
 8001550:	d008      	beq.n	8001564 <Max30102_Task+0x7c>
				{
					if(CollectedSamples > (MAX30102_BUFFER_LENGTH-MAX30102_SAMPLES_PER_SECOND))
 8001552:	4b38      	ldr	r3, [pc, #224]	; (8001634 <Max30102_Task+0x14c>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800155a:	d95c      	bls.n	8001616 <Max30102_Task+0x12e>
					{
						StateMachine = MAX30102_STATE_CALCULATE_HR;
 800155c:	4b31      	ldr	r3, [pc, #196]	; (8001624 <Max30102_Task+0x13c>)
 800155e:	2202      	movs	r2, #2
 8001560:	701a      	strb	r2, [r3, #0]
				{
					Max30102_Led1PulseAmplitude(MAX30102_RED_LED_CURRENT_LOW);
					Max30102_Led2PulseAmplitude(MAX30102_IR_LED_CURRENT_LOW);
					StateMachine = MAX30102_STATE_BEGIN;
				}
			break;
 8001562:	e058      	b.n	8001616 <Max30102_Task+0x12e>
					Max30102_Led1PulseAmplitude(MAX30102_RED_LED_CURRENT_LOW);
 8001564:	2000      	movs	r0, #0
 8001566:	f7ff ff8b 	bl	8001480 <Max30102_Led1PulseAmplitude>
					Max30102_Led2PulseAmplitude(MAX30102_IR_LED_CURRENT_LOW);
 800156a:	2001      	movs	r0, #1
 800156c:	f7ff ff9c 	bl	80014a8 <Max30102_Led2PulseAmplitude>
					StateMachine = MAX30102_STATE_BEGIN;
 8001570:	4b2c      	ldr	r3, [pc, #176]	; (8001624 <Max30102_Task+0x13c>)
 8001572:	2200      	movs	r2, #0
 8001574:	701a      	strb	r2, [r3, #0]
			break;
 8001576:	e04e      	b.n	8001616 <Max30102_Task+0x12e>

		case MAX30102_STATE_CALCULATE_HR:
			if(IsFingerOnScreen)
 8001578:	4b2d      	ldr	r3, [pc, #180]	; (8001630 <Max30102_Task+0x148>)
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	b2db      	uxtb	r3, r3
 800157e:	2b00      	cmp	r3, #0
 8001580:	d026      	beq.n	80015d0 <Max30102_Task+0xe8>
			{
				maxim_heart_rate_and_oxygen_saturation(IrBuffer, RedBuffer, MAX30102_BUFFER_LENGTH-MAX30102_SAMPLES_PER_SECOND, BufferTail, &Sp02Value, &Sp02IsValid, &HeartRate, &IsHrValid);
 8001582:	4b2e      	ldr	r3, [pc, #184]	; (800163c <Max30102_Task+0x154>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	b29b      	uxth	r3, r3
 8001588:	4a2d      	ldr	r2, [pc, #180]	; (8001640 <Max30102_Task+0x158>)
 800158a:	9203      	str	r2, [sp, #12]
 800158c:	4a26      	ldr	r2, [pc, #152]	; (8001628 <Max30102_Task+0x140>)
 800158e:	9202      	str	r2, [sp, #8]
 8001590:	4a2c      	ldr	r2, [pc, #176]	; (8001644 <Max30102_Task+0x15c>)
 8001592:	9201      	str	r2, [sp, #4]
 8001594:	4a25      	ldr	r2, [pc, #148]	; (800162c <Max30102_Task+0x144>)
 8001596:	9200      	str	r2, [sp, #0]
 8001598:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800159c:	492a      	ldr	r1, [pc, #168]	; (8001648 <Max30102_Task+0x160>)
 800159e:	482b      	ldr	r0, [pc, #172]	; (800164c <Max30102_Task+0x164>)
 80015a0:	f000 f8ee 	bl	8001780 <maxim_heart_rate_and_oxygen_saturation>
				BufferTail = (BufferTail + MAX30102_SAMPLES_PER_SECOND) % MAX30102_BUFFER_LENGTH;
 80015a4:	4b25      	ldr	r3, [pc, #148]	; (800163c <Max30102_Task+0x154>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f103 0264 	add.w	r2, r3, #100	; 0x64
 80015ac:	4b28      	ldr	r3, [pc, #160]	; (8001650 <Max30102_Task+0x168>)
 80015ae:	fba3 1302 	umull	r1, r3, r3, r2
 80015b2:	099b      	lsrs	r3, r3, #6
 80015b4:	f44f 7116 	mov.w	r1, #600	; 0x258
 80015b8:	fb01 f303 	mul.w	r3, r1, r3
 80015bc:	1ad3      	subs	r3, r2, r3
 80015be:	4a1f      	ldr	r2, [pc, #124]	; (800163c <Max30102_Task+0x154>)
 80015c0:	6013      	str	r3, [r2, #0]
				CollectedSamples = 0;
 80015c2:	4b1c      	ldr	r3, [pc, #112]	; (8001634 <Max30102_Task+0x14c>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	601a      	str	r2, [r3, #0]
				StateMachine = MAX30102_STATE_COLLECT_NEXT_PORTION;
 80015c8:	4b16      	ldr	r3, [pc, #88]	; (8001624 <Max30102_Task+0x13c>)
 80015ca:	2203      	movs	r2, #3
 80015cc:	701a      	strb	r2, [r3, #0]
			{
				Max30102_Led1PulseAmplitude(MAX30102_RED_LED_CURRENT_LOW);
				Max30102_Led2PulseAmplitude(MAX30102_IR_LED_CURRENT_LOW);
				StateMachine = MAX30102_STATE_BEGIN;
			}
			break;
 80015ce:	e025      	b.n	800161c <Max30102_Task+0x134>
				Max30102_Led1PulseAmplitude(MAX30102_RED_LED_CURRENT_LOW);
 80015d0:	2000      	movs	r0, #0
 80015d2:	f7ff ff55 	bl	8001480 <Max30102_Led1PulseAmplitude>
				Max30102_Led2PulseAmplitude(MAX30102_IR_LED_CURRENT_LOW);
 80015d6:	2001      	movs	r0, #1
 80015d8:	f7ff ff66 	bl	80014a8 <Max30102_Led2PulseAmplitude>
				StateMachine = MAX30102_STATE_BEGIN;
 80015dc:	4b11      	ldr	r3, [pc, #68]	; (8001624 <Max30102_Task+0x13c>)
 80015de:	2200      	movs	r2, #0
 80015e0:	701a      	strb	r2, [r3, #0]
			break;
 80015e2:	e01b      	b.n	800161c <Max30102_Task+0x134>

		case MAX30102_STATE_COLLECT_NEXT_PORTION:
			if(IsFingerOnScreen)
 80015e4:	4b12      	ldr	r3, [pc, #72]	; (8001630 <Max30102_Task+0x148>)
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	b2db      	uxtb	r3, r3
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d007      	beq.n	80015fe <Max30102_Task+0x116>
			{
				if(CollectedSamples > MAX30102_SAMPLES_PER_SECOND)
 80015ee:	4b11      	ldr	r3, [pc, #68]	; (8001634 <Max30102_Task+0x14c>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	2b64      	cmp	r3, #100	; 0x64
 80015f4:	d911      	bls.n	800161a <Max30102_Task+0x132>
				{
					StateMachine = MAX30102_STATE_CALCULATE_HR;
 80015f6:	4b0b      	ldr	r3, [pc, #44]	; (8001624 <Max30102_Task+0x13c>)
 80015f8:	2202      	movs	r2, #2
 80015fa:	701a      	strb	r2, [r3, #0]
			{
				Max30102_Led1PulseAmplitude(MAX30102_RED_LED_CURRENT_LOW);
				Max30102_Led2PulseAmplitude(MAX30102_IR_LED_CURRENT_LOW);
				StateMachine = MAX30102_STATE_BEGIN;
			}
			break;
 80015fc:	e00d      	b.n	800161a <Max30102_Task+0x132>
				Max30102_Led1PulseAmplitude(MAX30102_RED_LED_CURRENT_LOW);
 80015fe:	2000      	movs	r0, #0
 8001600:	f7ff ff3e 	bl	8001480 <Max30102_Led1PulseAmplitude>
				Max30102_Led2PulseAmplitude(MAX30102_IR_LED_CURRENT_LOW);
 8001604:	2001      	movs	r0, #1
 8001606:	f7ff ff4f 	bl	80014a8 <Max30102_Led2PulseAmplitude>
				StateMachine = MAX30102_STATE_BEGIN;
 800160a:	4b06      	ldr	r3, [pc, #24]	; (8001624 <Max30102_Task+0x13c>)
 800160c:	2200      	movs	r2, #0
 800160e:	701a      	strb	r2, [r3, #0]
			break;
 8001610:	e003      	b.n	800161a <Max30102_Task+0x132>
			break;
 8001612:	bf00      	nop
 8001614:	e002      	b.n	800161c <Max30102_Task+0x134>
			break;
 8001616:	bf00      	nop
 8001618:	e000      	b.n	800161c <Max30102_Task+0x134>
			break;
 800161a:	bf00      	nop
	}
}
 800161c:	bf00      	nop
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	20001381 	.word	0x20001381
 8001628:	2000137c 	.word	0x2000137c
 800162c:	20001374 	.word	0x20001374
 8001630:	20001370 	.word	0x20001370
 8001634:	2000136c 	.word	0x2000136c
 8001638:	20001364 	.word	0x20001364
 800163c:	20001368 	.word	0x20001368
 8001640:	20001380 	.word	0x20001380
 8001644:	20001378 	.word	0x20001378
 8001648:	20000a04 	.word	0x20000a04
 800164c:	200000a4 	.word	0x200000a4
 8001650:	1b4e81b5 	.word	0x1b4e81b5

08001654 <Max30102_Init>:

//
//	Initialization
//
MAX30102_STATUS Max30102_Init(I2C_HandleTypeDef *i2c)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b084      	sub	sp, #16
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
	uint8_t uch_dummy;
	i2c_max30102 = i2c;
 800165c:	4a46      	ldr	r2, [pc, #280]	; (8001778 <Max30102_Init+0x124>)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6013      	str	r3, [r2, #0]
	if(MAX30102_OK != Max30102_Reset()) //resets the MAX30102
 8001662:	f7ff fe2d 	bl	80012c0 <Max30102_Reset>
 8001666:	4603      	mov	r3, r0
 8001668:	2b01      	cmp	r3, #1
 800166a:	d001      	beq.n	8001670 <Max30102_Init+0x1c>
		return MAX30102_ERROR;
 800166c:	2300      	movs	r3, #0
 800166e:	e07e      	b.n	800176e <Max30102_Init+0x11a>
	if(MAX30102_OK != Max30102_ReadReg(0,&uch_dummy))
 8001670:	f107 030f 	add.w	r3, r7, #15
 8001674:	4619      	mov	r1, r3
 8001676:	2000      	movs	r0, #0
 8001678:	f7ff fb9c 	bl	8000db4 <Max30102_ReadReg>
 800167c:	4603      	mov	r3, r0
 800167e:	2b01      	cmp	r3, #1
 8001680:	d001      	beq.n	8001686 <Max30102_Init+0x32>
		return MAX30102_ERROR;
 8001682:	2300      	movs	r3, #0
 8001684:	e073      	b.n	800176e <Max30102_Init+0x11a>
	if(MAX30102_OK != Max30102_FifoWritePointer(0x00))
 8001686:	2000      	movs	r0, #0
 8001688:	f7ff fd58 	bl	800113c <Max30102_FifoWritePointer>
 800168c:	4603      	mov	r3, r0
 800168e:	2b01      	cmp	r3, #1
 8001690:	d001      	beq.n	8001696 <Max30102_Init+0x42>
		return MAX30102_ERROR;
 8001692:	2300      	movs	r3, #0
 8001694:	e06b      	b.n	800176e <Max30102_Init+0x11a>
	if(MAX30102_OK != Max30102_FifoOverflowCounter(0x00))
 8001696:	2000      	movs	r0, #0
 8001698:	f7ff fd67 	bl	800116a <Max30102_FifoOverflowCounter>
 800169c:	4603      	mov	r3, r0
 800169e:	2b01      	cmp	r3, #1
 80016a0:	d001      	beq.n	80016a6 <Max30102_Init+0x52>
		return MAX30102_ERROR;
 80016a2:	2300      	movs	r3, #0
 80016a4:	e063      	b.n	800176e <Max30102_Init+0x11a>
	if(MAX30102_OK != Max30102_FifoReadPointer(0x00))
 80016a6:	2000      	movs	r0, #0
 80016a8:	f7ff fd76 	bl	8001198 <Max30102_FifoReadPointer>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b01      	cmp	r3, #1
 80016b0:	d001      	beq.n	80016b6 <Max30102_Init+0x62>
		return MAX30102_ERROR;
 80016b2:	2300      	movs	r3, #0
 80016b4:	e05b      	b.n	800176e <Max30102_Init+0x11a>
	if(MAX30102_OK != Max30102_FifoSampleAveraging(FIFO_SMP_AVE_1))
 80016b6:	2000      	movs	r0, #0
 80016b8:	f7ff fd85 	bl	80011c6 <Max30102_FifoSampleAveraging>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b01      	cmp	r3, #1
 80016c0:	d001      	beq.n	80016c6 <Max30102_Init+0x72>
		return MAX30102_ERROR;
 80016c2:	2300      	movs	r3, #0
 80016c4:	e053      	b.n	800176e <Max30102_Init+0x11a>
	if(MAX30102_OK != Max30102_FifoRolloverEnable(0))
 80016c6:	2000      	movs	r0, #0
 80016c8:	f7ff fdaa 	bl	8001220 <Max30102_FifoRolloverEnable>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b01      	cmp	r3, #1
 80016d0:	d001      	beq.n	80016d6 <Max30102_Init+0x82>
		return MAX30102_ERROR;
 80016d2:	2300      	movs	r3, #0
 80016d4:	e04b      	b.n	800176e <Max30102_Init+0x11a>
	if(MAX30102_OK != Max30102_FifoAlmostFullValue(MAX30102_FIFO_ALMOST_FULL_SAMPLES))
 80016d6:	2011      	movs	r0, #17
 80016d8:	f7ff fdb5 	bl	8001246 <Max30102_FifoAlmostFullValue>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b01      	cmp	r3, #1
 80016e0:	d001      	beq.n	80016e6 <Max30102_Init+0x92>
		return MAX30102_ERROR;
 80016e2:	2300      	movs	r3, #0
 80016e4:	e043      	b.n	800176e <Max30102_Init+0x11a>
	if(MAX30102_OK != Max30102_SetMode(MODE_SPO2_MODE))
 80016e6:	2003      	movs	r0, #3
 80016e8:	f7ff fe0c 	bl	8001304 <Max30102_SetMode>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b01      	cmp	r3, #1
 80016f0:	d001      	beq.n	80016f6 <Max30102_Init+0xa2>
		return MAX30102_ERROR;
 80016f2:	2300      	movs	r3, #0
 80016f4:	e03b      	b.n	800176e <Max30102_Init+0x11a>
	if(MAX30102_OK != Max30102_SpO2AdcRange(SPO2_ADC_RGE_4096))
 80016f6:	2001      	movs	r0, #1
 80016f8:	f7ff fe33 	bl	8001362 <Max30102_SpO2AdcRange>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b01      	cmp	r3, #1
 8001700:	d001      	beq.n	8001706 <Max30102_Init+0xb2>
		return MAX30102_ERROR;
 8001702:	2300      	movs	r3, #0
 8001704:	e033      	b.n	800176e <Max30102_Init+0x11a>
	if(MAX30102_OK != Max30102_SpO2SampleRate(SPO2_SAMPLE_RATE))
 8001706:	2001      	movs	r0, #1
 8001708:	f7ff fe5b 	bl	80013c2 <Max30102_SpO2SampleRate>
 800170c:	4603      	mov	r3, r0
 800170e:	2b01      	cmp	r3, #1
 8001710:	d001      	beq.n	8001716 <Max30102_Init+0xc2>
		return MAX30102_ERROR;
 8001712:	2300      	movs	r3, #0
 8001714:	e02b      	b.n	800176e <Max30102_Init+0x11a>
	if(MAX30102_OK != Max30102_SpO2LedPulseWidth(SPO2_PULSE_WIDTH_411))
 8001716:	2003      	movs	r0, #3
 8001718:	f7ff fe83 	bl	8001422 <Max30102_SpO2LedPulseWidth>
 800171c:	4603      	mov	r3, r0
 800171e:	2b01      	cmp	r3, #1
 8001720:	d001      	beq.n	8001726 <Max30102_Init+0xd2>
		return MAX30102_ERROR;
 8001722:	2300      	movs	r3, #0
 8001724:	e023      	b.n	800176e <Max30102_Init+0x11a>
	if(MAX30102_OK != Max30102_Led1PulseAmplitude(MAX30102_RED_LED_CURRENT_LOW))
 8001726:	2000      	movs	r0, #0
 8001728:	f7ff feaa 	bl	8001480 <Max30102_Led1PulseAmplitude>
 800172c:	4603      	mov	r3, r0
 800172e:	2b01      	cmp	r3, #1
 8001730:	d001      	beq.n	8001736 <Max30102_Init+0xe2>
		return MAX30102_ERROR;
 8001732:	2300      	movs	r3, #0
 8001734:	e01b      	b.n	800176e <Max30102_Init+0x11a>
	if(MAX30102_OK != Max30102_Led2PulseAmplitude(MAX30102_IR_LED_CURRENT_LOW))
 8001736:	2001      	movs	r0, #1
 8001738:	f7ff feb6 	bl	80014a8 <Max30102_Led2PulseAmplitude>
 800173c:	4603      	mov	r3, r0
 800173e:	2b01      	cmp	r3, #1
 8001740:	d001      	beq.n	8001746 <Max30102_Init+0xf2>
		return MAX30102_ERROR;
 8001742:	2300      	movs	r3, #0
 8001744:	e013      	b.n	800176e <Max30102_Init+0x11a>
	if(MAX30102_OK != Max30102_SetIntAlmostFullEnabled(1))
 8001746:	2001      	movs	r0, #1
 8001748:	f7ff fc02 	bl	8000f50 <Max30102_SetIntAlmostFullEnabled>
 800174c:	4603      	mov	r3, r0
 800174e:	2b01      	cmp	r3, #1
 8001750:	d001      	beq.n	8001756 <Max30102_Init+0x102>
		return MAX30102_ERROR;
 8001752:	2300      	movs	r3, #0
 8001754:	e00b      	b.n	800176e <Max30102_Init+0x11a>
	if(MAX30102_OK != Max30102_SetIntFifoDataReadyEnabled(1))
 8001756:	2001      	movs	r0, #1
 8001758:	f7ff fc0a 	bl	8000f70 <Max30102_SetIntFifoDataReadyEnabled>
 800175c:	4603      	mov	r3, r0
 800175e:	2b01      	cmp	r3, #1
 8001760:	d001      	beq.n	8001766 <Max30102_Init+0x112>
		return MAX30102_ERROR;
 8001762:	2300      	movs	r3, #0
 8001764:	e003      	b.n	800176e <Max30102_Init+0x11a>
//	if(MAX30102_OK != Max30102_WriteReg(REG_PILOT_PA,0x7f))   // Choose value for ~ 25mA for Pilot LED
//		return MAX30102_ERROR;
	StateMachine = MAX30102_STATE_BEGIN;
 8001766:	4b05      	ldr	r3, [pc, #20]	; (800177c <Max30102_Init+0x128>)
 8001768:	2200      	movs	r2, #0
 800176a:	701a      	strb	r2, [r3, #0]
	return MAX30102_OK;
 800176c:	2301      	movs	r3, #1
}
 800176e:	4618      	mov	r0, r3
 8001770:	3710      	adds	r7, #16
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	200000a0 	.word	0x200000a0
 800177c:	20001381 	.word	0x20001381

08001780 <maxim_heart_rate_and_oxygen_saturation>:
* \param[out]    *pn_heart_rate          - Calculated heart rate value
* \param[out]    *pch_hr_valid           - 1 if the calculated heart rate value is valid
*
* \retval       None
*/
{
 8001780:	b590      	push	{r4, r7, lr}
 8001782:	b0d3      	sub	sp, #332	; 0x14c
 8001784:	af04      	add	r7, sp, #16
 8001786:	f507 749c 	add.w	r4, r7, #312	; 0x138
 800178a:	f5a4 7496 	sub.w	r4, r4, #300	; 0x12c
 800178e:	6020      	str	r0, [r4, #0]
 8001790:	f507 709c 	add.w	r0, r7, #312	; 0x138
 8001794:	f5a0 7098 	sub.w	r0, r0, #304	; 0x130
 8001798:	6001      	str	r1, [r0, #0]
 800179a:	f507 719c 	add.w	r1, r7, #312	; 0x138
 800179e:	f5a1 719a 	sub.w	r1, r1, #308	; 0x134
 80017a2:	600a      	str	r2, [r1, #0]
 80017a4:	461a      	mov	r2, r3
 80017a6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80017aa:	f5a3 739b 	sub.w	r3, r3, #310	; 0x136
 80017ae:	801a      	strh	r2, [r3, #0]
    int32_t n_spo2_calc;
    int32_t n_y_dc_max, n_x_dc_max;
    int32_t n_y_dc_max_idx, n_x_dc_max_idx;
    int32_t an_ratio[5],n_ratio_average;
    int32_t n_nume,  n_denom ;
    uint32_t un_offset_tmp = un_offset;
 80017b0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80017b4:	f5a3 739b 	sub.w	r3, r3, #310	; 0x136
 80017b8:	881b      	ldrh	r3, [r3, #0]
 80017ba:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    // remove DC of ir signal
    un_ir_mean =0;
 80017be:	2300      	movs	r3, #0
 80017c0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    for (k=0 ; k<n_buffer_length ; k++ )
 80017c4:	2300      	movs	r3, #0
 80017c6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80017ca:	e021      	b.n	8001810 <maxim_heart_rate_and_oxygen_saturation+0x90>
	{
    	un_ir_mean += pun_ir_buffer[un_offset_tmp];
 80017cc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80017d0:	009b      	lsls	r3, r3, #2
 80017d2:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80017d6:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80017da:	6812      	ldr	r2, [r2, #0]
 80017dc:	4413      	add	r3, r2
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 80017e4:	4413      	add	r3, r2
 80017e6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    	un_offset_tmp = (un_offset_tmp + 1) % MAX30102_BUFFER_LENGTH;
 80017ea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80017ee:	3301      	adds	r3, #1
 80017f0:	4ad4      	ldr	r2, [pc, #848]	; (8001b44 <maxim_heart_rate_and_oxygen_saturation+0x3c4>)
 80017f2:	fba2 1203 	umull	r1, r2, r2, r3
 80017f6:	0992      	lsrs	r2, r2, #6
 80017f8:	f44f 7116 	mov.w	r1, #600	; 0x258
 80017fc:	fb01 f202 	mul.w	r2, r1, r2
 8001800:	1a9b      	subs	r3, r3, r2
 8001802:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    for (k=0 ; k<n_buffer_length ; k++ )
 8001806:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800180a:	3301      	adds	r3, #1
 800180c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001810:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001814:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001818:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	429a      	cmp	r2, r3
 8001820:	dbd4      	blt.n	80017cc <maxim_heart_rate_and_oxygen_saturation+0x4c>
	}

    un_ir_mean =un_ir_mean/n_buffer_length ;
 8001822:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001826:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8001830:	fbb2 f3f3 	udiv	r3, r2, r3
 8001834:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    un_offset_tmp = un_offset;
 8001838:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800183c:	f5a3 739b 	sub.w	r3, r3, #310	; 0x136
 8001840:	881b      	ldrh	r3, [r3, #0]
 8001842:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    for (k=0 ; k<n_buffer_length ; k++ )
 8001846:	2300      	movs	r3, #0
 8001848:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800184c:	e025      	b.n	800189a <maxim_heart_rate_and_oxygen_saturation+0x11a>
	{
    	an_x[k] =  pun_ir_buffer[un_offset_tmp] - un_ir_mean;
 800184e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001852:	009b      	lsls	r3, r3, #2
 8001854:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8001858:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800185c:	6812      	ldr	r2, [r2, #0]
 800185e:	4413      	add	r3, r2
 8001860:	681a      	ldr	r2, [r3, #0]
 8001862:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001866:	1ad3      	subs	r3, r2, r3
 8001868:	4619      	mov	r1, r3
 800186a:	4ab7      	ldr	r2, [pc, #732]	; (8001b48 <maxim_heart_rate_and_oxygen_saturation+0x3c8>)
 800186c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001870:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    	un_offset_tmp = (un_offset_tmp + 1) % MAX30102_BUFFER_LENGTH;
 8001874:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001878:	3301      	adds	r3, #1
 800187a:	4ab2      	ldr	r2, [pc, #712]	; (8001b44 <maxim_heart_rate_and_oxygen_saturation+0x3c4>)
 800187c:	fba2 1203 	umull	r1, r2, r2, r3
 8001880:	0992      	lsrs	r2, r2, #6
 8001882:	f44f 7116 	mov.w	r1, #600	; 0x258
 8001886:	fb01 f202 	mul.w	r2, r1, r2
 800188a:	1a9b      	subs	r3, r3, r2
 800188c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    for (k=0 ; k<n_buffer_length ; k++ )
 8001890:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001894:	3301      	adds	r3, #1
 8001896:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800189a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800189e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80018a2:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	429a      	cmp	r2, r3
 80018aa:	dbd0      	blt.n	800184e <maxim_heart_rate_and_oxygen_saturation+0xce>
	}

    // 4 pt Moving Average
    for(k=0; k< BUFFER_SIZE-MA4_SIZE; k++)
 80018ac:	2300      	movs	r3, #0
 80018ae:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80018b2:	e02c      	b.n	800190e <maxim_heart_rate_and_oxygen_saturation+0x18e>
    {
        n_denom= ( an_x[k]+an_x[k+1]+ an_x[k+2]+ an_x[k+3]);
 80018b4:	4aa4      	ldr	r2, [pc, #656]	; (8001b48 <maxim_heart_rate_and_oxygen_saturation+0x3c8>)
 80018b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80018ba:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80018be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80018c2:	3301      	adds	r3, #1
 80018c4:	49a0      	ldr	r1, [pc, #640]	; (8001b48 <maxim_heart_rate_and_oxygen_saturation+0x3c8>)
 80018c6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80018ca:	441a      	add	r2, r3
 80018cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80018d0:	3302      	adds	r3, #2
 80018d2:	499d      	ldr	r1, [pc, #628]	; (8001b48 <maxim_heart_rate_and_oxygen_saturation+0x3c8>)
 80018d4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80018d8:	441a      	add	r2, r3
 80018da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80018de:	3303      	adds	r3, #3
 80018e0:	4999      	ldr	r1, [pc, #612]	; (8001b48 <maxim_heart_rate_and_oxygen_saturation+0x3c8>)
 80018e2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80018e6:	4413      	add	r3, r2
 80018e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
        an_x[k]=  n_denom/(int32_t)4;
 80018ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	da00      	bge.n	80018f6 <maxim_heart_rate_and_oxygen_saturation+0x176>
 80018f4:	3303      	adds	r3, #3
 80018f6:	109b      	asrs	r3, r3, #2
 80018f8:	4619      	mov	r1, r3
 80018fa:	4a93      	ldr	r2, [pc, #588]	; (8001b48 <maxim_heart_rate_and_oxygen_saturation+0x3c8>)
 80018fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001900:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for(k=0; k< BUFFER_SIZE-MA4_SIZE; k++)
 8001904:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001908:	3301      	adds	r3, #1
 800190a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800190e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001912:	f5b3 7ff8 	cmp.w	r3, #496	; 0x1f0
 8001916:	dbcd      	blt.n	80018b4 <maxim_heart_rate_and_oxygen_saturation+0x134>
    }

    // get difference of smoothed IR signal

    for( k=0; k<BUFFER_SIZE-MA4_SIZE-1;  k++)
 8001918:	2300      	movs	r3, #0
 800191a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800191e:	e015      	b.n	800194c <maxim_heart_rate_and_oxygen_saturation+0x1cc>
        an_dx[k]= (an_x[k+1]- an_x[k]);
 8001920:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001924:	3301      	adds	r3, #1
 8001926:	4a88      	ldr	r2, [pc, #544]	; (8001b48 <maxim_heart_rate_and_oxygen_saturation+0x3c8>)
 8001928:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800192c:	4986      	ldr	r1, [pc, #536]	; (8001b48 <maxim_heart_rate_and_oxygen_saturation+0x3c8>)
 800192e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001932:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001936:	1ad2      	subs	r2, r2, r3
 8001938:	4984      	ldr	r1, [pc, #528]	; (8001b4c <maxim_heart_rate_and_oxygen_saturation+0x3cc>)
 800193a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800193e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for( k=0; k<BUFFER_SIZE-MA4_SIZE-1;  k++)
 8001942:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001946:	3301      	adds	r3, #1
 8001948:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800194c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001950:	f5b3 7ff7 	cmp.w	r3, #494	; 0x1ee
 8001954:	dde4      	ble.n	8001920 <maxim_heart_rate_and_oxygen_saturation+0x1a0>

    // 2-pt Moving Average to an_dx
    for(k=0; k< BUFFER_SIZE-MA4_SIZE-2; k++){
 8001956:	2300      	movs	r3, #0
 8001958:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800195c:	e019      	b.n	8001992 <maxim_heart_rate_and_oxygen_saturation+0x212>
        an_dx[k] =  ( an_dx[k]+an_dx[k+1])/2 ;
 800195e:	4a7b      	ldr	r2, [pc, #492]	; (8001b4c <maxim_heart_rate_and_oxygen_saturation+0x3cc>)
 8001960:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001964:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001968:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800196c:	3301      	adds	r3, #1
 800196e:	4977      	ldr	r1, [pc, #476]	; (8001b4c <maxim_heart_rate_and_oxygen_saturation+0x3cc>)
 8001970:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001974:	4413      	add	r3, r2
 8001976:	0fda      	lsrs	r2, r3, #31
 8001978:	4413      	add	r3, r2
 800197a:	105b      	asrs	r3, r3, #1
 800197c:	4619      	mov	r1, r3
 800197e:	4a73      	ldr	r2, [pc, #460]	; (8001b4c <maxim_heart_rate_and_oxygen_saturation+0x3cc>)
 8001980:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001984:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for(k=0; k< BUFFER_SIZE-MA4_SIZE-2; k++){
 8001988:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800198c:	3301      	adds	r3, #1
 800198e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001992:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001996:	f5b3 7ff7 	cmp.w	r3, #494	; 0x1ee
 800199a:	dbe0      	blt.n	800195e <maxim_heart_rate_and_oxygen_saturation+0x1de>
    }

    // hamming window
    // flip wave form so that we can detect valley with peak detector
    for ( i=0 ; i<BUFFER_SIZE-HAMMING_SIZE-MA4_SIZE-2 ;i++){
 800199c:	2300      	movs	r3, #0
 800199e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80019a2:	e039      	b.n	8001a18 <maxim_heart_rate_and_oxygen_saturation+0x298>
        s= 0;
 80019a4:	2300      	movs	r3, #0
 80019a6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
        for( k=i; k<i+ HAMMING_SIZE ;k++){
 80019aa:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80019ae:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80019b2:	e018      	b.n	80019e6 <maxim_heart_rate_and_oxygen_saturation+0x266>
            s -= an_dx[k] *auw_hamm[k-i] ;
 80019b4:	4a65      	ldr	r2, [pc, #404]	; (8001b4c <maxim_heart_rate_and_oxygen_saturation+0x3cc>)
 80019b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80019ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019be:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 80019c2:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80019c6:	1a8a      	subs	r2, r1, r2
 80019c8:	4961      	ldr	r1, [pc, #388]	; (8001b50 <maxim_heart_rate_and_oxygen_saturation+0x3d0>)
 80019ca:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80019ce:	fb02 f303 	mul.w	r3, r2, r3
 80019d2:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 80019d6:	1ad3      	subs	r3, r2, r3
 80019d8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
        for( k=i; k<i+ HAMMING_SIZE ;k++){
 80019dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80019e0:	3301      	adds	r3, #1
 80019e2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80019e6:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80019ea:	3304      	adds	r3, #4
 80019ec:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 80019f0:	429a      	cmp	r2, r3
 80019f2:	dddf      	ble.n	80019b4 <maxim_heart_rate_and_oxygen_saturation+0x234>
                     }
        an_dx[i]= s/ (int32_t)1146; // divide by sum of auw_hamm
 80019f4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80019f8:	4a56      	ldr	r2, [pc, #344]	; (8001b54 <maxim_heart_rate_and_oxygen_saturation+0x3d4>)
 80019fa:	fb82 1203 	smull	r1, r2, r2, r3
 80019fe:	1252      	asrs	r2, r2, #9
 8001a00:	17db      	asrs	r3, r3, #31
 8001a02:	1ad2      	subs	r2, r2, r3
 8001a04:	4951      	ldr	r1, [pc, #324]	; (8001b4c <maxim_heart_rate_and_oxygen_saturation+0x3cc>)
 8001a06:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001a0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for ( i=0 ; i<BUFFER_SIZE-HAMMING_SIZE-MA4_SIZE-2 ;i++){
 8001a0e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001a12:	3301      	adds	r3, #1
 8001a14:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001a18:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001a1c:	f5b3 7ff4 	cmp.w	r3, #488	; 0x1e8
 8001a20:	ddc0      	ble.n	80019a4 <maxim_heart_rate_and_oxygen_saturation+0x224>
    }


    n_th1=0; // threshold calculation
 8001a22:	2300      	movs	r3, #0
 8001a24:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    for ( k=0 ; k<BUFFER_SIZE-HAMMING_SIZE ;k++){
 8001a28:	2300      	movs	r3, #0
 8001a2a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001a2e:	e011      	b.n	8001a54 <maxim_heart_rate_and_oxygen_saturation+0x2d4>
        n_th1 += ((an_dx[k]>0)? an_dx[k] : ((int32_t)0-an_dx[k])) ;
 8001a30:	4a46      	ldr	r2, [pc, #280]	; (8001b4c <maxim_heart_rate_and_oxygen_saturation+0x3cc>)
 8001a32:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001a36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	bfb8      	it	lt
 8001a3e:	425b      	neglt	r3, r3
 8001a40:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001a44:	4413      	add	r3, r2
 8001a46:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    for ( k=0 ; k<BUFFER_SIZE-HAMMING_SIZE ;k++){
 8001a4a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001a4e:	3301      	adds	r3, #1
 8001a50:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001a54:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001a58:	f5b3 7ff7 	cmp.w	r3, #494	; 0x1ee
 8001a5c:	dde8      	ble.n	8001a30 <maxim_heart_rate_and_oxygen_saturation+0x2b0>
    }
    n_th1= n_th1/ ( BUFFER_SIZE-HAMMING_SIZE);
 8001a5e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001a62:	4a3d      	ldr	r2, [pc, #244]	; (8001b58 <maxim_heart_rate_and_oxygen_saturation+0x3d8>)
 8001a64:	fb82 1203 	smull	r1, r2, r2, r3
 8001a68:	1192      	asrs	r2, r2, #6
 8001a6a:	17db      	asrs	r3, r3, #31
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    // peak location is acutally index for sharpest location of raw signal since we flipped the signal
    maxim_find_peaks( an_dx_peak_locs, &n_npks, an_dx, BUFFER_SIZE-HAMMING_SIZE, n_th1, 8, 5 );//peak_height, peak_distance, max_num_peaks
 8001a72:	f107 01d8 	add.w	r1, r7, #216	; 0xd8
 8001a76:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8001a7a:	2305      	movs	r3, #5
 8001a7c:	9302      	str	r3, [sp, #8]
 8001a7e:	2308      	movs	r3, #8
 8001a80:	9301      	str	r3, [sp, #4]
 8001a82:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001a86:	9300      	str	r3, [sp, #0]
 8001a88:	f240 13ef 	movw	r3, #495	; 0x1ef
 8001a8c:	4a2f      	ldr	r2, [pc, #188]	; (8001b4c <maxim_heart_rate_and_oxygen_saturation+0x3cc>)
 8001a8e:	f000 fb91 	bl	80021b4 <maxim_find_peaks>

    n_peak_interval_sum =0;
 8001a92:	2300      	movs	r3, #0
 8001a94:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    if (n_npks>=2){
 8001a98:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001a9c:	2b01      	cmp	r3, #1
 8001a9e:	dd44      	ble.n	8001b2a <maxim_heart_rate_and_oxygen_saturation+0x3aa>
        for (k=1; k<n_npks; k++)
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001aa6:	e01b      	b.n	8001ae0 <maxim_heart_rate_and_oxygen_saturation+0x360>
            n_peak_interval_sum += (an_dx_peak_locs[k]-an_dx_peak_locs[k -1]);
 8001aa8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001aac:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001ab0:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001ab4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001ab8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001abc:	1e59      	subs	r1, r3, #1
 8001abe:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001ac2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001ac6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001aca:	1ad3      	subs	r3, r2, r3
 8001acc:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8001ad0:	4413      	add	r3, r2
 8001ad2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
        for (k=1; k<n_npks; k++)
 8001ad6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001ada:	3301      	adds	r3, #1
 8001adc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001ae0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001ae4:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	dbdd      	blt.n	8001aa8 <maxim_heart_rate_and_oxygen_saturation+0x328>
        n_peak_interval_sum=n_peak_interval_sum/(n_npks-1);
 8001aec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001af0:	3b01      	subs	r3, #1
 8001af2:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8001af6:	fb92 f3f3 	sdiv	r3, r2, r3
 8001afa:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
        *pn_heart_rate=(int32_t)(6000/(float)n_peak_interval_sum*(float)(FS/100.0));// beats per minutes
 8001afe:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001b02:	ee07 3a90 	vmov	s15, r3
 8001b06:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b0a:	eddf 6a14 	vldr	s13, [pc, #80]	; 8001b5c <maxim_heart_rate_and_oxygen_saturation+0x3dc>
 8001b0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b12:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b16:	ee17 2a90 	vmov	r2, s15
 8001b1a:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001b1e:	601a      	str	r2, [r3, #0]
        *pch_hr_valid  = 1;
 8001b20:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001b24:	2201      	movs	r2, #1
 8001b26:	701a      	strb	r2, [r3, #0]
 8001b28:	e007      	b.n	8001b3a <maxim_heart_rate_and_oxygen_saturation+0x3ba>
    }
    else  {
        *pn_heart_rate = -999;
 8001b2a:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001b2e:	4a0c      	ldr	r2, [pc, #48]	; (8001b60 <maxim_heart_rate_and_oxygen_saturation+0x3e0>)
 8001b30:	601a      	str	r2, [r3, #0]
        *pch_hr_valid  = 0;
 8001b32:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001b36:	2200      	movs	r2, #0
 8001b38:	701a      	strb	r2, [r3, #0]
    }

    for ( k=0 ; k<n_npks ;k++)
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001b40:	e026      	b.n	8001b90 <maxim_heart_rate_and_oxygen_saturation+0x410>
 8001b42:	bf00      	nop
 8001b44:	1b4e81b5 	.word	0x1b4e81b5
 8001b48:	20001b44 	.word	0x20001b44
 8001b4c:	20001384 	.word	0x20001384
 8001b50:	08007544 	.word	0x08007544
 8001b54:	725f9bed 	.word	0x725f9bed
 8001b58:	21195767 	.word	0x21195767
 8001b5c:	45bb8000 	.word	0x45bb8000
 8001b60:	fffffc19 	.word	0xfffffc19
        an_ir_valley_locs[k]=an_dx_peak_locs[k]+HAMMING_SIZE/2;
 8001b64:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001b68:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001b6c:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001b70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b74:	1c9a      	adds	r2, r3, #2
 8001b76:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001b7a:	009b      	lsls	r3, r3, #2
 8001b7c:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8001b80:	443b      	add	r3, r7
 8001b82:	f843 2c9c 	str.w	r2, [r3, #-156]
    for ( k=0 ; k<n_npks ;k++)
 8001b86:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001b8a:	3301      	adds	r3, #1
 8001b8c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001b90:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001b94:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	dbe3      	blt.n	8001b64 <maxim_heart_rate_and_oxygen_saturation+0x3e4>


    // raw value : RED(=y) and IR(=X)
    // we need to assess DC and AC value of ir and red PPG.
    un_offset_tmp = un_offset;
 8001b9c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001ba0:	f5a3 739b 	sub.w	r3, r3, #310	; 0x136
 8001ba4:	881b      	ldrh	r3, [r3, #0]
 8001ba6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    for (k=0 ; k<n_buffer_length ; k++ )  {
 8001baa:	2300      	movs	r3, #0
 8001bac:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001bb0:	e032      	b.n	8001c18 <maxim_heart_rate_and_oxygen_saturation+0x498>
        an_x[k] =  pun_ir_buffer[un_offset_tmp];
 8001bb2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001bb6:	009b      	lsls	r3, r3, #2
 8001bb8:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8001bbc:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8001bc0:	6812      	ldr	r2, [r2, #0]
 8001bc2:	4413      	add	r3, r2
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	4ab3      	ldr	r2, [pc, #716]	; (8001e98 <maxim_heart_rate_and_oxygen_saturation+0x718>)
 8001bca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001bce:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        an_y[k] =  pun_red_buffer[un_offset_tmp];
 8001bd2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001bd6:	009b      	lsls	r3, r3, #2
 8001bd8:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8001bdc:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 8001be0:	6812      	ldr	r2, [r2, #0]
 8001be2:	4413      	add	r3, r2
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4619      	mov	r1, r3
 8001be8:	4aac      	ldr	r2, [pc, #688]	; (8001e9c <maxim_heart_rate_and_oxygen_saturation+0x71c>)
 8001bea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001bee:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        un_offset_tmp = (un_offset_tmp + 1) % MAX30102_BUFFER_LENGTH;
 8001bf2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001bf6:	3301      	adds	r3, #1
 8001bf8:	4aa9      	ldr	r2, [pc, #676]	; (8001ea0 <maxim_heart_rate_and_oxygen_saturation+0x720>)
 8001bfa:	fba2 1203 	umull	r1, r2, r2, r3
 8001bfe:	0992      	lsrs	r2, r2, #6
 8001c00:	f44f 7116 	mov.w	r1, #600	; 0x258
 8001c04:	fb01 f202 	mul.w	r2, r1, r2
 8001c08:	1a9b      	subs	r3, r3, r2
 8001c0a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    for (k=0 ; k<n_buffer_length ; k++ )  {
 8001c0e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001c12:	3301      	adds	r3, #1
 8001c14:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001c18:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001c1c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001c20:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	429a      	cmp	r2, r3
 8001c28:	dbc3      	blt.n	8001bb2 <maxim_heart_rate_and_oxygen_saturation+0x432>
    }

    // find precise min near an_ir_valley_locs
    n_exact_ir_valley_locs_count =0;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    for(k=0 ; k<n_npks ;k++){
 8001c30:	2300      	movs	r3, #0
 8001c32:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001c36:	e05a      	b.n	8001cee <maxim_heart_rate_and_oxygen_saturation+0x56e>
        un_only_once =1;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
        m=an_ir_valley_locs[k];
 8001c3e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001c42:	009b      	lsls	r3, r3, #2
 8001c44:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8001c48:	443b      	add	r3, r7
 8001c4a:	f853 3c9c 	ldr.w	r3, [r3, #-156]
 8001c4e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
        n_c_min= 16777216;//2^24;
 8001c52:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001c56:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        if (m+5 <  BUFFER_SIZE-HAMMING_SIZE  && m-5 >0){
 8001c5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001c5e:	f5b3 7ff5 	cmp.w	r3, #490	; 0x1ea
 8001c62:	da3f      	bge.n	8001ce4 <maxim_heart_rate_and_oxygen_saturation+0x564>
 8001c64:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001c68:	2b05      	cmp	r3, #5
 8001c6a:	dd3b      	ble.n	8001ce4 <maxim_heart_rate_and_oxygen_saturation+0x564>
            for(i= m-5;i<m+5; i++)
 8001c6c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001c70:	3b05      	subs	r3, #5
 8001c72:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001c76:	e025      	b.n	8001cc4 <maxim_heart_rate_and_oxygen_saturation+0x544>
                if (an_x[i]<n_c_min){
 8001c78:	4a87      	ldr	r2, [pc, #540]	; (8001e98 <maxim_heart_rate_and_oxygen_saturation+0x718>)
 8001c7a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001c7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c82:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001c86:	429a      	cmp	r2, r3
 8001c88:	dd17      	ble.n	8001cba <maxim_heart_rate_and_oxygen_saturation+0x53a>
                    if (un_only_once >0){
 8001c8a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d002      	beq.n	8001c98 <maxim_heart_rate_and_oxygen_saturation+0x518>
                       un_only_once =0;
 8001c92:	2300      	movs	r3, #0
 8001c94:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
                   }
                   n_c_min= an_x[i] ;
 8001c98:	4a7f      	ldr	r2, [pc, #508]	; (8001e98 <maxim_heart_rate_and_oxygen_saturation+0x718>)
 8001c9a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001c9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ca2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
                   an_exact_ir_valley_locs[k]=i;
 8001ca6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001caa:	009b      	lsls	r3, r3, #2
 8001cac:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8001cb0:	443b      	add	r3, r7
 8001cb2:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8001cb6:	f843 2cd8 	str.w	r2, [r3, #-216]
            for(i= m-5;i<m+5; i++)
 8001cba:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001cbe:	3301      	adds	r3, #1
 8001cc0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001cc4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001cc8:	3304      	adds	r3, #4
 8001cca:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8001cce:	429a      	cmp	r2, r3
 8001cd0:	ddd2      	ble.n	8001c78 <maxim_heart_rate_and_oxygen_saturation+0x4f8>
                }
            if (un_only_once ==0)
 8001cd2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d104      	bne.n	8001ce4 <maxim_heart_rate_and_oxygen_saturation+0x564>
                n_exact_ir_valley_locs_count ++ ;
 8001cda:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001cde:	3301      	adds	r3, #1
 8001ce0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    for(k=0 ; k<n_npks ;k++){
 8001ce4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001ce8:	3301      	adds	r3, #1
 8001cea:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001cee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001cf2:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001cf6:	429a      	cmp	r2, r3
 8001cf8:	db9e      	blt.n	8001c38 <maxim_heart_rate_and_oxygen_saturation+0x4b8>
        }
    }
    if (n_exact_ir_valley_locs_count <2 ){
 8001cfa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001cfe:	2b01      	cmp	r3, #1
 8001d00:	dc08      	bgt.n	8001d14 <maxim_heart_rate_and_oxygen_saturation+0x594>
       *pn_spo2 =  -999 ; // do not use SPO2 since signal ratio is out of range
 8001d02:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8001d06:	4a67      	ldr	r2, [pc, #412]	; (8001ea4 <maxim_heart_rate_and_oxygen_saturation+0x724>)
 8001d08:	601a      	str	r2, [r3, #0]
       *pch_spo2_valid  = 0;
 8001d0a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8001d0e:	2200      	movs	r2, #0
 8001d10:	701a      	strb	r2, [r3, #0]
       return;
 8001d12:	e243      	b.n	800219c <maxim_heart_rate_and_oxygen_saturation+0xa1c>
    }
    // 4 pt MA
    for(k=0; k< BUFFER_SIZE-MA4_SIZE; k++){
 8001d14:	2300      	movs	r3, #0
 8001d16:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001d1a:	e04c      	b.n	8001db6 <maxim_heart_rate_and_oxygen_saturation+0x636>
        an_x[k]=( an_x[k]+an_x[k+1]+ an_x[k+2]+ an_x[k+3])/(int32_t)4;
 8001d1c:	4a5e      	ldr	r2, [pc, #376]	; (8001e98 <maxim_heart_rate_and_oxygen_saturation+0x718>)
 8001d1e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001d22:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001d26:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001d2a:	3301      	adds	r3, #1
 8001d2c:	495a      	ldr	r1, [pc, #360]	; (8001e98 <maxim_heart_rate_and_oxygen_saturation+0x718>)
 8001d2e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001d32:	441a      	add	r2, r3
 8001d34:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001d38:	3302      	adds	r3, #2
 8001d3a:	4957      	ldr	r1, [pc, #348]	; (8001e98 <maxim_heart_rate_and_oxygen_saturation+0x718>)
 8001d3c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001d40:	441a      	add	r2, r3
 8001d42:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001d46:	3303      	adds	r3, #3
 8001d48:	4953      	ldr	r1, [pc, #332]	; (8001e98 <maxim_heart_rate_and_oxygen_saturation+0x718>)
 8001d4a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001d4e:	4413      	add	r3, r2
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	da00      	bge.n	8001d56 <maxim_heart_rate_and_oxygen_saturation+0x5d6>
 8001d54:	3303      	adds	r3, #3
 8001d56:	109b      	asrs	r3, r3, #2
 8001d58:	4619      	mov	r1, r3
 8001d5a:	4a4f      	ldr	r2, [pc, #316]	; (8001e98 <maxim_heart_rate_and_oxygen_saturation+0x718>)
 8001d5c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001d60:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        an_y[k]=( an_y[k]+an_y[k+1]+ an_y[k+2]+ an_y[k+3])/(int32_t)4;
 8001d64:	4a4d      	ldr	r2, [pc, #308]	; (8001e9c <maxim_heart_rate_and_oxygen_saturation+0x71c>)
 8001d66:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001d6a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001d6e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001d72:	3301      	adds	r3, #1
 8001d74:	4949      	ldr	r1, [pc, #292]	; (8001e9c <maxim_heart_rate_and_oxygen_saturation+0x71c>)
 8001d76:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001d7a:	441a      	add	r2, r3
 8001d7c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001d80:	3302      	adds	r3, #2
 8001d82:	4946      	ldr	r1, [pc, #280]	; (8001e9c <maxim_heart_rate_and_oxygen_saturation+0x71c>)
 8001d84:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001d88:	441a      	add	r2, r3
 8001d8a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001d8e:	3303      	adds	r3, #3
 8001d90:	4942      	ldr	r1, [pc, #264]	; (8001e9c <maxim_heart_rate_and_oxygen_saturation+0x71c>)
 8001d92:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001d96:	4413      	add	r3, r2
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	da00      	bge.n	8001d9e <maxim_heart_rate_and_oxygen_saturation+0x61e>
 8001d9c:	3303      	adds	r3, #3
 8001d9e:	109b      	asrs	r3, r3, #2
 8001da0:	4619      	mov	r1, r3
 8001da2:	4a3e      	ldr	r2, [pc, #248]	; (8001e9c <maxim_heart_rate_and_oxygen_saturation+0x71c>)
 8001da4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001da8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for(k=0; k< BUFFER_SIZE-MA4_SIZE; k++){
 8001dac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001db0:	3301      	adds	r3, #1
 8001db2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001db6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001dba:	f5b3 7ff8 	cmp.w	r3, #496	; 0x1f0
 8001dbe:	dbad      	blt.n	8001d1c <maxim_heart_rate_and_oxygen_saturation+0x59c>
    }

    //using an_exact_ir_valley_locs , find ir-red DC andir-red AC for SPO2 calibration ratio
    //finding AC/DC maximum of raw ir * red between two valley locations
    n_ratio_average =0;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    n_i_ratio_count =0;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128

    for(k=0; k< 5; k++) an_ratio[k]=0;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001dd2:	e00d      	b.n	8001df0 <maxim_heart_rate_and_oxygen_saturation+0x670>
 8001dd4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001dd8:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001ddc:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001de0:	2100      	movs	r1, #0
 8001de2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8001de6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001dea:	3301      	adds	r3, #1
 8001dec:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001df0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001df4:	2b04      	cmp	r3, #4
 8001df6:	dded      	ble.n	8001dd4 <maxim_heart_rate_and_oxygen_saturation+0x654>
    for (k=0; k< n_exact_ir_valley_locs_count; k++){
 8001df8:	2300      	movs	r3, #0
 8001dfa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001dfe:	e018      	b.n	8001e32 <maxim_heart_rate_and_oxygen_saturation+0x6b2>
        if (an_exact_ir_valley_locs[k] > BUFFER_SIZE ){
 8001e00:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001e04:	009b      	lsls	r3, r3, #2
 8001e06:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8001e0a:	443b      	add	r3, r7
 8001e0c:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 8001e10:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001e14:	dd08      	ble.n	8001e28 <maxim_heart_rate_and_oxygen_saturation+0x6a8>
            *pn_spo2 =  -999 ; // do not use SPO2 since valley loc is out of range
 8001e16:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8001e1a:	4a22      	ldr	r2, [pc, #136]	; (8001ea4 <maxim_heart_rate_and_oxygen_saturation+0x724>)
 8001e1c:	601a      	str	r2, [r3, #0]
            *pch_spo2_valid  = 0;
 8001e1e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8001e22:	2200      	movs	r2, #0
 8001e24:	701a      	strb	r2, [r3, #0]
            return;
 8001e26:	e1b9      	b.n	800219c <maxim_heart_rate_and_oxygen_saturation+0xa1c>
    for (k=0; k< n_exact_ir_valley_locs_count; k++){
 8001e28:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001e2c:	3301      	adds	r3, #1
 8001e2e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001e32:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001e36:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001e3a:	429a      	cmp	r2, r3
 8001e3c:	dbe0      	blt.n	8001e00 <maxim_heart_rate_and_oxygen_saturation+0x680>
        }
    }
    // find max between two valley locations
    // and use ratio betwen AC compoent of Ir & Red and DC compoent of Ir & Red for SPO2

    for (k=0; k< n_exact_ir_valley_locs_count-1; k++){
 8001e3e:	2300      	movs	r3, #0
 8001e40:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001e44:	e14d      	b.n	80020e2 <maxim_heart_rate_and_oxygen_saturation+0x962>
        n_y_dc_max= -16777216 ;
 8001e46:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8001e4a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        n_x_dc_max= - 16777216;
 8001e4e:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8001e52:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        if (an_exact_ir_valley_locs[k+1]-an_exact_ir_valley_locs[k] >10){
 8001e56:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001e5a:	3301      	adds	r3, #1
 8001e5c:	009b      	lsls	r3, r3, #2
 8001e5e:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8001e62:	443b      	add	r3, r7
 8001e64:	f853 2cd8 	ldr.w	r2, [r3, #-216]
 8001e68:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001e6c:	009b      	lsls	r3, r3, #2
 8001e6e:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8001e72:	443b      	add	r3, r7
 8001e74:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 8001e78:	1ad3      	subs	r3, r2, r3
 8001e7a:	2b0a      	cmp	r3, #10
 8001e7c:	f340 812c 	ble.w	80020d8 <maxim_heart_rate_and_oxygen_saturation+0x958>
            for (i=an_exact_ir_valley_locs[k]; i< an_exact_ir_valley_locs[k+1]; i++){
 8001e80:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001e84:	009b      	lsls	r3, r3, #2
 8001e86:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8001e8a:	443b      	add	r3, r7
 8001e8c:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 8001e90:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001e94:	e035      	b.n	8001f02 <maxim_heart_rate_and_oxygen_saturation+0x782>
 8001e96:	bf00      	nop
 8001e98:	20001b44 	.word	0x20001b44
 8001e9c:	20002314 	.word	0x20002314
 8001ea0:	1b4e81b5 	.word	0x1b4e81b5
 8001ea4:	fffffc19 	.word	0xfffffc19
                if (an_x[i]> n_x_dc_max) {n_x_dc_max =an_x[i];n_x_dc_max_idx =i; }
 8001ea8:	4abe      	ldr	r2, [pc, #760]	; (80021a4 <maxim_heart_rate_and_oxygen_saturation+0xa24>)
 8001eaa:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001eae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eb2:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8001eb6:	429a      	cmp	r2, r3
 8001eb8:	da0a      	bge.n	8001ed0 <maxim_heart_rate_and_oxygen_saturation+0x750>
 8001eba:	4aba      	ldr	r2, [pc, #744]	; (80021a4 <maxim_heart_rate_and_oxygen_saturation+0xa24>)
 8001ebc:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001ec0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ec4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8001ec8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001ecc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
                if (an_y[i]> n_y_dc_max) {n_y_dc_max =an_y[i];n_y_dc_max_idx=i;}
 8001ed0:	4ab5      	ldr	r2, [pc, #724]	; (80021a8 <maxim_heart_rate_and_oxygen_saturation+0xa28>)
 8001ed2:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001ed6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eda:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8001ede:	429a      	cmp	r2, r3
 8001ee0:	da0a      	bge.n	8001ef8 <maxim_heart_rate_and_oxygen_saturation+0x778>
 8001ee2:	4ab1      	ldr	r2, [pc, #708]	; (80021a8 <maxim_heart_rate_and_oxygen_saturation+0xa28>)
 8001ee4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001ee8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eec:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8001ef0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001ef4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
            for (i=an_exact_ir_valley_locs[k]; i< an_exact_ir_valley_locs[k+1]; i++){
 8001ef8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001efc:	3301      	adds	r3, #1
 8001efe:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001f02:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001f06:	3301      	adds	r3, #1
 8001f08:	009b      	lsls	r3, r3, #2
 8001f0a:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8001f0e:	443b      	add	r3, r7
 8001f10:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 8001f14:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	dbc5      	blt.n	8001ea8 <maxim_heart_rate_and_oxygen_saturation+0x728>
            }
            n_y_ac= (an_y[an_exact_ir_valley_locs[k+1]] - an_y[an_exact_ir_valley_locs[k] ] )*(n_y_dc_max_idx -an_exact_ir_valley_locs[k]); //red
 8001f1c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001f20:	3301      	adds	r3, #1
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8001f28:	443b      	add	r3, r7
 8001f2a:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 8001f2e:	4a9e      	ldr	r2, [pc, #632]	; (80021a8 <maxim_heart_rate_and_oxygen_saturation+0xa28>)
 8001f30:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001f34:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001f38:	009b      	lsls	r3, r3, #2
 8001f3a:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8001f3e:	443b      	add	r3, r7
 8001f40:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 8001f44:	4998      	ldr	r1, [pc, #608]	; (80021a8 <maxim_heart_rate_and_oxygen_saturation+0xa28>)
 8001f46:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001f4a:	1ad2      	subs	r2, r2, r3
 8001f4c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001f50:	009b      	lsls	r3, r3, #2
 8001f52:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8001f56:	443b      	add	r3, r7
 8001f58:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 8001f5c:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 8001f60:	1acb      	subs	r3, r1, r3
 8001f62:	fb02 f303 	mul.w	r3, r2, r3
 8001f66:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
            n_y_ac=  an_y[an_exact_ir_valley_locs[k]] + n_y_ac/ (an_exact_ir_valley_locs[k+1] - an_exact_ir_valley_locs[k])  ;
 8001f6a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001f6e:	009b      	lsls	r3, r3, #2
 8001f70:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8001f74:	443b      	add	r3, r7
 8001f76:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 8001f7a:	4a8b      	ldr	r2, [pc, #556]	; (80021a8 <maxim_heart_rate_and_oxygen_saturation+0xa28>)
 8001f7c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001f80:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001f84:	3301      	adds	r3, #1
 8001f86:	009b      	lsls	r3, r3, #2
 8001f88:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8001f8c:	443b      	add	r3, r7
 8001f8e:	f853 1cd8 	ldr.w	r1, [r3, #-216]
 8001f92:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8001f9c:	443b      	add	r3, r7
 8001f9e:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 8001fa2:	1acb      	subs	r3, r1, r3
 8001fa4:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 8001fa8:	fb91 f3f3 	sdiv	r3, r1, r3
 8001fac:	4413      	add	r3, r2
 8001fae:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec


            n_y_ac=  an_y[n_y_dc_max_idx] - n_y_ac;    // subracting linear DC compoenents from raw
 8001fb2:	4a7d      	ldr	r2, [pc, #500]	; (80021a8 <maxim_heart_rate_and_oxygen_saturation+0xa28>)
 8001fb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001fb8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001fbc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001fc0:	1ad3      	subs	r3, r2, r3
 8001fc2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
            n_x_ac= (an_x[an_exact_ir_valley_locs[k+1]] - an_x[an_exact_ir_valley_locs[k] ] )*(n_x_dc_max_idx -an_exact_ir_valley_locs[k]); // ir
 8001fc6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001fca:	3301      	adds	r3, #1
 8001fcc:	009b      	lsls	r3, r3, #2
 8001fce:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8001fd2:	443b      	add	r3, r7
 8001fd4:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 8001fd8:	4a72      	ldr	r2, [pc, #456]	; (80021a4 <maxim_heart_rate_and_oxygen_saturation+0xa24>)
 8001fda:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001fde:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001fe2:	009b      	lsls	r3, r3, #2
 8001fe4:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8001fe8:	443b      	add	r3, r7
 8001fea:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 8001fee:	496d      	ldr	r1, [pc, #436]	; (80021a4 <maxim_heart_rate_and_oxygen_saturation+0xa24>)
 8001ff0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001ff4:	1ad2      	subs	r2, r2, r3
 8001ff6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001ffa:	009b      	lsls	r3, r3, #2
 8001ffc:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8002000:	443b      	add	r3, r7
 8002002:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 8002006:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 800200a:	1acb      	subs	r3, r1, r3
 800200c:	fb02 f303 	mul.w	r3, r2, r3
 8002010:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
            n_x_ac=  an_x[an_exact_ir_valley_locs[k]] + n_x_ac/ (an_exact_ir_valley_locs[k+1] - an_exact_ir_valley_locs[k]);
 8002014:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002018:	009b      	lsls	r3, r3, #2
 800201a:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800201e:	443b      	add	r3, r7
 8002020:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 8002024:	4a5f      	ldr	r2, [pc, #380]	; (80021a4 <maxim_heart_rate_and_oxygen_saturation+0xa24>)
 8002026:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800202a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800202e:	3301      	adds	r3, #1
 8002030:	009b      	lsls	r3, r3, #2
 8002032:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8002036:	443b      	add	r3, r7
 8002038:	f853 1cd8 	ldr.w	r1, [r3, #-216]
 800203c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002040:	009b      	lsls	r3, r3, #2
 8002042:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8002046:	443b      	add	r3, r7
 8002048:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 800204c:	1acb      	subs	r3, r1, r3
 800204e:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 8002052:	fb91 f3f3 	sdiv	r3, r1, r3
 8002056:	4413      	add	r3, r2
 8002058:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
            n_x_ac=  an_x[n_y_dc_max_idx] - n_x_ac;      // subracting linear DC compoenents from raw
 800205c:	4a51      	ldr	r2, [pc, #324]	; (80021a4 <maxim_heart_rate_and_oxygen_saturation+0xa24>)
 800205e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002062:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002066:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800206a:	1ad3      	subs	r3, r2, r3
 800206c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
            n_nume=( n_y_ac *n_x_dc_max)>>7 ; //prepare X100 to preserve floating value
 8002070:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002074:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8002078:	fb02 f303 	mul.w	r3, r2, r3
 800207c:	11db      	asrs	r3, r3, #7
 800207e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
            n_denom= ( n_x_ac *n_y_dc_max)>>7;
 8002082:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002086:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 800208a:	fb02 f303 	mul.w	r3, r2, r3
 800208e:	11db      	asrs	r3, r3, #7
 8002090:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
            if (n_denom>0  && n_i_ratio_count <5 &&  n_nume != 0)
 8002094:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002098:	2b00      	cmp	r3, #0
 800209a:	dd1d      	ble.n	80020d8 <maxim_heart_rate_and_oxygen_saturation+0x958>
 800209c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80020a0:	2b04      	cmp	r3, #4
 80020a2:	dc19      	bgt.n	80020d8 <maxim_heart_rate_and_oxygen_saturation+0x958>
 80020a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d015      	beq.n	80020d8 <maxim_heart_rate_and_oxygen_saturation+0x958>
            {
                an_ratio[n_i_ratio_count]= (n_nume*100)/n_denom ; //formular is ( n_y_ac *n_x_dc_max) / ( n_x_ac *n_y_dc_max) ;
 80020ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80020b0:	2264      	movs	r2, #100	; 0x64
 80020b2:	fb03 f202 	mul.w	r2, r3, r2
 80020b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80020ba:	fb92 f1f3 	sdiv	r1, r2, r3
 80020be:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80020c2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80020c6:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80020ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                n_i_ratio_count++;
 80020ce:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80020d2:	3301      	adds	r3, #1
 80020d4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    for (k=0; k< n_exact_ir_valley_locs_count-1; k++){
 80020d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80020dc:	3301      	adds	r3, #1
 80020de:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80020e2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80020e6:	3b01      	subs	r3, #1
 80020e8:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 80020ec:	429a      	cmp	r2, r3
 80020ee:	f6ff aeaa 	blt.w	8001e46 <maxim_heart_rate_and_oxygen_saturation+0x6c6>
            }
        }
    }

    maxim_sort_ascend(an_ratio, n_i_ratio_count);
 80020f2:	f107 0310 	add.w	r3, r7, #16
 80020f6:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 80020fa:	4618      	mov	r0, r3
 80020fc:	f000 f94f 	bl	800239e <maxim_sort_ascend>
    n_middle_idx= n_i_ratio_count/2;
 8002100:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002104:	0fda      	lsrs	r2, r3, #31
 8002106:	4413      	add	r3, r2
 8002108:	105b      	asrs	r3, r3, #1
 800210a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4

    if (n_middle_idx >1)
 800210e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002112:	2b01      	cmp	r3, #1
 8002114:	dd17      	ble.n	8002146 <maxim_heart_rate_and_oxygen_saturation+0x9c6>
        n_ratio_average =( an_ratio[n_middle_idx-1] +an_ratio[n_middle_idx])/2; // use median
 8002116:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800211a:	1e5a      	subs	r2, r3, #1
 800211c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002120:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002124:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002128:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800212c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002130:	f8d7 10f4 	ldr.w	r1, [r7, #244]	; 0xf4
 8002134:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002138:	4413      	add	r3, r2
 800213a:	0fda      	lsrs	r2, r3, #31
 800213c:	4413      	add	r3, r2
 800213e:	105b      	asrs	r3, r3, #1
 8002140:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8002144:	e009      	b.n	800215a <maxim_heart_rate_and_oxygen_saturation+0x9da>
    else
        n_ratio_average = an_ratio[n_middle_idx ];
 8002146:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800214a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800214e:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8002152:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002156:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc

    if( n_ratio_average>2 && n_ratio_average <184){
 800215a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800215e:	2b02      	cmp	r3, #2
 8002160:	dd14      	ble.n	800218c <maxim_heart_rate_and_oxygen_saturation+0xa0c>
 8002162:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002166:	2bb7      	cmp	r3, #183	; 0xb7
 8002168:	dc10      	bgt.n	800218c <maxim_heart_rate_and_oxygen_saturation+0xa0c>
        n_spo2_calc= uch_spo2_table[n_ratio_average] ;
 800216a:	4a10      	ldr	r2, [pc, #64]	; (80021ac <maxim_heart_rate_and_oxygen_saturation+0xa2c>)
 800216c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002170:	4413      	add	r3, r2
 8002172:	781b      	ldrb	r3, [r3, #0]
 8002174:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
        *pn_spo2 = n_spo2_calc ;
 8002178:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800217c:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 8002180:	601a      	str	r2, [r3, #0]
        *pch_spo2_valid  = 1;//  float_SPO2 =  -45.060*n_ratio_average* n_ratio_average/10000 + 30.354 *n_ratio_average/100 + 94.845 ;  // for comparison with table
 8002182:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002186:	2201      	movs	r2, #1
 8002188:	701a      	strb	r2, [r3, #0]
 800218a:	e007      	b.n	800219c <maxim_heart_rate_and_oxygen_saturation+0xa1c>
    }
    else{
        *pn_spo2 =  -999 ; // do not use SPO2 since signal ratio is out of range
 800218c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8002190:	4a07      	ldr	r2, [pc, #28]	; (80021b0 <maxim_heart_rate_and_oxygen_saturation+0xa30>)
 8002192:	601a      	str	r2, [r3, #0]
        *pch_spo2_valid  = 0;
 8002194:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002198:	2200      	movs	r2, #0
 800219a:	701a      	strb	r2, [r3, #0]
    }
}
 800219c:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd90      	pop	{r4, r7, pc}
 80021a4:	20001b44 	.word	0x20001b44
 80021a8:	20002314 	.word	0x20002314
 80021ac:	08007584 	.word	0x08007584
 80021b0:	fffffc19 	.word	0xfffffc19

080021b4 <maxim_find_peaks>:
* \par          Details
*               Find at most MAX_NUM peaks above MIN_HEIGHT separated by at least MIN_DISTANCE
*
* \retval       None
*/
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b086      	sub	sp, #24
 80021b8:	af02      	add	r7, sp, #8
 80021ba:	60f8      	str	r0, [r7, #12]
 80021bc:	60b9      	str	r1, [r7, #8]
 80021be:	607a      	str	r2, [r7, #4]
 80021c0:	603b      	str	r3, [r7, #0]
    maxim_peaks_above_min_height( pn_locs, pn_npks, pn_x, n_size, n_min_height );
 80021c2:	69bb      	ldr	r3, [r7, #24]
 80021c4:	9300      	str	r3, [sp, #0]
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	687a      	ldr	r2, [r7, #4]
 80021ca:	68b9      	ldr	r1, [r7, #8]
 80021cc:	68f8      	ldr	r0, [r7, #12]
 80021ce:	f000 f812 	bl	80021f6 <maxim_peaks_above_min_height>
    maxim_remove_close_peaks( pn_locs, pn_npks, pn_x, n_min_distance );
 80021d2:	69fb      	ldr	r3, [r7, #28]
 80021d4:	687a      	ldr	r2, [r7, #4]
 80021d6:	68b9      	ldr	r1, [r7, #8]
 80021d8:	68f8      	ldr	r0, [r7, #12]
 80021da:	f000 f880 	bl	80022de <maxim_remove_close_peaks>
    *pn_npks = min( *pn_npks, n_max_num );
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	6a3b      	ldr	r3, [r7, #32]
 80021e4:	429a      	cmp	r2, r3
 80021e6:	bfa8      	it	ge
 80021e8:	461a      	movge	r2, r3
 80021ea:	68bb      	ldr	r3, [r7, #8]
 80021ec:	601a      	str	r2, [r3, #0]
}
 80021ee:	bf00      	nop
 80021f0:	3710      	adds	r7, #16
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}

080021f6 <maxim_peaks_above_min_height>:
* \par          Details
*               Find all peaks above MIN_HEIGHT
*
* \retval       None
*/
{
 80021f6:	b480      	push	{r7}
 80021f8:	b087      	sub	sp, #28
 80021fa:	af00      	add	r7, sp, #0
 80021fc:	60f8      	str	r0, [r7, #12]
 80021fe:	60b9      	str	r1, [r7, #8]
 8002200:	607a      	str	r2, [r7, #4]
 8002202:	603b      	str	r3, [r7, #0]
    int32_t i = 1, n_width;
 8002204:	2301      	movs	r3, #1
 8002206:	617b      	str	r3, [r7, #20]
    *pn_npks = 0;
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	2200      	movs	r2, #0
 800220c:	601a      	str	r2, [r3, #0]

    while (i < n_size-1){
 800220e:	e05a      	b.n	80022c6 <maxim_peaks_above_min_height+0xd0>
        if (pn_x[i] > n_min_height && pn_x[i] > pn_x[i-1]){            // find left edge of potential peaks
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	009b      	lsls	r3, r3, #2
 8002214:	687a      	ldr	r2, [r7, #4]
 8002216:	4413      	add	r3, r2
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	6a3a      	ldr	r2, [r7, #32]
 800221c:	429a      	cmp	r2, r3
 800221e:	da4f      	bge.n	80022c0 <maxim_peaks_above_min_height+0xca>
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	687a      	ldr	r2, [r7, #4]
 8002226:	4413      	add	r3, r2
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002230:	3b01      	subs	r3, #1
 8002232:	009b      	lsls	r3, r3, #2
 8002234:	6879      	ldr	r1, [r7, #4]
 8002236:	440b      	add	r3, r1
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	429a      	cmp	r2, r3
 800223c:	dd40      	ble.n	80022c0 <maxim_peaks_above_min_height+0xca>
            n_width = 1;
 800223e:	2301      	movs	r3, #1
 8002240:	613b      	str	r3, [r7, #16]
            while (i+n_width < n_size && pn_x[i] == pn_x[i+n_width])    // find flat peaks
 8002242:	e002      	b.n	800224a <maxim_peaks_above_min_height+0x54>
                n_width++;
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	3301      	adds	r3, #1
 8002248:	613b      	str	r3, [r7, #16]
            while (i+n_width < n_size && pn_x[i] == pn_x[i+n_width])    // find flat peaks
 800224a:	697a      	ldr	r2, [r7, #20]
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	4413      	add	r3, r2
 8002250:	683a      	ldr	r2, [r7, #0]
 8002252:	429a      	cmp	r2, r3
 8002254:	dd0d      	ble.n	8002272 <maxim_peaks_above_min_height+0x7c>
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	009b      	lsls	r3, r3, #2
 800225a:	687a      	ldr	r2, [r7, #4]
 800225c:	4413      	add	r3, r2
 800225e:	681a      	ldr	r2, [r3, #0]
 8002260:	6979      	ldr	r1, [r7, #20]
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	440b      	add	r3, r1
 8002266:	009b      	lsls	r3, r3, #2
 8002268:	6879      	ldr	r1, [r7, #4]
 800226a:	440b      	add	r3, r1
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	429a      	cmp	r2, r3
 8002270:	d0e8      	beq.n	8002244 <maxim_peaks_above_min_height+0x4e>
            if (pn_x[i] > pn_x[i+n_width] && (*pn_npks) < 15 ){                            // find right edge of peaks
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	009b      	lsls	r3, r3, #2
 8002276:	687a      	ldr	r2, [r7, #4]
 8002278:	4413      	add	r3, r2
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	6979      	ldr	r1, [r7, #20]
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	440b      	add	r3, r1
 8002282:	009b      	lsls	r3, r3, #2
 8002284:	6879      	ldr	r1, [r7, #4]
 8002286:	440b      	add	r3, r1
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	429a      	cmp	r2, r3
 800228c:	dd13      	ble.n	80022b6 <maxim_peaks_above_min_height+0xc0>
 800228e:	68bb      	ldr	r3, [r7, #8]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	2b0e      	cmp	r3, #14
 8002294:	dc0f      	bgt.n	80022b6 <maxim_peaks_above_min_height+0xc0>
                pn_locs[(*pn_npks)++] = i;
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	1c59      	adds	r1, r3, #1
 800229c:	68ba      	ldr	r2, [r7, #8]
 800229e:	6011      	str	r1, [r2, #0]
 80022a0:	009b      	lsls	r3, r3, #2
 80022a2:	68fa      	ldr	r2, [r7, #12]
 80022a4:	4413      	add	r3, r2
 80022a6:	697a      	ldr	r2, [r7, #20]
 80022a8:	601a      	str	r2, [r3, #0]
                // for flat peaks, peak location is left edge
                i += n_width+1;
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	3301      	adds	r3, #1
 80022ae:	697a      	ldr	r2, [r7, #20]
 80022b0:	4413      	add	r3, r2
 80022b2:	617b      	str	r3, [r7, #20]
 80022b4:	e003      	b.n	80022be <maxim_peaks_above_min_height+0xc8>
            }
            else
                i += n_width;
 80022b6:	697a      	ldr	r2, [r7, #20]
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	4413      	add	r3, r2
 80022bc:	617b      	str	r3, [r7, #20]
            if (pn_x[i] > pn_x[i+n_width] && (*pn_npks) < 15 ){                            // find right edge of peaks
 80022be:	e002      	b.n	80022c6 <maxim_peaks_above_min_height+0xd0>
        }
        else
            i++;
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	3301      	adds	r3, #1
 80022c4:	617b      	str	r3, [r7, #20]
    while (i < n_size-1){
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	3b01      	subs	r3, #1
 80022ca:	697a      	ldr	r2, [r7, #20]
 80022cc:	429a      	cmp	r2, r3
 80022ce:	db9f      	blt.n	8002210 <maxim_peaks_above_min_height+0x1a>
    }
}
 80022d0:	bf00      	nop
 80022d2:	bf00      	nop
 80022d4:	371c      	adds	r7, #28
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr

080022de <maxim_remove_close_peaks>:
* \par          Details
*               Remove peaks separated by less than MIN_DISTANCE
*
* \retval       None
*/
{
 80022de:	b580      	push	{r7, lr}
 80022e0:	b088      	sub	sp, #32
 80022e2:	af00      	add	r7, sp, #0
 80022e4:	60f8      	str	r0, [r7, #12]
 80022e6:	60b9      	str	r1, [r7, #8]
 80022e8:	607a      	str	r2, [r7, #4]
 80022ea:	603b      	str	r3, [r7, #0]

    int32_t i, j, n_old_npks, n_dist;

    /* Order peaks from large to small */
    maxim_sort_indices_descend( pn_x, pn_locs, *pn_npks );
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	461a      	mov	r2, r3
 80022f2:	68f9      	ldr	r1, [r7, #12]
 80022f4:	6878      	ldr	r0, [r7, #4]
 80022f6:	f000 f895 	bl	8002424 <maxim_sort_indices_descend>

    for ( i = -1; i < *pn_npks; i++ ){
 80022fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80022fe:	61fb      	str	r3, [r7, #28]
 8002300:	e03e      	b.n	8002380 <maxim_remove_close_peaks+0xa2>
        n_old_npks = *pn_npks;
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	617b      	str	r3, [r7, #20]
        *pn_npks = i+1;
 8002308:	69fb      	ldr	r3, [r7, #28]
 800230a:	1c5a      	adds	r2, r3, #1
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	601a      	str	r2, [r3, #0]
        for ( j = i+1; j < n_old_npks; j++ ){
 8002310:	69fb      	ldr	r3, [r7, #28]
 8002312:	3301      	adds	r3, #1
 8002314:	61bb      	str	r3, [r7, #24]
 8002316:	e02c      	b.n	8002372 <maxim_remove_close_peaks+0x94>
            n_dist =  pn_locs[j] - ( i == -1 ? -1 : pn_locs[i] ); // lag-zero peak of autocorr is at index -1
 8002318:	69bb      	ldr	r3, [r7, #24]
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	68fa      	ldr	r2, [r7, #12]
 800231e:	4413      	add	r3, r2
 8002320:	681a      	ldr	r2, [r3, #0]
 8002322:	69fb      	ldr	r3, [r7, #28]
 8002324:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002328:	d005      	beq.n	8002336 <maxim_remove_close_peaks+0x58>
 800232a:	69fb      	ldr	r3, [r7, #28]
 800232c:	009b      	lsls	r3, r3, #2
 800232e:	68f9      	ldr	r1, [r7, #12]
 8002330:	440b      	add	r3, r1
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	e001      	b.n	800233a <maxim_remove_close_peaks+0x5c>
 8002336:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800233a:	1ad3      	subs	r3, r2, r3
 800233c:	613b      	str	r3, [r7, #16]
            if ( n_dist > n_min_distance || n_dist < -n_min_distance )
 800233e:	693a      	ldr	r2, [r7, #16]
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	429a      	cmp	r2, r3
 8002344:	dc04      	bgt.n	8002350 <maxim_remove_close_peaks+0x72>
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	425b      	negs	r3, r3
 800234a:	693a      	ldr	r2, [r7, #16]
 800234c:	429a      	cmp	r2, r3
 800234e:	da0d      	bge.n	800236c <maxim_remove_close_peaks+0x8e>
                pn_locs[(*pn_npks)++] = pn_locs[j];
 8002350:	69bb      	ldr	r3, [r7, #24]
 8002352:	009b      	lsls	r3, r3, #2
 8002354:	68fa      	ldr	r2, [r7, #12]
 8002356:	441a      	add	r2, r3
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	1c58      	adds	r0, r3, #1
 800235e:	68b9      	ldr	r1, [r7, #8]
 8002360:	6008      	str	r0, [r1, #0]
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	68f9      	ldr	r1, [r7, #12]
 8002366:	440b      	add	r3, r1
 8002368:	6812      	ldr	r2, [r2, #0]
 800236a:	601a      	str	r2, [r3, #0]
        for ( j = i+1; j < n_old_npks; j++ ){
 800236c:	69bb      	ldr	r3, [r7, #24]
 800236e:	3301      	adds	r3, #1
 8002370:	61bb      	str	r3, [r7, #24]
 8002372:	69ba      	ldr	r2, [r7, #24]
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	429a      	cmp	r2, r3
 8002378:	dbce      	blt.n	8002318 <maxim_remove_close_peaks+0x3a>
    for ( i = -1; i < *pn_npks; i++ ){
 800237a:	69fb      	ldr	r3, [r7, #28]
 800237c:	3301      	adds	r3, #1
 800237e:	61fb      	str	r3, [r7, #28]
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	69fa      	ldr	r2, [r7, #28]
 8002386:	429a      	cmp	r2, r3
 8002388:	dbbb      	blt.n	8002302 <maxim_remove_close_peaks+0x24>
        }
    }

    // Resort indices longo ascending order
    maxim_sort_ascend( pn_locs, *pn_npks );
 800238a:	68bb      	ldr	r3, [r7, #8]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4619      	mov	r1, r3
 8002390:	68f8      	ldr	r0, [r7, #12]
 8002392:	f000 f804 	bl	800239e <maxim_sort_ascend>
}
 8002396:	bf00      	nop
 8002398:	3720      	adds	r7, #32
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}

0800239e <maxim_sort_ascend>:
* \par          Details
*               Sort array in ascending order (insertion sort algorithm)
*
* \retval       None
*/
{
 800239e:	b480      	push	{r7}
 80023a0:	b087      	sub	sp, #28
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	6078      	str	r0, [r7, #4]
 80023a6:	6039      	str	r1, [r7, #0]
    int32_t i, j, n_temp;
    for (i = 1; i < n_size; i++) {
 80023a8:	2301      	movs	r3, #1
 80023aa:	617b      	str	r3, [r7, #20]
 80023ac:	e02f      	b.n	800240e <maxim_sort_ascend+0x70>
        n_temp = pn_x[i];
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	009b      	lsls	r3, r3, #2
 80023b2:	687a      	ldr	r2, [r7, #4]
 80023b4:	4413      	add	r3, r2
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	60fb      	str	r3, [r7, #12]
        for (j = i; j > 0 && n_temp < pn_x[j-1]; j--)
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	613b      	str	r3, [r7, #16]
 80023be:	e00f      	b.n	80023e0 <maxim_sort_ascend+0x42>
            pn_x[j] = pn_x[j-1];
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80023c6:	3b01      	subs	r3, #1
 80023c8:	009b      	lsls	r3, r3, #2
 80023ca:	687a      	ldr	r2, [r7, #4]
 80023cc:	441a      	add	r2, r3
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	009b      	lsls	r3, r3, #2
 80023d2:	6879      	ldr	r1, [r7, #4]
 80023d4:	440b      	add	r3, r1
 80023d6:	6812      	ldr	r2, [r2, #0]
 80023d8:	601a      	str	r2, [r3, #0]
        for (j = i; j > 0 && n_temp < pn_x[j-1]; j--)
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	3b01      	subs	r3, #1
 80023de:	613b      	str	r3, [r7, #16]
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	dd0a      	ble.n	80023fc <maxim_sort_ascend+0x5e>
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80023ec:	3b01      	subs	r3, #1
 80023ee:	009b      	lsls	r3, r3, #2
 80023f0:	687a      	ldr	r2, [r7, #4]
 80023f2:	4413      	add	r3, r2
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	68fa      	ldr	r2, [r7, #12]
 80023f8:	429a      	cmp	r2, r3
 80023fa:	dbe1      	blt.n	80023c0 <maxim_sort_ascend+0x22>
        pn_x[j] = n_temp;
 80023fc:	693b      	ldr	r3, [r7, #16]
 80023fe:	009b      	lsls	r3, r3, #2
 8002400:	687a      	ldr	r2, [r7, #4]
 8002402:	4413      	add	r3, r2
 8002404:	68fa      	ldr	r2, [r7, #12]
 8002406:	601a      	str	r2, [r3, #0]
    for (i = 1; i < n_size; i++) {
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	3301      	adds	r3, #1
 800240c:	617b      	str	r3, [r7, #20]
 800240e:	697a      	ldr	r2, [r7, #20]
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	429a      	cmp	r2, r3
 8002414:	dbcb      	blt.n	80023ae <maxim_sort_ascend+0x10>
    }
}
 8002416:	bf00      	nop
 8002418:	bf00      	nop
 800241a:	371c      	adds	r7, #28
 800241c:	46bd      	mov	sp, r7
 800241e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002422:	4770      	bx	lr

08002424 <maxim_sort_indices_descend>:
* \par          Details
*               Sort indices according to descending order (insertion sort algorithm)
*
* \retval       None
*/
{
 8002424:	b480      	push	{r7}
 8002426:	b089      	sub	sp, #36	; 0x24
 8002428:	af00      	add	r7, sp, #0
 800242a:	60f8      	str	r0, [r7, #12]
 800242c:	60b9      	str	r1, [r7, #8]
 800242e:	607a      	str	r2, [r7, #4]
    int32_t i, j, n_temp;
    for (i = 1; i < n_size; i++) {
 8002430:	2301      	movs	r3, #1
 8002432:	61fb      	str	r3, [r7, #28]
 8002434:	e037      	b.n	80024a6 <maxim_sort_indices_descend+0x82>
        n_temp = pn_indx[i];
 8002436:	69fb      	ldr	r3, [r7, #28]
 8002438:	009b      	lsls	r3, r3, #2
 800243a:	68ba      	ldr	r2, [r7, #8]
 800243c:	4413      	add	r3, r2
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	617b      	str	r3, [r7, #20]
        for (j = i; j > 0 && pn_x[n_temp] > pn_x[pn_indx[j-1]]; j--)
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	61bb      	str	r3, [r7, #24]
 8002446:	e00f      	b.n	8002468 <maxim_sort_indices_descend+0x44>
            pn_indx[j] = pn_indx[j-1];
 8002448:	69bb      	ldr	r3, [r7, #24]
 800244a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800244e:	3b01      	subs	r3, #1
 8002450:	009b      	lsls	r3, r3, #2
 8002452:	68ba      	ldr	r2, [r7, #8]
 8002454:	441a      	add	r2, r3
 8002456:	69bb      	ldr	r3, [r7, #24]
 8002458:	009b      	lsls	r3, r3, #2
 800245a:	68b9      	ldr	r1, [r7, #8]
 800245c:	440b      	add	r3, r1
 800245e:	6812      	ldr	r2, [r2, #0]
 8002460:	601a      	str	r2, [r3, #0]
        for (j = i; j > 0 && pn_x[n_temp] > pn_x[pn_indx[j-1]]; j--)
 8002462:	69bb      	ldr	r3, [r7, #24]
 8002464:	3b01      	subs	r3, #1
 8002466:	61bb      	str	r3, [r7, #24]
 8002468:	69bb      	ldr	r3, [r7, #24]
 800246a:	2b00      	cmp	r3, #0
 800246c:	dd12      	ble.n	8002494 <maxim_sort_indices_descend+0x70>
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	009b      	lsls	r3, r3, #2
 8002472:	68fa      	ldr	r2, [r7, #12]
 8002474:	4413      	add	r3, r2
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	69bb      	ldr	r3, [r7, #24]
 800247a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800247e:	3b01      	subs	r3, #1
 8002480:	009b      	lsls	r3, r3, #2
 8002482:	68b9      	ldr	r1, [r7, #8]
 8002484:	440b      	add	r3, r1
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	009b      	lsls	r3, r3, #2
 800248a:	68f9      	ldr	r1, [r7, #12]
 800248c:	440b      	add	r3, r1
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	429a      	cmp	r2, r3
 8002492:	dcd9      	bgt.n	8002448 <maxim_sort_indices_descend+0x24>
        pn_indx[j] = n_temp;
 8002494:	69bb      	ldr	r3, [r7, #24]
 8002496:	009b      	lsls	r3, r3, #2
 8002498:	68ba      	ldr	r2, [r7, #8]
 800249a:	4413      	add	r3, r2
 800249c:	697a      	ldr	r2, [r7, #20]
 800249e:	601a      	str	r2, [r3, #0]
    for (i = 1; i < n_size; i++) {
 80024a0:	69fb      	ldr	r3, [r7, #28]
 80024a2:	3301      	adds	r3, #1
 80024a4:	61fb      	str	r3, [r7, #28]
 80024a6:	69fa      	ldr	r2, [r7, #28]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	429a      	cmp	r2, r3
 80024ac:	dbc3      	blt.n	8002436 <maxim_sort_indices_descend+0x12>
    }
}
 80024ae:	bf00      	nop
 80024b0:	bf00      	nop
 80024b2:	3724      	adds	r7, #36	; 0x24
 80024b4:	46bd      	mov	sp, r7
 80024b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ba:	4770      	bx	lr

080024bc <HAL_GPIO_EXTI_Callback>:
		LED2_Pin,
		LED3_Pin,
		LED4_Pin
};
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b082      	sub	sp, #8
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	4603      	mov	r3, r0
 80024c4:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == INT_Pin)
 80024c6:	88fb      	ldrh	r3, [r7, #6]
 80024c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024cc:	d101      	bne.n	80024d2 <HAL_GPIO_EXTI_Callback+0x16>
	{
		Max30102_InterruptCallback();
 80024ce:	f7fe fd83 	bl	8000fd8 <Max30102_InterruptCallback>
	}
}
 80024d2:	bf00      	nop
 80024d4:	3708      	adds	r7, #8
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	0000      	movs	r0, r0
 80024dc:	0000      	movs	r0, r0
	...

080024e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b0bc      	sub	sp, #240	; 0xf0
 80024e4:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */
	char uart_buf[50];
	int uart_buf_len;
	state = 0;
 80024e6:	4b9a      	ldr	r3, [pc, #616]	; (8002750 <main+0x270>)
 80024e8:	2200      	movs	r2, #0
 80024ea:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80024ec:	f001 f8c2 	bl	8003674 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80024f0:	f000 fad4 	bl	8002a9c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80024f4:	f000 fc86 	bl	8002e04 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80024f8:	f000 fc5a 	bl	8002db0 <MX_USART2_UART_Init>
  MX_TIM4_Init();
 80024fc:	f000 fbe6 	bl	8002ccc <MX_TIM4_Init>
  MX_ADC1_Init();
 8002500:	f000 fb36 	bl	8002b70 <MX_ADC1_Init>
  MX_TIM10_Init();
 8002504:	f000 fc30 	bl	8002d68 <MX_TIM10_Init>
  MX_I2C1_Init();
 8002508:	f000 fb84 	bl	8002c14 <MX_I2C1_Init>
  MX_I2C2_Init();
 800250c:	f000 fbb0 	bl	8002c70 <MX_I2C2_Init>
	uint8_t data_read1[4];
	int16_t aux;
	int16_t aux1;


	uart_buf_len = sprintf(uart_buf, "Timer\r\n");
 8002510:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002514:	498f      	ldr	r1, [pc, #572]	; (8002754 <main+0x274>)
 8002516:	4618      	mov	r0, r3
 8002518:	f004 fb2a 	bl	8006b70 <siprintf>
 800251c:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
	HAL_UART_Transmit(&huart2,(uint8_t *)uart_buf, uart_buf_len, 100);
 8002520:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002524:	b29a      	uxth	r2, r3
 8002526:	f107 0184 	add.w	r1, r7, #132	; 0x84
 800252a:	2364      	movs	r3, #100	; 0x64
 800252c:	488a      	ldr	r0, [pc, #552]	; (8002758 <main+0x278>)
 800252e:	f003 ff64 	bl	80063fa <HAL_UART_Transmit>

	//Start timer
	HAL_TIM_Base_Start(&htim10);
 8002532:	488a      	ldr	r0, [pc, #552]	; (800275c <main+0x27c>)
 8002534:	f003 fc6a 	bl	8005e0c <HAL_TIM_Base_Start>

	HAL_ADC_Start(&hadc1);
 8002538:	4889      	ldr	r0, [pc, #548]	; (8002760 <main+0x280>)
 800253a:	f001 f975 	bl	8003828 <HAL_ADC_Start>

	uint16_t timer_val;


	int nb_beat=0;
 800253e:	2300      	movs	r3, #0
 8002540:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	int ang_sensor_old=0;
 8002544:	2300      	movs	r3, #0
 8002546:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	int ang_sensor;

	int ok=0;
 800254a:	2300      	movs	r3, #0
 800254c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	int BPM_list[30];

	if (Max30102_Init(&hi2c2) == MAX30102_ERROR) {
 8002550:	4884      	ldr	r0, [pc, #528]	; (8002764 <main+0x284>)
 8002552:	f7ff f87f 	bl	8001654 <Max30102_Init>
 8002556:	4603      	mov	r3, r0
 8002558:	2b00      	cmp	r3, #0
 800255a:	d113      	bne.n	8002584 <main+0xa4>
		uart_buf_len = sprintf(uart_buf, "Initialize max30102 not working!");
 800255c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002560:	4981      	ldr	r1, [pc, #516]	; (8002768 <main+0x288>)
 8002562:	4618      	mov	r0, r3
 8002564:	f004 fb04 	bl	8006b70 <siprintf>
 8002568:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
		HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);
 800256c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002570:	b29a      	uxth	r2, r3
 8002572:	f107 0184 	add.w	r1, r7, #132	; 0x84
 8002576:	2364      	movs	r3, #100	; 0x64
 8002578:	4877      	ldr	r0, [pc, #476]	; (8002758 <main+0x278>)
 800257a:	f003 ff3e 	bl	80063fa <HAL_UART_Transmit>
		exit(0);
 800257e:	2000      	movs	r0, #0
 8002580:	f004 fab6 	bl	8006af0 <exit>
	}
	uart_buf_len = sprintf(uart_buf, "Initialized max30102 successfully");
 8002584:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002588:	4978      	ldr	r1, [pc, #480]	; (800276c <main+0x28c>)
 800258a:	4618      	mov	r0, r3
 800258c:	f004 faf0 	bl	8006b70 <siprintf>
 8002590:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
	HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);
 8002594:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002598:	b29a      	uxth	r2, r3
 800259a:	f107 0184 	add.w	r1, r7, #132	; 0x84
 800259e:	2364      	movs	r3, #100	; 0x64
 80025a0:	486d      	ldr	r0, [pc, #436]	; (8002758 <main+0x278>)
 80025a2:	f003 ff2a 	bl	80063fa <HAL_UART_Transmit>
	int curint = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10);
 80025a6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80025aa:	4871      	ldr	r0, [pc, #452]	; (8002770 <main+0x290>)
 80025ac:	f001 ff3c 	bl	8004428 <HAL_GPIO_ReadPin>
 80025b0:	4603      	mov	r3, r0
 80025b2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    buttonInput[1] = HAL_GPIO_ReadPin(PressButton_GPIO_Port, PressButton_Pin);
 80025b6:	2180      	movs	r1, #128	; 0x80
 80025b8:	486e      	ldr	r0, [pc, #440]	; (8002774 <main+0x294>)
 80025ba:	f001 ff35 	bl	8004428 <HAL_GPIO_ReadPin>
 80025be:	4603      	mov	r3, r0
 80025c0:	b21a      	sxth	r2, r3
 80025c2:	4b6d      	ldr	r3, [pc, #436]	; (8002778 <main+0x298>)
 80025c4:	805a      	strh	r2, [r3, #2]

    setLED();
 80025c6:	f000 fd95 	bl	80030f4 <setLED>

	switch(state)
 80025ca:	4b61      	ldr	r3, [pc, #388]	; (8002750 <main+0x270>)
 80025cc:	781b      	ldrb	r3, [r3, #0]
 80025ce:	2b03      	cmp	r3, #3
 80025d0:	f200 81c1 	bhi.w	8002956 <main+0x476>
 80025d4:	a201      	add	r2, pc, #4	; (adr r2, 80025dc <main+0xfc>)
 80025d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025da:	bf00      	nop
 80025dc:	080025ed 	.word	0x080025ed
 80025e0:	08002607 	.word	0x08002607
 80025e4:	080026f1 	.word	0x080026f1
 80025e8:	080028df 	.word	0x080028df
	{
		case 0:
			if(isButtonHold())
 80025ec:	f000 fdd4 	bl	8003198 <isButtonHold>
 80025f0:	4603      	mov	r3, r0
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	f000 8200 	beq.w	80029f8 <main+0x518>
			{
				height = getHeight(200);
 80025f8:	20c8      	movs	r0, #200	; 0xc8
 80025fa:	f000 fcf1 	bl	8002fe0 <getHeight>
 80025fe:	4603      	mov	r3, r0
 8002600:	4a5e      	ldr	r2, [pc, #376]	; (800277c <main+0x29c>)
 8002602:	6013      	str	r3, [r2, #0]
			}
			break;
 8002604:	e1f8      	b.n	80029f8 <main+0x518>
		case 1:
			if(isButtonHold())
 8002606:	f000 fdc7 	bl	8003198 <isButtonHold>
 800260a:	4603      	mov	r3, r0
 800260c:	2b00      	cmp	r3, #0
 800260e:	f000 81f5 	beq.w	80029fc <main+0x51c>
			{
				HAL_I2C_Mem_Read(&hi2c1,(0x5A<<1), 0x06, 1, (uint8_t *)data_read, 2, 100);
 8002612:	2364      	movs	r3, #100	; 0x64
 8002614:	9302      	str	r3, [sp, #8]
 8002616:	2302      	movs	r3, #2
 8002618:	9301      	str	r3, [sp, #4]
 800261a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800261e:	9300      	str	r3, [sp, #0]
 8002620:	2301      	movs	r3, #1
 8002622:	2206      	movs	r2, #6
 8002624:	21b4      	movs	r1, #180	; 0xb4
 8002626:	4856      	ldr	r0, [pc, #344]	; (8002780 <main+0x2a0>)
 8002628:	f002 f986 	bl	8004938 <HAL_I2C_Mem_Read>

				aux = (int16_t) ((data_read[1] << 8) | data_read[0]);
 800262c:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 8002630:	021b      	lsls	r3, r3, #8
 8002632:	b21a      	sxth	r2, r3
 8002634:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 8002638:	b21b      	sxth	r3, r3
 800263a:	4313      	orrs	r3, r2
 800263c:	f8a7 30ba 	strh.w	r3, [r7, #186]	; 0xba
				ambient_temperature = aux * 0.02 - 273.15;
 8002640:	f9b7 30ba 	ldrsh.w	r3, [r7, #186]	; 0xba
 8002644:	4618      	mov	r0, r3
 8002646:	f7fd ff6d 	bl	8000524 <__aeabi_i2d>
 800264a:	a33d      	add	r3, pc, #244	; (adr r3, 8002740 <main+0x260>)
 800264c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002650:	f7fd ffd2 	bl	80005f8 <__aeabi_dmul>
 8002654:	4602      	mov	r2, r0
 8002656:	460b      	mov	r3, r1
 8002658:	4610      	mov	r0, r2
 800265a:	4619      	mov	r1, r3
 800265c:	a33a      	add	r3, pc, #232	; (adr r3, 8002748 <main+0x268>)
 800265e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002662:	f7fd fe11 	bl	8000288 <__aeabi_dsub>
 8002666:	4602      	mov	r2, r0
 8002668:	460b      	mov	r3, r1
 800266a:	4610      	mov	r0, r2
 800266c:	4619      	mov	r1, r3
 800266e:	f7fe f9d5 	bl	8000a1c <__aeabi_d2iz>
 8002672:	4603      	mov	r3, r0
 8002674:	b21a      	sxth	r2, r3
 8002676:	4b43      	ldr	r3, [pc, #268]	; (8002784 <main+0x2a4>)
 8002678:	801a      	strh	r2, [r3, #0]

				HAL_Delay(100);
 800267a:	2064      	movs	r0, #100	; 0x64
 800267c:	f001 f86c 	bl	8003758 <HAL_Delay>

				HAL_I2C_Mem_Read(&hi2c1,(0x5A<<1), 0x07, 1, (uint8_t *)data_read1, 2, 100);
 8002680:	2364      	movs	r3, #100	; 0x64
 8002682:	9302      	str	r3, [sp, #8]
 8002684:	2302      	movs	r3, #2
 8002686:	9301      	str	r3, [sp, #4]
 8002688:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800268c:	9300      	str	r3, [sp, #0]
 800268e:	2301      	movs	r3, #1
 8002690:	2207      	movs	r2, #7
 8002692:	21b4      	movs	r1, #180	; 0xb4
 8002694:	483a      	ldr	r0, [pc, #232]	; (8002780 <main+0x2a0>)
 8002696:	f002 f94f 	bl	8004938 <HAL_I2C_Mem_Read>

				aux1 = (int16_t) ((data_read1[1] << 8) | data_read1[0]);
 800269a:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 800269e:	021b      	lsls	r3, r3, #8
 80026a0:	b21a      	sxth	r2, r3
 80026a2:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 80026a6:	b21b      	sxth	r3, r3
 80026a8:	4313      	orrs	r3, r2
 80026aa:	f8a7 30b8 	strh.w	r3, [r7, #184]	; 0xb8
				object_temperature = aux1 * 0.02 - 273.15;
 80026ae:	f9b7 30b8 	ldrsh.w	r3, [r7, #184]	; 0xb8
 80026b2:	4618      	mov	r0, r3
 80026b4:	f7fd ff36 	bl	8000524 <__aeabi_i2d>
 80026b8:	a321      	add	r3, pc, #132	; (adr r3, 8002740 <main+0x260>)
 80026ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026be:	f7fd ff9b 	bl	80005f8 <__aeabi_dmul>
 80026c2:	4602      	mov	r2, r0
 80026c4:	460b      	mov	r3, r1
 80026c6:	4610      	mov	r0, r2
 80026c8:	4619      	mov	r1, r3
 80026ca:	a31f      	add	r3, pc, #124	; (adr r3, 8002748 <main+0x268>)
 80026cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026d0:	f7fd fdda 	bl	8000288 <__aeabi_dsub>
 80026d4:	4602      	mov	r2, r0
 80026d6:	460b      	mov	r3, r1
 80026d8:	4610      	mov	r0, r2
 80026da:	4619      	mov	r1, r3
 80026dc:	f7fe f99e 	bl	8000a1c <__aeabi_d2iz>
 80026e0:	4603      	mov	r3, r0
 80026e2:	b21a      	sxth	r2, r3
 80026e4:	4b28      	ldr	r3, [pc, #160]	; (8002788 <main+0x2a8>)
 80026e6:	801a      	strh	r2, [r3, #0]

				HAL_Delay(100);
 80026e8:	2064      	movs	r0, #100	; 0x64
 80026ea:	f001 f835 	bl	8003758 <HAL_Delay>
//				sprintf(data1,"\f Object = %d \n\r", ambient_temperature1);
//
//				HAL_UART_Transmit(&huart2, (uint8_t*)data, strlen(data), 1000);
//				HAL_UART_Transmit(&huart2, (uint8_t*)data1, strlen(data1), 1000);
			}
			break;
 80026ee:	e185      	b.n	80029fc <main+0x51c>
		case 2:
			{
				HAL_ADC_Start(&hadc1);
 80026f0:	481b      	ldr	r0, [pc, #108]	; (8002760 <main+0x280>)
 80026f2:	f001 f899 	bl	8003828 <HAL_ADC_Start>
				if(BPM_CNT < BPM_N)
 80026f6:	4b25      	ldr	r3, [pc, #148]	; (800278c <main+0x2ac>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	220a      	movs	r2, #10
 80026fc:	4293      	cmp	r3, r2
 80026fe:	f280 80b6 	bge.w	800286e <main+0x38e>
				{
					if (HAL_ADC_PollForConversion(&hadc1, 1000) == HAL_OK)
 8002702:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002706:	4816      	ldr	r0, [pc, #88]	; (8002760 <main+0x280>)
 8002708:	f001 f942 	bl	8003990 <HAL_ADC_PollForConversion>
 800270c:	4603      	mov	r3, r0
 800270e:	2b00      	cmp	r3, #0
 8002710:	f040 8176 	bne.w	8002a00 <main+0x520>
					{
						ang_sensor = HAL_ADC_GetValue(&hadc1);
 8002714:	4812      	ldr	r0, [pc, #72]	; (8002760 <main+0x280>)
 8002716:	f001 f9c6 	bl	8003aa6 <HAL_ADC_GetValue>
 800271a:	4603      	mov	r3, r0
 800271c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

						// Serial plotter debug
//						uart_buf_len = sprintf(uart_buf, "%d, %d \r\n", ang_sensor,ok);
//						HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);

						ok = (int) (ang_sensor>2100 && ang_sensor>ang_sensor_old);
 8002720:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002724:	f640 0234 	movw	r2, #2100	; 0x834
 8002728:	4293      	cmp	r3, r2
 800272a:	dd31      	ble.n	8002790 <main+0x2b0>
 800272c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002730:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002734:	429a      	cmp	r2, r3
 8002736:	dd2b      	ble.n	8002790 <main+0x2b0>
 8002738:	2301      	movs	r3, #1
 800273a:	e02a      	b.n	8002792 <main+0x2b2>
 800273c:	f3af 8000 	nop.w
 8002740:	47ae147b 	.word	0x47ae147b
 8002744:	3f947ae1 	.word	0x3f947ae1
 8002748:	66666666 	.word	0x66666666
 800274c:	40711266 	.word	0x40711266
 8002750:	20002cac 	.word	0x20002cac
 8002754:	08007464 	.word	0x08007464
 8002758:	20002c64 	.word	0x20002c64
 800275c:	20002c1c 	.word	0x20002c1c
 8002760:	20002ae4 	.word	0x20002ae4
 8002764:	20002b80 	.word	0x20002b80
 8002768:	0800746c 	.word	0x0800746c
 800276c:	08007490 	.word	0x08007490
 8002770:	40020000 	.word	0x40020000
 8002774:	40020800 	.word	0x40020800
 8002778:	20002cc0 	.word	0x20002cc0
 800277c:	20002cb8 	.word	0x20002cb8
 8002780:	20002b2c 	.word	0x20002b2c
 8002784:	20002cae 	.word	0x20002cae
 8002788:	20002cb0 	.word	0x20002cb0
 800278c:	20002cc8 	.word	0x20002cc8
 8002790:	2300      	movs	r3, #0
 8002792:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

						if(nb_beat==0 && ok==1)
 8002796:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800279a:	2b00      	cmp	r3, #0
 800279c:	d10b      	bne.n	80027b6 <main+0x2d6>
 800279e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80027a2:	2b01      	cmp	r3, #1
 80027a4:	d107      	bne.n	80027b6 <main+0x2d6>
						{
							timer_val=__HAL_TIM_GET_COUNTER(&htim10);
 80027a6:	4ba9      	ldr	r3, [pc, #676]	; (8002a4c <main+0x56c>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ac:	f8a7 30de 	strh.w	r3, [r7, #222]	; 0xde
							nb_beat=1;
 80027b0:	2301      	movs	r3, #1
 80027b2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
						}
						if(nb_beat==1 && ok==0)
 80027b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80027ba:	2b01      	cmp	r3, #1
 80027bc:	d152      	bne.n	8002864 <main+0x384>
 80027be:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d14e      	bne.n	8002864 <main+0x384>
						{
							timer_val = __HAL_TIM_GET_COUNTER(&htim10) - timer_val;
 80027c6:	4ba1      	ldr	r3, [pc, #644]	; (8002a4c <main+0x56c>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027cc:	b29a      	uxth	r2, r3
 80027ce:	f8b7 30de 	ldrh.w	r3, [r7, #222]	; 0xde
 80027d2:	1ad3      	subs	r3, r2, r3
 80027d4:	f8a7 30de 	strh.w	r3, [r7, #222]	; 0xde

							nb_beat=0;
 80027d8:	2300      	movs	r3, #0
 80027da:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8

							BPM = (int) ((timer_val/1000.0)*60);
 80027de:	f8b7 30de 	ldrh.w	r3, [r7, #222]	; 0xde
 80027e2:	4618      	mov	r0, r3
 80027e4:	f7fd fe9e 	bl	8000524 <__aeabi_i2d>
 80027e8:	f04f 0200 	mov.w	r2, #0
 80027ec:	4b98      	ldr	r3, [pc, #608]	; (8002a50 <main+0x570>)
 80027ee:	f7fe f82d 	bl	800084c <__aeabi_ddiv>
 80027f2:	4602      	mov	r2, r0
 80027f4:	460b      	mov	r3, r1
 80027f6:	4610      	mov	r0, r2
 80027f8:	4619      	mov	r1, r3
 80027fa:	f04f 0200 	mov.w	r2, #0
 80027fe:	4b95      	ldr	r3, [pc, #596]	; (8002a54 <main+0x574>)
 8002800:	f7fd fefa 	bl	80005f8 <__aeabi_dmul>
 8002804:	4602      	mov	r2, r0
 8002806:	460b      	mov	r3, r1
 8002808:	4610      	mov	r0, r2
 800280a:	4619      	mov	r1, r3
 800280c:	f7fe f906 	bl	8000a1c <__aeabi_d2iz>
 8002810:	4603      	mov	r3, r0
 8002812:	4a91      	ldr	r2, [pc, #580]	; (8002a58 <main+0x578>)
 8002814:	6013      	str	r3, [r2, #0]

							if(BPM>=40 && BPM<=120)
 8002816:	4b90      	ldr	r3, [pc, #576]	; (8002a58 <main+0x578>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	2b27      	cmp	r3, #39	; 0x27
 800281c:	dd22      	ble.n	8002864 <main+0x384>
 800281e:	4b8e      	ldr	r3, [pc, #568]	; (8002a58 <main+0x578>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	2b78      	cmp	r3, #120	; 0x78
 8002824:	dc1e      	bgt.n	8002864 <main+0x384>
							{
								BPM_list[BPM_CNT++] = BPM;
 8002826:	4b8d      	ldr	r3, [pc, #564]	; (8002a5c <main+0x57c>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	1c5a      	adds	r2, r3, #1
 800282c:	498b      	ldr	r1, [pc, #556]	; (8002a5c <main+0x57c>)
 800282e:	600a      	str	r2, [r1, #0]
 8002830:	4a89      	ldr	r2, [pc, #548]	; (8002a58 <main+0x578>)
 8002832:	6812      	ldr	r2, [r2, #0]
 8002834:	009b      	lsls	r3, r3, #2
 8002836:	33e0      	adds	r3, #224	; 0xe0
 8002838:	443b      	add	r3, r7
 800283a:	f843 2cdc 	str.w	r2, [r3, #-220]
								// CubeIDE Serial Monitor
								uart_buf_len = sprintf(uart_buf, "%d \r\n", BPM);
 800283e:	4b86      	ldr	r3, [pc, #536]	; (8002a58 <main+0x578>)
 8002840:	681a      	ldr	r2, [r3, #0]
 8002842:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002846:	4986      	ldr	r1, [pc, #536]	; (8002a60 <main+0x580>)
 8002848:	4618      	mov	r0, r3
 800284a:	f004 f991 	bl	8006b70 <siprintf>
 800284e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
								HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);
 8002852:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002856:	b29a      	uxth	r2, r3
 8002858:	f107 0184 	add.w	r1, r7, #132	; 0x84
 800285c:	2364      	movs	r3, #100	; 0x64
 800285e:	4881      	ldr	r0, [pc, #516]	; (8002a64 <main+0x584>)
 8002860:	f003 fdcb 	bl	80063fa <HAL_UART_Transmit>
							}
						}
						ang_sensor = ang_sensor_old;
 8002864:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002868:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
				{
					uart_buf_len = sprintf(uart_buf, "Heart Rate Finished \r\n");
					HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);
				}
			}
			break;
 800286c:	e0c8      	b.n	8002a00 <main+0x520>
				else if (BPM_final == 0)
 800286e:	4b7e      	ldr	r3, [pc, #504]	; (8002a68 <main+0x588>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d121      	bne.n	80028ba <main+0x3da>
					for (int j = 0;j < BPM_N; j++)
 8002876:	2300      	movs	r3, #0
 8002878:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800287c:	e010      	b.n	80028a0 <main+0x3c0>
						BPM_final += BPM_list[j];
 800287e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002882:	009b      	lsls	r3, r3, #2
 8002884:	33e0      	adds	r3, #224	; 0xe0
 8002886:	443b      	add	r3, r7
 8002888:	f853 2cdc 	ldr.w	r2, [r3, #-220]
 800288c:	4b76      	ldr	r3, [pc, #472]	; (8002a68 <main+0x588>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4413      	add	r3, r2
 8002892:	4a75      	ldr	r2, [pc, #468]	; (8002a68 <main+0x588>)
 8002894:	6013      	str	r3, [r2, #0]
					for (int j = 0;j < BPM_N; j++)
 8002896:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800289a:	3301      	adds	r3, #1
 800289c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80028a0:	220a      	movs	r2, #10
 80028a2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80028a6:	4293      	cmp	r3, r2
 80028a8:	dbe9      	blt.n	800287e <main+0x39e>
					BPM_final /= BPM_N;
 80028aa:	4b6f      	ldr	r3, [pc, #444]	; (8002a68 <main+0x588>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	220a      	movs	r2, #10
 80028b0:	fb93 f3f2 	sdiv	r3, r3, r2
 80028b4:	4a6c      	ldr	r2, [pc, #432]	; (8002a68 <main+0x588>)
 80028b6:	6013      	str	r3, [r2, #0]
			break;
 80028b8:	e0a2      	b.n	8002a00 <main+0x520>
					uart_buf_len = sprintf(uart_buf, "Heart Rate Finished \r\n");
 80028ba:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80028be:	496b      	ldr	r1, [pc, #428]	; (8002a6c <main+0x58c>)
 80028c0:	4618      	mov	r0, r3
 80028c2:	f004 f955 	bl	8006b70 <siprintf>
 80028c6:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
					HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);
 80028ca:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80028ce:	b29a      	uxth	r2, r3
 80028d0:	f107 0184 	add.w	r1, r7, #132	; 0x84
 80028d4:	2364      	movs	r3, #100	; 0x64
 80028d6:	4863      	ldr	r0, [pc, #396]	; (8002a64 <main+0x584>)
 80028d8:	f003 fd8f 	bl	80063fa <HAL_UART_Transmit>
			break;
 80028dc:	e090      	b.n	8002a00 <main+0x520>
		case 3:
			Max30102_Task();
 80028de:	f7fe fe03 	bl	80014e8 <Max30102_Task>

			int curr_spo2 = Max30102_GetSpO2Value();
 80028e2:	f7fe fdf5 	bl	80014d0 <Max30102_GetSpO2Value>
 80028e6:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0
			uart_buf_len = sprintf(uart_buf, "SpO2: %d \r\n", curr_spo2);
 80028ea:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80028ee:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80028f2:	495f      	ldr	r1, [pc, #380]	; (8002a70 <main+0x590>)
 80028f4:	4618      	mov	r0, r3
 80028f6:	f004 f93b 	bl	8006b70 <siprintf>
 80028fa:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
			if(50 <= curr_spo2 && curr_spo2 <= 100) {
 80028fe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002902:	2b31      	cmp	r3, #49	; 0x31
 8002904:	dd07      	ble.n	8002916 <main+0x436>
 8002906:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800290a:	2b64      	cmp	r3, #100	; 0x64
 800290c:	dc03      	bgt.n	8002916 <main+0x436>
				spo2 = curr_spo2;
 800290e:	4a59      	ldr	r2, [pc, #356]	; (8002a74 <main+0x594>)
 8002910:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002914:	6013      	str	r3, [r2, #0]
			}

			HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);
 8002916:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800291a:	b29a      	uxth	r2, r3
 800291c:	f107 0184 	add.w	r1, r7, #132	; 0x84
 8002920:	2364      	movs	r3, #100	; 0x64
 8002922:	4850      	ldr	r0, [pc, #320]	; (8002a64 <main+0x584>)
 8002924:	f003 fd69 	bl	80063fa <HAL_UART_Transmit>
			if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9) == GPIO_PIN_RESET && curint == GPIO_PIN_SET) {
 8002928:	f44f 7100 	mov.w	r1, #512	; 0x200
 800292c:	4852      	ldr	r0, [pc, #328]	; (8002a78 <main+0x598>)
 800292e:	f001 fd7b 	bl	8004428 <HAL_GPIO_ReadPin>
 8002932:	4603      	mov	r3, r0
 8002934:	2b00      	cmp	r3, #0
 8002936:	d105      	bne.n	8002944 <main+0x464>
 8002938:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800293c:	2b01      	cmp	r3, #1
 800293e:	d101      	bne.n	8002944 <main+0x464>
				Max30102_InterruptCallback();
 8002940:	f7fe fb4a 	bl	8000fd8 <Max30102_InterruptCallback>
			}
			curint = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9);
 8002944:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002948:	484b      	ldr	r0, [pc, #300]	; (8002a78 <main+0x598>)
 800294a:	f001 fd6d 	bl	8004428 <HAL_GPIO_ReadPin>
 800294e:	4603      	mov	r3, r0
 8002950:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
			break;
 8002954:	e055      	b.n	8002a02 <main+0x522>
		default:
			uart_buf_len = sprintf(uart_buf, "Height: %d m\r\n", height);
 8002956:	4b49      	ldr	r3, [pc, #292]	; (8002a7c <main+0x59c>)
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800295e:	4948      	ldr	r1, [pc, #288]	; (8002a80 <main+0x5a0>)
 8002960:	4618      	mov	r0, r3
 8002962:	f004 f905 	bl	8006b70 <siprintf>
 8002966:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
			HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);
 800296a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800296e:	b29a      	uxth	r2, r3
 8002970:	f107 0184 	add.w	r1, r7, #132	; 0x84
 8002974:	2364      	movs	r3, #100	; 0x64
 8002976:	483b      	ldr	r0, [pc, #236]	; (8002a64 <main+0x584>)
 8002978:	f003 fd3f 	bl	80063fa <HAL_UART_Transmit>
			uart_buf_len = sprintf(uart_buf, "Body Temperature: %d c\r\n", object_temperature);
 800297c:	4b41      	ldr	r3, [pc, #260]	; (8002a84 <main+0x5a4>)
 800297e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002982:	461a      	mov	r2, r3
 8002984:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002988:	493f      	ldr	r1, [pc, #252]	; (8002a88 <main+0x5a8>)
 800298a:	4618      	mov	r0, r3
 800298c:	f004 f8f0 	bl	8006b70 <siprintf>
 8002990:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
			HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);
 8002994:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002998:	b29a      	uxth	r2, r3
 800299a:	f107 0184 	add.w	r1, r7, #132	; 0x84
 800299e:	2364      	movs	r3, #100	; 0x64
 80029a0:	4830      	ldr	r0, [pc, #192]	; (8002a64 <main+0x584>)
 80029a2:	f003 fd2a 	bl	80063fa <HAL_UART_Transmit>
			uart_buf_len = sprintf(uart_buf, "Heart Rate: %d BPM\r\n", BPM_final);
 80029a6:	4b30      	ldr	r3, [pc, #192]	; (8002a68 <main+0x588>)
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80029ae:	4937      	ldr	r1, [pc, #220]	; (8002a8c <main+0x5ac>)
 80029b0:	4618      	mov	r0, r3
 80029b2:	f004 f8dd 	bl	8006b70 <siprintf>
 80029b6:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
			HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);
 80029ba:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80029be:	b29a      	uxth	r2, r3
 80029c0:	f107 0184 	add.w	r1, r7, #132	; 0x84
 80029c4:	2364      	movs	r3, #100	; 0x64
 80029c6:	4827      	ldr	r0, [pc, #156]	; (8002a64 <main+0x584>)
 80029c8:	f003 fd17 	bl	80063fa <HAL_UART_Transmit>
			uart_buf_len = sprintf(uart_buf, "Blood Oxygen: %d %\r\n", spo2);
 80029cc:	4b29      	ldr	r3, [pc, #164]	; (8002a74 <main+0x594>)
 80029ce:	681a      	ldr	r2, [r3, #0]
 80029d0:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80029d4:	492e      	ldr	r1, [pc, #184]	; (8002a90 <main+0x5b0>)
 80029d6:	4618      	mov	r0, r3
 80029d8:	f004 f8ca 	bl	8006b70 <siprintf>
 80029dc:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
			HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);
 80029e0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80029e4:	b29a      	uxth	r2, r3
 80029e6:	f107 0184 	add.w	r1, r7, #132	; 0x84
 80029ea:	2364      	movs	r3, #100	; 0x64
 80029ec:	481d      	ldr	r0, [pc, #116]	; (8002a64 <main+0x584>)
 80029ee:	f003 fd04 	bl	80063fa <HAL_UART_Transmit>
			exit(0);
 80029f2:	2000      	movs	r0, #0
 80029f4:	f004 f87c 	bl	8006af0 <exit>
			break;
 80029f8:	bf00      	nop
 80029fa:	e002      	b.n	8002a02 <main+0x522>
			break;
 80029fc:	bf00      	nop
 80029fe:	e000      	b.n	8002a02 <main+0x522>
			break;
 8002a00:	bf00      	nop
	}

	if(isButtonLiftUp() && (state != 2 || BPM_final != 0)) state += 1;
 8002a02:	f000 fbe3 	bl	80031cc <isButtonLiftUp>
 8002a06:	4603      	mov	r3, r0
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d00d      	beq.n	8002a28 <main+0x548>
 8002a0c:	4b21      	ldr	r3, [pc, #132]	; (8002a94 <main+0x5b4>)
 8002a0e:	781b      	ldrb	r3, [r3, #0]
 8002a10:	2b02      	cmp	r3, #2
 8002a12:	d103      	bne.n	8002a1c <main+0x53c>
 8002a14:	4b14      	ldr	r3, [pc, #80]	; (8002a68 <main+0x588>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d005      	beq.n	8002a28 <main+0x548>
 8002a1c:	4b1d      	ldr	r3, [pc, #116]	; (8002a94 <main+0x5b4>)
 8002a1e:	781b      	ldrb	r3, [r3, #0]
 8002a20:	3301      	adds	r3, #1
 8002a22:	b2da      	uxtb	r2, r3
 8002a24:	4b1b      	ldr	r3, [pc, #108]	; (8002a94 <main+0x5b4>)
 8002a26:	701a      	strb	r2, [r3, #0]

	if(state == 2) {
 8002a28:	4b1a      	ldr	r3, [pc, #104]	; (8002a94 <main+0x5b4>)
 8002a2a:	781b      	ldrb	r3, [r3, #0]
 8002a2c:	2b02      	cmp	r3, #2
 8002a2e:	d103      	bne.n	8002a38 <main+0x558>
		HAL_Delay(10);
 8002a30:	200a      	movs	r0, #10
 8002a32:	f000 fe91 	bl	8003758 <HAL_Delay>
 8002a36:	e002      	b.n	8002a3e <main+0x55e>
	}
	else {
		HAL_Delay(100);
 8002a38:	2064      	movs	r0, #100	; 0x64
 8002a3a:	f000 fe8d 	bl	8003758 <HAL_Delay>
	}

	buttonInput[0] = buttonInput[1];
 8002a3e:	4b16      	ldr	r3, [pc, #88]	; (8002a98 <main+0x5b8>)
 8002a40:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8002a44:	4b14      	ldr	r3, [pc, #80]	; (8002a98 <main+0x5b8>)
 8002a46:	801a      	strh	r2, [r3, #0]
    buttonInput[1] = HAL_GPIO_ReadPin(PressButton_GPIO_Port, PressButton_Pin);
 8002a48:	e5b5      	b.n	80025b6 <main+0xd6>
 8002a4a:	bf00      	nop
 8002a4c:	20002c1c 	.word	0x20002c1c
 8002a50:	408f4000 	.word	0x408f4000
 8002a54:	404e0000 	.word	0x404e0000
 8002a58:	20002cbc 	.word	0x20002cbc
 8002a5c:	20002cc8 	.word	0x20002cc8
 8002a60:	080074b4 	.word	0x080074b4
 8002a64:	20002c64 	.word	0x20002c64
 8002a68:	20002cc4 	.word	0x20002cc4
 8002a6c:	080074bc 	.word	0x080074bc
 8002a70:	080074d4 	.word	0x080074d4
 8002a74:	20002ccc 	.word	0x20002ccc
 8002a78:	40020000 	.word	0x40020000
 8002a7c:	20002cb8 	.word	0x20002cb8
 8002a80:	080074e0 	.word	0x080074e0
 8002a84:	20002cb0 	.word	0x20002cb0
 8002a88:	080074f0 	.word	0x080074f0
 8002a8c:	0800750c 	.word	0x0800750c
 8002a90:	08007524 	.word	0x08007524
 8002a94:	20002cac 	.word	0x20002cac
 8002a98:	20002cc0 	.word	0x20002cc0

08002a9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b094      	sub	sp, #80	; 0x50
 8002aa0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002aa2:	f107 0320 	add.w	r3, r7, #32
 8002aa6:	2230      	movs	r2, #48	; 0x30
 8002aa8:	2100      	movs	r1, #0
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f004 f858 	bl	8006b60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002ab0:	f107 030c 	add.w	r3, r7, #12
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	601a      	str	r2, [r3, #0]
 8002ab8:	605a      	str	r2, [r3, #4]
 8002aba:	609a      	str	r2, [r3, #8]
 8002abc:	60da      	str	r2, [r3, #12]
 8002abe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	60bb      	str	r3, [r7, #8]
 8002ac4:	4b28      	ldr	r3, [pc, #160]	; (8002b68 <SystemClock_Config+0xcc>)
 8002ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac8:	4a27      	ldr	r2, [pc, #156]	; (8002b68 <SystemClock_Config+0xcc>)
 8002aca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ace:	6413      	str	r3, [r2, #64]	; 0x40
 8002ad0:	4b25      	ldr	r3, [pc, #148]	; (8002b68 <SystemClock_Config+0xcc>)
 8002ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ad8:	60bb      	str	r3, [r7, #8]
 8002ada:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002adc:	2300      	movs	r3, #0
 8002ade:	607b      	str	r3, [r7, #4]
 8002ae0:	4b22      	ldr	r3, [pc, #136]	; (8002b6c <SystemClock_Config+0xd0>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002ae8:	4a20      	ldr	r2, [pc, #128]	; (8002b6c <SystemClock_Config+0xd0>)
 8002aea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002aee:	6013      	str	r3, [r2, #0]
 8002af0:	4b1e      	ldr	r3, [pc, #120]	; (8002b6c <SystemClock_Config+0xd0>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002af8:	607b      	str	r3, [r7, #4]
 8002afa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002afc:	2302      	movs	r3, #2
 8002afe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002b00:	2301      	movs	r3, #1
 8002b02:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002b04:	2310      	movs	r3, #16
 8002b06:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002b08:	2302      	movs	r3, #2
 8002b0a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002b10:	2308      	movs	r3, #8
 8002b12:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 80;
 8002b14:	2350      	movs	r3, #80	; 0x50
 8002b16:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002b18:	2302      	movs	r3, #2
 8002b1a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002b1c:	2307      	movs	r3, #7
 8002b1e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002b20:	f107 0320 	add.w	r3, r7, #32
 8002b24:	4618      	mov	r0, r3
 8002b26:	f002 fc89 	bl	800543c <HAL_RCC_OscConfig>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d001      	beq.n	8002b34 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002b30:	f000 fb62 	bl	80031f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002b34:	230f      	movs	r3, #15
 8002b36:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002b38:	2302      	movs	r3, #2
 8002b3a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002b40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b44:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002b46:	2300      	movs	r3, #0
 8002b48:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002b4a:	f107 030c 	add.w	r3, r7, #12
 8002b4e:	2102      	movs	r1, #2
 8002b50:	4618      	mov	r0, r3
 8002b52:	f002 feeb 	bl	800592c <HAL_RCC_ClockConfig>
 8002b56:	4603      	mov	r3, r0
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d001      	beq.n	8002b60 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8002b5c:	f000 fb4c 	bl	80031f8 <Error_Handler>
  }
}
 8002b60:	bf00      	nop
 8002b62:	3750      	adds	r7, #80	; 0x50
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}
 8002b68:	40023800 	.word	0x40023800
 8002b6c:	40007000 	.word	0x40007000

08002b70 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b084      	sub	sp, #16
 8002b74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002b76:	463b      	mov	r3, r7
 8002b78:	2200      	movs	r2, #0
 8002b7a:	601a      	str	r2, [r3, #0]
 8002b7c:	605a      	str	r2, [r3, #4]
 8002b7e:	609a      	str	r2, [r3, #8]
 8002b80:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002b82:	4b21      	ldr	r3, [pc, #132]	; (8002c08 <MX_ADC1_Init+0x98>)
 8002b84:	4a21      	ldr	r2, [pc, #132]	; (8002c0c <MX_ADC1_Init+0x9c>)
 8002b86:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8002b88:	4b1f      	ldr	r3, [pc, #124]	; (8002c08 <MX_ADC1_Init+0x98>)
 8002b8a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002b8e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002b90:	4b1d      	ldr	r3, [pc, #116]	; (8002c08 <MX_ADC1_Init+0x98>)
 8002b92:	2200      	movs	r2, #0
 8002b94:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8002b96:	4b1c      	ldr	r3, [pc, #112]	; (8002c08 <MX_ADC1_Init+0x98>)
 8002b98:	2200      	movs	r2, #0
 8002b9a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002b9c:	4b1a      	ldr	r3, [pc, #104]	; (8002c08 <MX_ADC1_Init+0x98>)
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002ba2:	4b19      	ldr	r3, [pc, #100]	; (8002c08 <MX_ADC1_Init+0x98>)
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002baa:	4b17      	ldr	r3, [pc, #92]	; (8002c08 <MX_ADC1_Init+0x98>)
 8002bac:	2200      	movs	r2, #0
 8002bae:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002bb0:	4b15      	ldr	r3, [pc, #84]	; (8002c08 <MX_ADC1_Init+0x98>)
 8002bb2:	4a17      	ldr	r2, [pc, #92]	; (8002c10 <MX_ADC1_Init+0xa0>)
 8002bb4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002bb6:	4b14      	ldr	r3, [pc, #80]	; (8002c08 <MX_ADC1_Init+0x98>)
 8002bb8:	2200      	movs	r2, #0
 8002bba:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002bbc:	4b12      	ldr	r3, [pc, #72]	; (8002c08 <MX_ADC1_Init+0x98>)
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002bc2:	4b11      	ldr	r3, [pc, #68]	; (8002c08 <MX_ADC1_Init+0x98>)
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002bca:	4b0f      	ldr	r3, [pc, #60]	; (8002c08 <MX_ADC1_Init+0x98>)
 8002bcc:	2201      	movs	r2, #1
 8002bce:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002bd0:	480d      	ldr	r0, [pc, #52]	; (8002c08 <MX_ADC1_Init+0x98>)
 8002bd2:	f000 fde5 	bl	80037a0 <HAL_ADC_Init>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d001      	beq.n	8002be0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8002bdc:	f000 fb0c 	bl	80031f8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002be0:	2300      	movs	r3, #0
 8002be2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002be4:	2301      	movs	r3, #1
 8002be6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002be8:	2300      	movs	r3, #0
 8002bea:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002bec:	463b      	mov	r3, r7
 8002bee:	4619      	mov	r1, r3
 8002bf0:	4805      	ldr	r0, [pc, #20]	; (8002c08 <MX_ADC1_Init+0x98>)
 8002bf2:	f000 ff65 	bl	8003ac0 <HAL_ADC_ConfigChannel>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d001      	beq.n	8002c00 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8002bfc:	f000 fafc 	bl	80031f8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002c00:	bf00      	nop
 8002c02:	3710      	adds	r7, #16
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bd80      	pop	{r7, pc}
 8002c08:	20002ae4 	.word	0x20002ae4
 8002c0c:	40012000 	.word	0x40012000
 8002c10:	0f000001 	.word	0x0f000001

08002c14 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002c18:	4b12      	ldr	r3, [pc, #72]	; (8002c64 <MX_I2C1_Init+0x50>)
 8002c1a:	4a13      	ldr	r2, [pc, #76]	; (8002c68 <MX_I2C1_Init+0x54>)
 8002c1c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002c1e:	4b11      	ldr	r3, [pc, #68]	; (8002c64 <MX_I2C1_Init+0x50>)
 8002c20:	4a12      	ldr	r2, [pc, #72]	; (8002c6c <MX_I2C1_Init+0x58>)
 8002c22:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002c24:	4b0f      	ldr	r3, [pc, #60]	; (8002c64 <MX_I2C1_Init+0x50>)
 8002c26:	2200      	movs	r2, #0
 8002c28:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002c2a:	4b0e      	ldr	r3, [pc, #56]	; (8002c64 <MX_I2C1_Init+0x50>)
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002c30:	4b0c      	ldr	r3, [pc, #48]	; (8002c64 <MX_I2C1_Init+0x50>)
 8002c32:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002c36:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002c38:	4b0a      	ldr	r3, [pc, #40]	; (8002c64 <MX_I2C1_Init+0x50>)
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002c3e:	4b09      	ldr	r3, [pc, #36]	; (8002c64 <MX_I2C1_Init+0x50>)
 8002c40:	2200      	movs	r2, #0
 8002c42:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002c44:	4b07      	ldr	r3, [pc, #28]	; (8002c64 <MX_I2C1_Init+0x50>)
 8002c46:	2200      	movs	r2, #0
 8002c48:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002c4a:	4b06      	ldr	r3, [pc, #24]	; (8002c64 <MX_I2C1_Init+0x50>)
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002c50:	4804      	ldr	r0, [pc, #16]	; (8002c64 <MX_I2C1_Init+0x50>)
 8002c52:	f001 fc33 	bl	80044bc <HAL_I2C_Init>
 8002c56:	4603      	mov	r3, r0
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d001      	beq.n	8002c60 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002c5c:	f000 facc 	bl	80031f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002c60:	bf00      	nop
 8002c62:	bd80      	pop	{r7, pc}
 8002c64:	20002b2c 	.word	0x20002b2c
 8002c68:	40005400 	.word	0x40005400
 8002c6c:	000186a0 	.word	0x000186a0

08002c70 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002c74:	4b12      	ldr	r3, [pc, #72]	; (8002cc0 <MX_I2C2_Init+0x50>)
 8002c76:	4a13      	ldr	r2, [pc, #76]	; (8002cc4 <MX_I2C2_Init+0x54>)
 8002c78:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8002c7a:	4b11      	ldr	r3, [pc, #68]	; (8002cc0 <MX_I2C2_Init+0x50>)
 8002c7c:	4a12      	ldr	r2, [pc, #72]	; (8002cc8 <MX_I2C2_Init+0x58>)
 8002c7e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002c80:	4b0f      	ldr	r3, [pc, #60]	; (8002cc0 <MX_I2C2_Init+0x50>)
 8002c82:	2200      	movs	r2, #0
 8002c84:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8002c86:	4b0e      	ldr	r3, [pc, #56]	; (8002cc0 <MX_I2C2_Init+0x50>)
 8002c88:	2200      	movs	r2, #0
 8002c8a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002c8c:	4b0c      	ldr	r3, [pc, #48]	; (8002cc0 <MX_I2C2_Init+0x50>)
 8002c8e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002c92:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002c94:	4b0a      	ldr	r3, [pc, #40]	; (8002cc0 <MX_I2C2_Init+0x50>)
 8002c96:	2200      	movs	r2, #0
 8002c98:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8002c9a:	4b09      	ldr	r3, [pc, #36]	; (8002cc0 <MX_I2C2_Init+0x50>)
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002ca0:	4b07      	ldr	r3, [pc, #28]	; (8002cc0 <MX_I2C2_Init+0x50>)
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002ca6:	4b06      	ldr	r3, [pc, #24]	; (8002cc0 <MX_I2C2_Init+0x50>)
 8002ca8:	2200      	movs	r2, #0
 8002caa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002cac:	4804      	ldr	r0, [pc, #16]	; (8002cc0 <MX_I2C2_Init+0x50>)
 8002cae:	f001 fc05 	bl	80044bc <HAL_I2C_Init>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d001      	beq.n	8002cbc <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8002cb8:	f000 fa9e 	bl	80031f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002cbc:	bf00      	nop
 8002cbe:	bd80      	pop	{r7, pc}
 8002cc0:	20002b80 	.word	0x20002b80
 8002cc4:	40005800 	.word	0x40005800
 8002cc8:	000186a0 	.word	0x000186a0

08002ccc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b086      	sub	sp, #24
 8002cd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002cd2:	f107 0308 	add.w	r3, r7, #8
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	601a      	str	r2, [r3, #0]
 8002cda:	605a      	str	r2, [r3, #4]
 8002cdc:	609a      	str	r2, [r3, #8]
 8002cde:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ce0:	463b      	mov	r3, r7
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	601a      	str	r2, [r3, #0]
 8002ce6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002ce8:	4b1d      	ldr	r3, [pc, #116]	; (8002d60 <MX_TIM4_Init+0x94>)
 8002cea:	4a1e      	ldr	r2, [pc, #120]	; (8002d64 <MX_TIM4_Init+0x98>)
 8002cec:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 84-1;
 8002cee:	4b1c      	ldr	r3, [pc, #112]	; (8002d60 <MX_TIM4_Init+0x94>)
 8002cf0:	2253      	movs	r2, #83	; 0x53
 8002cf2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002cf4:	4b1a      	ldr	r3, [pc, #104]	; (8002d60 <MX_TIM4_Init+0x94>)
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002cfa:	4b19      	ldr	r3, [pc, #100]	; (8002d60 <MX_TIM4_Init+0x94>)
 8002cfc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002d00:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d02:	4b17      	ldr	r3, [pc, #92]	; (8002d60 <MX_TIM4_Init+0x94>)
 8002d04:	2200      	movs	r2, #0
 8002d06:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d08:	4b15      	ldr	r3, [pc, #84]	; (8002d60 <MX_TIM4_Init+0x94>)
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002d0e:	4814      	ldr	r0, [pc, #80]	; (8002d60 <MX_TIM4_Init+0x94>)
 8002d10:	f003 f82c 	bl	8005d6c <HAL_TIM_Base_Init>
 8002d14:	4603      	mov	r3, r0
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d001      	beq.n	8002d1e <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8002d1a:	f000 fa6d 	bl	80031f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d22:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002d24:	f107 0308 	add.w	r3, r7, #8
 8002d28:	4619      	mov	r1, r3
 8002d2a:	480d      	ldr	r0, [pc, #52]	; (8002d60 <MX_TIM4_Init+0x94>)
 8002d2c:	f003 f8c8 	bl	8005ec0 <HAL_TIM_ConfigClockSource>
 8002d30:	4603      	mov	r3, r0
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d001      	beq.n	8002d3a <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8002d36:	f000 fa5f 	bl	80031f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002d42:	463b      	mov	r3, r7
 8002d44:	4619      	mov	r1, r3
 8002d46:	4806      	ldr	r0, [pc, #24]	; (8002d60 <MX_TIM4_Init+0x94>)
 8002d48:	f003 fa9c 	bl	8006284 <HAL_TIMEx_MasterConfigSynchronization>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d001      	beq.n	8002d56 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8002d52:	f000 fa51 	bl	80031f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002d56:	bf00      	nop
 8002d58:	3718      	adds	r7, #24
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}
 8002d5e:	bf00      	nop
 8002d60:	20002bd4 	.word	0x20002bd4
 8002d64:	40000800 	.word	0x40000800

08002d68 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8002d6c:	4b0e      	ldr	r3, [pc, #56]	; (8002da8 <MX_TIM10_Init+0x40>)
 8002d6e:	4a0f      	ldr	r2, [pc, #60]	; (8002dac <MX_TIM10_Init+0x44>)
 8002d70:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 8000-1;
 8002d72:	4b0d      	ldr	r3, [pc, #52]	; (8002da8 <MX_TIM10_Init+0x40>)
 8002d74:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8002d78:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d7a:	4b0b      	ldr	r3, [pc, #44]	; (8002da8 <MX_TIM10_Init+0x40>)
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 8002d80:	4b09      	ldr	r3, [pc, #36]	; (8002da8 <MX_TIM10_Init+0x40>)
 8002d82:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002d86:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d88:	4b07      	ldr	r3, [pc, #28]	; (8002da8 <MX_TIM10_Init+0x40>)
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d8e:	4b06      	ldr	r3, [pc, #24]	; (8002da8 <MX_TIM10_Init+0x40>)
 8002d90:	2200      	movs	r2, #0
 8002d92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8002d94:	4804      	ldr	r0, [pc, #16]	; (8002da8 <MX_TIM10_Init+0x40>)
 8002d96:	f002 ffe9 	bl	8005d6c <HAL_TIM_Base_Init>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d001      	beq.n	8002da4 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 8002da0:	f000 fa2a 	bl	80031f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8002da4:	bf00      	nop
 8002da6:	bd80      	pop	{r7, pc}
 8002da8:	20002c1c 	.word	0x20002c1c
 8002dac:	40014400 	.word	0x40014400

08002db0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002db4:	4b11      	ldr	r3, [pc, #68]	; (8002dfc <MX_USART2_UART_Init+0x4c>)
 8002db6:	4a12      	ldr	r2, [pc, #72]	; (8002e00 <MX_USART2_UART_Init+0x50>)
 8002db8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002dba:	4b10      	ldr	r3, [pc, #64]	; (8002dfc <MX_USART2_UART_Init+0x4c>)
 8002dbc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002dc0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002dc2:	4b0e      	ldr	r3, [pc, #56]	; (8002dfc <MX_USART2_UART_Init+0x4c>)
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002dc8:	4b0c      	ldr	r3, [pc, #48]	; (8002dfc <MX_USART2_UART_Init+0x4c>)
 8002dca:	2200      	movs	r2, #0
 8002dcc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002dce:	4b0b      	ldr	r3, [pc, #44]	; (8002dfc <MX_USART2_UART_Init+0x4c>)
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002dd4:	4b09      	ldr	r3, [pc, #36]	; (8002dfc <MX_USART2_UART_Init+0x4c>)
 8002dd6:	220c      	movs	r2, #12
 8002dd8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002dda:	4b08      	ldr	r3, [pc, #32]	; (8002dfc <MX_USART2_UART_Init+0x4c>)
 8002ddc:	2200      	movs	r2, #0
 8002dde:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002de0:	4b06      	ldr	r3, [pc, #24]	; (8002dfc <MX_USART2_UART_Init+0x4c>)
 8002de2:	2200      	movs	r2, #0
 8002de4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002de6:	4805      	ldr	r0, [pc, #20]	; (8002dfc <MX_USART2_UART_Init+0x4c>)
 8002de8:	f003 faba 	bl	8006360 <HAL_UART_Init>
 8002dec:	4603      	mov	r3, r0
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d001      	beq.n	8002df6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002df2:	f000 fa01 	bl	80031f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002df6:	bf00      	nop
 8002df8:	bd80      	pop	{r7, pc}
 8002dfa:	bf00      	nop
 8002dfc:	20002c64 	.word	0x20002c64
 8002e00:	40004400 	.word	0x40004400

08002e04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b08a      	sub	sp, #40	; 0x28
 8002e08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e0a:	f107 0314 	add.w	r3, r7, #20
 8002e0e:	2200      	movs	r2, #0
 8002e10:	601a      	str	r2, [r3, #0]
 8002e12:	605a      	str	r2, [r3, #4]
 8002e14:	609a      	str	r2, [r3, #8]
 8002e16:	60da      	str	r2, [r3, #12]
 8002e18:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	613b      	str	r3, [r7, #16]
 8002e1e:	4b52      	ldr	r3, [pc, #328]	; (8002f68 <MX_GPIO_Init+0x164>)
 8002e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e22:	4a51      	ldr	r2, [pc, #324]	; (8002f68 <MX_GPIO_Init+0x164>)
 8002e24:	f043 0304 	orr.w	r3, r3, #4
 8002e28:	6313      	str	r3, [r2, #48]	; 0x30
 8002e2a:	4b4f      	ldr	r3, [pc, #316]	; (8002f68 <MX_GPIO_Init+0x164>)
 8002e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e2e:	f003 0304 	and.w	r3, r3, #4
 8002e32:	613b      	str	r3, [r7, #16]
 8002e34:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002e36:	2300      	movs	r3, #0
 8002e38:	60fb      	str	r3, [r7, #12]
 8002e3a:	4b4b      	ldr	r3, [pc, #300]	; (8002f68 <MX_GPIO_Init+0x164>)
 8002e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e3e:	4a4a      	ldr	r2, [pc, #296]	; (8002f68 <MX_GPIO_Init+0x164>)
 8002e40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e44:	6313      	str	r3, [r2, #48]	; 0x30
 8002e46:	4b48      	ldr	r3, [pc, #288]	; (8002f68 <MX_GPIO_Init+0x164>)
 8002e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e4e:	60fb      	str	r3, [r7, #12]
 8002e50:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e52:	2300      	movs	r3, #0
 8002e54:	60bb      	str	r3, [r7, #8]
 8002e56:	4b44      	ldr	r3, [pc, #272]	; (8002f68 <MX_GPIO_Init+0x164>)
 8002e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e5a:	4a43      	ldr	r2, [pc, #268]	; (8002f68 <MX_GPIO_Init+0x164>)
 8002e5c:	f043 0301 	orr.w	r3, r3, #1
 8002e60:	6313      	str	r3, [r2, #48]	; 0x30
 8002e62:	4b41      	ldr	r3, [pc, #260]	; (8002f68 <MX_GPIO_Init+0x164>)
 8002e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e66:	f003 0301 	and.w	r3, r3, #1
 8002e6a:	60bb      	str	r3, [r7, #8]
 8002e6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e6e:	2300      	movs	r3, #0
 8002e70:	607b      	str	r3, [r7, #4]
 8002e72:	4b3d      	ldr	r3, [pc, #244]	; (8002f68 <MX_GPIO_Init+0x164>)
 8002e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e76:	4a3c      	ldr	r2, [pc, #240]	; (8002f68 <MX_GPIO_Init+0x164>)
 8002e78:	f043 0302 	orr.w	r3, r3, #2
 8002e7c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e7e:	4b3a      	ldr	r3, [pc, #232]	; (8002f68 <MX_GPIO_Init+0x164>)
 8002e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e82:	f003 0302 	and.w	r3, r3, #2
 8002e86:	607b      	str	r3, [r7, #4]
 8002e88:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	2102      	movs	r1, #2
 8002e8e:	4837      	ldr	r0, [pc, #220]	; (8002f6c <MX_GPIO_Init+0x168>)
 8002e90:	f001 fae2 	bl	8004458 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin|LED_Pin|Trigger2_Pin
 8002e94:	2200      	movs	r2, #0
 8002e96:	f44f 71b9 	mov.w	r1, #370	; 0x172
 8002e9a:	4835      	ldr	r0, [pc, #212]	; (8002f70 <MX_GPIO_Init+0x16c>)
 8002e9c:	f001 fadc 	bl	8004458 <HAL_GPIO_WritePin>
                          |Trigger_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	2101      	movs	r1, #1
 8002ea4:	4833      	ldr	r0, [pc, #204]	; (8002f74 <MX_GPIO_Init+0x170>)
 8002ea6:	f001 fad7 	bl	8004458 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Button_Pin PressButton_Pin */
  GPIO_InitStruct.Pin = Button_Pin|PressButton_Pin;
 8002eaa:	f44f 5302 	mov.w	r3, #8320	; 0x2080
 8002eae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002eb8:	f107 0314 	add.w	r3, r7, #20
 8002ebc:	4619      	mov	r1, r3
 8002ebe:	482b      	ldr	r0, [pc, #172]	; (8002f6c <MX_GPIO_Init+0x168>)
 8002ec0:	f001 f92e 	bl	8004120 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED4_Pin */
  GPIO_InitStruct.Pin = LED4_Pin;
 8002ec4:	2302      	movs	r3, #2
 8002ec6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED4_GPIO_Port, &GPIO_InitStruct);
 8002ed4:	f107 0314 	add.w	r3, r7, #20
 8002ed8:	4619      	mov	r1, r3
 8002eda:	4824      	ldr	r0, [pc, #144]	; (8002f6c <MX_GPIO_Init+0x168>)
 8002edc:	f001 f920 	bl	8004120 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED_Pin Trigger2_Pin
                           Trigger_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED_Pin|Trigger2_Pin
 8002ee0:	f44f 73b9 	mov.w	r3, #370	; 0x172
 8002ee4:	617b      	str	r3, [r7, #20]
                          |Trigger_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eea:	2300      	movs	r3, #0
 8002eec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ef2:	f107 0314 	add.w	r3, r7, #20
 8002ef6:	4619      	mov	r1, r3
 8002ef8:	481d      	ldr	r0, [pc, #116]	; (8002f70 <MX_GPIO_Init+0x16c>)
 8002efa:	f001 f911 	bl	8004120 <HAL_GPIO_Init>

  /*Configure GPIO pins : Echo2_Pin Echo_Pin */
  GPIO_InitStruct.Pin = Echo2_Pin|Echo_Pin;
 8002efe:	f44f 7320 	mov.w	r3, #640	; 0x280
 8002f02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f04:	2300      	movs	r3, #0
 8002f06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f0c:	f107 0314 	add.w	r3, r7, #20
 8002f10:	4619      	mov	r1, r3
 8002f12:	4817      	ldr	r0, [pc, #92]	; (8002f70 <MX_GPIO_Init+0x16c>)
 8002f14:	f001 f904 	bl	8004120 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED3_Pin */
  GPIO_InitStruct.Pin = LED3_Pin;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f20:	2300      	movs	r3, #0
 8002f22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f24:	2300      	movs	r3, #0
 8002f26:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED3_GPIO_Port, &GPIO_InitStruct);
 8002f28:	f107 0314 	add.w	r3, r7, #20
 8002f2c:	4619      	mov	r1, r3
 8002f2e:	4811      	ldr	r0, [pc, #68]	; (8002f74 <MX_GPIO_Init+0x170>)
 8002f30:	f001 f8f6 	bl	8004120 <HAL_GPIO_Init>

  /*Configure GPIO pin : INT_Pin */
  GPIO_InitStruct.Pin = INT_Pin;
 8002f34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002f3a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002f3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002f40:	2301      	movs	r3, #1
 8002f42:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(INT_GPIO_Port, &GPIO_InitStruct);
 8002f44:	f107 0314 	add.w	r3, r7, #20
 8002f48:	4619      	mov	r1, r3
 8002f4a:	4809      	ldr	r0, [pc, #36]	; (8002f70 <MX_GPIO_Init+0x16c>)
 8002f4c:	f001 f8e8 	bl	8004120 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002f50:	2200      	movs	r2, #0
 8002f52:	2100      	movs	r1, #0
 8002f54:	2028      	movs	r0, #40	; 0x28
 8002f56:	f001 f8ac 	bl	80040b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002f5a:	2028      	movs	r0, #40	; 0x28
 8002f5c:	f001 f8c5 	bl	80040ea <HAL_NVIC_EnableIRQ>

}
 8002f60:	bf00      	nop
 8002f62:	3728      	adds	r7, #40	; 0x28
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}
 8002f68:	40023800 	.word	0x40023800
 8002f6c:	40020800 	.word	0x40020800
 8002f70:	40020000 	.word	0x40020000
 8002f74:	40020400 	.word	0x40020400

08002f78 <usDelay>:

/* USER CODE BEGIN 4 */
void usDelay(uint32_t uSec) {
 8002f78:	b480      	push	{r7}
 8002f7a:	b083      	sub	sp, #12
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
	if(uSec < 2) uSec = 2;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2b01      	cmp	r3, #1
 8002f84:	d801      	bhi.n	8002f8a <usDelay+0x12>
 8002f86:	2302      	movs	r3, #2
 8002f88:	607b      	str	r3, [r7, #4]
	usTIM->ARR = uSec - 1; 	/*sets the value in the auto-reload register*/
 8002f8a:	4a13      	ldr	r2, [pc, #76]	; (8002fd8 <usDelay+0x60>)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	3b01      	subs	r3, #1
 8002f90:	62d3      	str	r3, [r2, #44]	; 0x2c
	usTIM->EGR = 1; 			/*Re-initialises the timer*/
 8002f92:	4b11      	ldr	r3, [pc, #68]	; (8002fd8 <usDelay+0x60>)
 8002f94:	2201      	movs	r2, #1
 8002f96:	615a      	str	r2, [r3, #20]
	usTIM->SR &= ~1; 		//Resets the flag
 8002f98:	4b0f      	ldr	r3, [pc, #60]	; (8002fd8 <usDelay+0x60>)
 8002f9a:	691b      	ldr	r3, [r3, #16]
 8002f9c:	4a0e      	ldr	r2, [pc, #56]	; (8002fd8 <usDelay+0x60>)
 8002f9e:	f023 0301 	bic.w	r3, r3, #1
 8002fa2:	6113      	str	r3, [r2, #16]
	usTIM->CR1 |= 1; 		//Enables the counter
 8002fa4:	4b0c      	ldr	r3, [pc, #48]	; (8002fd8 <usDelay+0x60>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a0b      	ldr	r2, [pc, #44]	; (8002fd8 <usDelay+0x60>)
 8002faa:	f043 0301 	orr.w	r3, r3, #1
 8002fae:	6013      	str	r3, [r2, #0]
	while((usTIM->SR&0x0001) != 1);
 8002fb0:	bf00      	nop
 8002fb2:	4b09      	ldr	r3, [pc, #36]	; (8002fd8 <usDelay+0x60>)
 8002fb4:	691b      	ldr	r3, [r3, #16]
 8002fb6:	f003 0301 	and.w	r3, r3, #1
 8002fba:	2b01      	cmp	r3, #1
 8002fbc:	d1f9      	bne.n	8002fb2 <usDelay+0x3a>
	usTIM->SR &= ~(0x0001);
 8002fbe:	4b06      	ldr	r3, [pc, #24]	; (8002fd8 <usDelay+0x60>)
 8002fc0:	691b      	ldr	r3, [r3, #16]
 8002fc2:	4a05      	ldr	r2, [pc, #20]	; (8002fd8 <usDelay+0x60>)
 8002fc4:	f023 0301 	bic.w	r3, r3, #1
 8002fc8:	6113      	str	r3, [r2, #16]
}
 8002fca:	bf00      	nop
 8002fcc:	370c      	adds	r7, #12
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd4:	4770      	bx	lr
 8002fd6:	bf00      	nop
 8002fd8:	40000800 	.word	0x40000800
 8002fdc:	00000000 	.word	0x00000000

08002fe0 <getHeight>:

int getHeight(uint32_t fixedHeight) {
 8002fe0:	b5b0      	push	{r4, r5, r7, lr}
 8002fe2:	b084      	sub	sp, #16
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  int loop;
  int maxloop =10000;
 8002fe8:	f242 7310 	movw	r3, #10000	; 0x2710
 8002fec:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_WritePin(Trigger_GPIO_Port, Trigger_Pin, GPIO_PIN_RESET);
 8002fee:	2200      	movs	r2, #0
 8002ff0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002ff4:	483a      	ldr	r0, [pc, #232]	; (80030e0 <getHeight+0x100>)
 8002ff6:	f001 fa2f 	bl	8004458 <HAL_GPIO_WritePin>
	//set TRIG to LOW for few uSec
	 usDelay(3);
 8002ffa:	2003      	movs	r0, #3
 8002ffc:	f7ff ffbc 	bl	8002f78 <usDelay>
	//*** START Ultrasonic measure routine ***//
	 HAL_GPIO_WritePin(Trigger_GPIO_Port, Trigger_Pin, GPIO_PIN_SET);
 8003000:	2201      	movs	r2, #1
 8003002:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003006:	4836      	ldr	r0, [pc, #216]	; (80030e0 <getHeight+0x100>)
 8003008:	f001 fa26 	bl	8004458 <HAL_GPIO_WritePin>
	 usDelay(10);
 800300c:	200a      	movs	r0, #10
 800300e:	f7ff ffb3 	bl	8002f78 <usDelay>

	 HAL_GPIO_WritePin(Trigger_GPIO_Port, Trigger_Pin, GPIO_PIN_RESET);
 8003012:	2200      	movs	r2, #0
 8003014:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003018:	4831      	ldr	r0, [pc, #196]	; (80030e0 <getHeight+0x100>)
 800301a:	f001 fa1d 	bl	8004458 <HAL_GPIO_WritePin>

	//what for ECHO pin rising edge
	 loop = 0;
 800301e:	2300      	movs	r3, #0
 8003020:	60fb      	str	r3, [r7, #12]
	 while(HAL_GPIO_ReadPin(Echo_GPIO_Port, Echo_Pin) == GPIO_PIN_RESET) {
 8003022:	e008      	b.n	8003036 <getHeight+0x56>
		 loop++;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	3301      	adds	r3, #1
 8003028:	60fb      	str	r3, [r7, #12]
		 if (loop > maxloop) {
 800302a:	68fa      	ldr	r2, [r7, #12]
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	429a      	cmp	r2, r3
 8003030:	dd01      	ble.n	8003036 <getHeight+0x56>
			 return 0;
 8003032:	2300      	movs	r3, #0
 8003034:	e04a      	b.n	80030cc <getHeight+0xec>
	 while(HAL_GPIO_ReadPin(Echo_GPIO_Port, Echo_Pin) == GPIO_PIN_RESET) {
 8003036:	f44f 7100 	mov.w	r1, #512	; 0x200
 800303a:	4829      	ldr	r0, [pc, #164]	; (80030e0 <getHeight+0x100>)
 800303c:	f001 f9f4 	bl	8004428 <HAL_GPIO_ReadPin>
 8003040:	4603      	mov	r3, r0
 8003042:	2b00      	cmp	r3, #0
 8003044:	d0ee      	beq.n	8003024 <getHeight+0x44>
			 break;
		 }
	 }
	 //start measuring ECHO pulse width in usec
	 numTicks = 0;
 8003046:	4b27      	ldr	r3, [pc, #156]	; (80030e4 <getHeight+0x104>)
 8003048:	2200      	movs	r2, #0
 800304a:	601a      	str	r2, [r3, #0]
	 while(HAL_GPIO_ReadPin(Echo_GPIO_Port, Echo_Pin) == GPIO_PIN_SET)
 800304c:	e007      	b.n	800305e <getHeight+0x7e>
	 {
		 numTicks++;
 800304e:	4b25      	ldr	r3, [pc, #148]	; (80030e4 <getHeight+0x104>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	3301      	adds	r3, #1
 8003054:	4a23      	ldr	r2, [pc, #140]	; (80030e4 <getHeight+0x104>)
 8003056:	6013      	str	r3, [r2, #0]
		 usDelay(2); //2.8 usec
 8003058:	2002      	movs	r0, #2
 800305a:	f7ff ff8d 	bl	8002f78 <usDelay>
	 while(HAL_GPIO_ReadPin(Echo_GPIO_Port, Echo_Pin) == GPIO_PIN_SET)
 800305e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003062:	481f      	ldr	r0, [pc, #124]	; (80030e0 <getHeight+0x100>)
 8003064:	f001 f9e0 	bl	8004428 <HAL_GPIO_ReadPin>
 8003068:	4603      	mov	r3, r0
 800306a:	2b01      	cmp	r3, #1
 800306c:	d0ef      	beq.n	800304e <getHeight+0x6e>
	 };
	 //estimate distance in cm
	 heightdistance = (numTicks + 0.0f)*2.8*speedOfSound;
 800306e:	4b1d      	ldr	r3, [pc, #116]	; (80030e4 <getHeight+0x104>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	ee07 3a90 	vmov	s15, r3
 8003076:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800307a:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 80030e8 <getHeight+0x108>
 800307e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003082:	ee17 0a90 	vmov	r0, s15
 8003086:	f7fd fa5f 	bl	8000548 <__aeabi_f2d>
 800308a:	a313      	add	r3, pc, #76	; (adr r3, 80030d8 <getHeight+0xf8>)
 800308c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003090:	f7fd fab2 	bl	80005f8 <__aeabi_dmul>
 8003094:	4602      	mov	r2, r0
 8003096:	460b      	mov	r3, r1
 8003098:	4614      	mov	r4, r2
 800309a:	461d      	mov	r5, r3
 800309c:	4b13      	ldr	r3, [pc, #76]	; (80030ec <getHeight+0x10c>)
 800309e:	4618      	mov	r0, r3
 80030a0:	f7fd fa52 	bl	8000548 <__aeabi_f2d>
 80030a4:	4602      	mov	r2, r0
 80030a6:	460b      	mov	r3, r1
 80030a8:	4620      	mov	r0, r4
 80030aa:	4629      	mov	r1, r5
 80030ac:	f7fd faa4 	bl	80005f8 <__aeabi_dmul>
 80030b0:	4602      	mov	r2, r0
 80030b2:	460b      	mov	r3, r1
 80030b4:	4610      	mov	r0, r2
 80030b6:	4619      	mov	r1, r3
 80030b8:	f7fd fcb0 	bl	8000a1c <__aeabi_d2iz>
 80030bc:	4603      	mov	r3, r0
 80030be:	4a0c      	ldr	r2, [pc, #48]	; (80030f0 <getHeight+0x110>)
 80030c0:	6013      	str	r3, [r2, #0]
	 return fixedHeight - heightdistance;
 80030c2:	4b0b      	ldr	r3, [pc, #44]	; (80030f0 <getHeight+0x110>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	461a      	mov	r2, r3
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	1a9b      	subs	r3, r3, r2

}
 80030cc:	4618      	mov	r0, r3
 80030ce:	3710      	adds	r7, #16
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bdb0      	pop	{r4, r5, r7, pc}
 80030d4:	f3af 8000 	nop.w
 80030d8:	66666666 	.word	0x66666666
 80030dc:	40066666 	.word	0x40066666
 80030e0:	40020000 	.word	0x40020000
 80030e4:	20002ca8 	.word	0x20002ca8
 80030e8:	00000000 	.word	0x00000000
 80030ec:	3c8c7e28 	.word	0x3c8c7e28
 80030f0:	20002cb4 	.word	0x20002cb4

080030f4 <setLED>:

void setLED() {
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b082      	sub	sp, #8
 80030f8:	af00      	add	r7, sp, #0
    for(int i = 0; i < 4; i++) {
 80030fa:	2300      	movs	r3, #0
 80030fc:	607b      	str	r3, [r7, #4]
 80030fe:	e039      	b.n	8003174 <setLED+0x80>
    	if(i == 2) {
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2b02      	cmp	r3, #2
 8003104:	d11e      	bne.n	8003144 <setLED+0x50>
    		HAL_GPIO_WritePin(LEDPorts[i], LEDPins[i], state == 2 && (BPM_CNT%2 || BPM_final != 0));
 8003106:	4a1f      	ldr	r2, [pc, #124]	; (8003184 <setLED+0x90>)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800310e:	4a1e      	ldr	r2, [pc, #120]	; (8003188 <setLED+0x94>)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	4413      	add	r3, r2
 8003114:	781b      	ldrb	r3, [r3, #0]
 8003116:	b299      	uxth	r1, r3
 8003118:	4b1c      	ldr	r3, [pc, #112]	; (800318c <setLED+0x98>)
 800311a:	781b      	ldrb	r3, [r3, #0]
 800311c:	2b02      	cmp	r3, #2
 800311e:	d10b      	bne.n	8003138 <setLED+0x44>
 8003120:	4b1b      	ldr	r3, [pc, #108]	; (8003190 <setLED+0x9c>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f003 0301 	and.w	r3, r3, #1
 8003128:	2b00      	cmp	r3, #0
 800312a:	d103      	bne.n	8003134 <setLED+0x40>
 800312c:	4b19      	ldr	r3, [pc, #100]	; (8003194 <setLED+0xa0>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d001      	beq.n	8003138 <setLED+0x44>
 8003134:	2301      	movs	r3, #1
 8003136:	e000      	b.n	800313a <setLED+0x46>
 8003138:	2300      	movs	r3, #0
 800313a:	b2db      	uxtb	r3, r3
 800313c:	461a      	mov	r2, r3
 800313e:	f001 f98b 	bl	8004458 <HAL_GPIO_WritePin>
 8003142:	e014      	b.n	800316e <setLED+0x7a>
    	}
    	else {
    		HAL_GPIO_WritePin(LEDPorts[i], LEDPins[i], i == state);
 8003144:	4a0f      	ldr	r2, [pc, #60]	; (8003184 <setLED+0x90>)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800314c:	4a0e      	ldr	r2, [pc, #56]	; (8003188 <setLED+0x94>)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	4413      	add	r3, r2
 8003152:	781b      	ldrb	r3, [r3, #0]
 8003154:	b299      	uxth	r1, r3
 8003156:	4b0d      	ldr	r3, [pc, #52]	; (800318c <setLED+0x98>)
 8003158:	781b      	ldrb	r3, [r3, #0]
 800315a:	461a      	mov	r2, r3
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	4293      	cmp	r3, r2
 8003160:	bf0c      	ite	eq
 8003162:	2301      	moveq	r3, #1
 8003164:	2300      	movne	r3, #0
 8003166:	b2db      	uxtb	r3, r3
 8003168:	461a      	mov	r2, r3
 800316a:	f001 f975 	bl	8004458 <HAL_GPIO_WritePin>
    for(int i = 0; i < 4; i++) {
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	3301      	adds	r3, #1
 8003172:	607b      	str	r3, [r7, #4]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2b03      	cmp	r3, #3
 8003178:	ddc2      	ble.n	8003100 <setLED+0xc>
    	}
    }
}
 800317a:	bf00      	nop
 800317c:	bf00      	nop
 800317e:	3708      	adds	r7, #8
 8003180:	46bd      	mov	sp, r7
 8003182:	bd80      	pop	{r7, pc}
 8003184:	20000000 	.word	0x20000000
 8003188:	20000010 	.word	0x20000010
 800318c:	20002cac 	.word	0x20002cac
 8003190:	20002cc8 	.word	0x20002cc8
 8003194:	20002cc4 	.word	0x20002cc4

08003198 <isButtonHold>:

int isButtonHold() {
 8003198:	b480      	push	{r7}
 800319a:	af00      	add	r7, sp, #0
	return buttonInput[0] == buttonInput[1] && buttonInput[0] == 1;
 800319c:	4b0a      	ldr	r3, [pc, #40]	; (80031c8 <isButtonHold+0x30>)
 800319e:	f9b3 2000 	ldrsh.w	r2, [r3]
 80031a2:	4b09      	ldr	r3, [pc, #36]	; (80031c8 <isButtonHold+0x30>)
 80031a4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80031a8:	429a      	cmp	r2, r3
 80031aa:	d106      	bne.n	80031ba <isButtonHold+0x22>
 80031ac:	4b06      	ldr	r3, [pc, #24]	; (80031c8 <isButtonHold+0x30>)
 80031ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80031b2:	2b01      	cmp	r3, #1
 80031b4:	d101      	bne.n	80031ba <isButtonHold+0x22>
 80031b6:	2301      	movs	r3, #1
 80031b8:	e000      	b.n	80031bc <isButtonHold+0x24>
 80031ba:	2300      	movs	r3, #0
}
 80031bc:	4618      	mov	r0, r3
 80031be:	46bd      	mov	sp, r7
 80031c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c4:	4770      	bx	lr
 80031c6:	bf00      	nop
 80031c8:	20002cc0 	.word	0x20002cc0

080031cc <isButtonLiftUp>:

int isButtonLiftUp() {
 80031cc:	b480      	push	{r7}
 80031ce:	af00      	add	r7, sp, #0
	return buttonInput[0] == 1 && buttonInput[1] == 0;
 80031d0:	4b08      	ldr	r3, [pc, #32]	; (80031f4 <isButtonLiftUp+0x28>)
 80031d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80031d6:	2b01      	cmp	r3, #1
 80031d8:	d106      	bne.n	80031e8 <isButtonLiftUp+0x1c>
 80031da:	4b06      	ldr	r3, [pc, #24]	; (80031f4 <isButtonLiftUp+0x28>)
 80031dc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d101      	bne.n	80031e8 <isButtonLiftUp+0x1c>
 80031e4:	2301      	movs	r3, #1
 80031e6:	e000      	b.n	80031ea <isButtonLiftUp+0x1e>
 80031e8:	2300      	movs	r3, #0
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	46bd      	mov	sp, r7
 80031ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f2:	4770      	bx	lr
 80031f4:	20002cc0 	.word	0x20002cc0

080031f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80031f8:	b480      	push	{r7}
 80031fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80031fc:	b672      	cpsid	i
}
 80031fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003200:	e7fe      	b.n	8003200 <Error_Handler+0x8>
	...

08003204 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b082      	sub	sp, #8
 8003208:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800320a:	2300      	movs	r3, #0
 800320c:	607b      	str	r3, [r7, #4]
 800320e:	4b10      	ldr	r3, [pc, #64]	; (8003250 <HAL_MspInit+0x4c>)
 8003210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003212:	4a0f      	ldr	r2, [pc, #60]	; (8003250 <HAL_MspInit+0x4c>)
 8003214:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003218:	6453      	str	r3, [r2, #68]	; 0x44
 800321a:	4b0d      	ldr	r3, [pc, #52]	; (8003250 <HAL_MspInit+0x4c>)
 800321c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800321e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003222:	607b      	str	r3, [r7, #4]
 8003224:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003226:	2300      	movs	r3, #0
 8003228:	603b      	str	r3, [r7, #0]
 800322a:	4b09      	ldr	r3, [pc, #36]	; (8003250 <HAL_MspInit+0x4c>)
 800322c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800322e:	4a08      	ldr	r2, [pc, #32]	; (8003250 <HAL_MspInit+0x4c>)
 8003230:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003234:	6413      	str	r3, [r2, #64]	; 0x40
 8003236:	4b06      	ldr	r3, [pc, #24]	; (8003250 <HAL_MspInit+0x4c>)
 8003238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800323a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800323e:	603b      	str	r3, [r7, #0]
 8003240:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003242:	2007      	movs	r0, #7
 8003244:	f000 ff2a 	bl	800409c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003248:	bf00      	nop
 800324a:	3708      	adds	r7, #8
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}
 8003250:	40023800 	.word	0x40023800

08003254 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b08a      	sub	sp, #40	; 0x28
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800325c:	f107 0314 	add.w	r3, r7, #20
 8003260:	2200      	movs	r2, #0
 8003262:	601a      	str	r2, [r3, #0]
 8003264:	605a      	str	r2, [r3, #4]
 8003266:	609a      	str	r2, [r3, #8]
 8003268:	60da      	str	r2, [r3, #12]
 800326a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a17      	ldr	r2, [pc, #92]	; (80032d0 <HAL_ADC_MspInit+0x7c>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d127      	bne.n	80032c6 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003276:	2300      	movs	r3, #0
 8003278:	613b      	str	r3, [r7, #16]
 800327a:	4b16      	ldr	r3, [pc, #88]	; (80032d4 <HAL_ADC_MspInit+0x80>)
 800327c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800327e:	4a15      	ldr	r2, [pc, #84]	; (80032d4 <HAL_ADC_MspInit+0x80>)
 8003280:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003284:	6453      	str	r3, [r2, #68]	; 0x44
 8003286:	4b13      	ldr	r3, [pc, #76]	; (80032d4 <HAL_ADC_MspInit+0x80>)
 8003288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800328a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800328e:	613b      	str	r3, [r7, #16]
 8003290:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003292:	2300      	movs	r3, #0
 8003294:	60fb      	str	r3, [r7, #12]
 8003296:	4b0f      	ldr	r3, [pc, #60]	; (80032d4 <HAL_ADC_MspInit+0x80>)
 8003298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800329a:	4a0e      	ldr	r2, [pc, #56]	; (80032d4 <HAL_ADC_MspInit+0x80>)
 800329c:	f043 0301 	orr.w	r3, r3, #1
 80032a0:	6313      	str	r3, [r2, #48]	; 0x30
 80032a2:	4b0c      	ldr	r3, [pc, #48]	; (80032d4 <HAL_ADC_MspInit+0x80>)
 80032a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a6:	f003 0301 	and.w	r3, r3, #1
 80032aa:	60fb      	str	r3, [r7, #12]
 80032ac:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80032ae:	2301      	movs	r3, #1
 80032b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80032b2:	2303      	movs	r3, #3
 80032b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032b6:	2300      	movs	r3, #0
 80032b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032ba:	f107 0314 	add.w	r3, r7, #20
 80032be:	4619      	mov	r1, r3
 80032c0:	4805      	ldr	r0, [pc, #20]	; (80032d8 <HAL_ADC_MspInit+0x84>)
 80032c2:	f000 ff2d 	bl	8004120 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80032c6:	bf00      	nop
 80032c8:	3728      	adds	r7, #40	; 0x28
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}
 80032ce:	bf00      	nop
 80032d0:	40012000 	.word	0x40012000
 80032d4:	40023800 	.word	0x40023800
 80032d8:	40020000 	.word	0x40020000

080032dc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b08c      	sub	sp, #48	; 0x30
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032e4:	f107 031c 	add.w	r3, r7, #28
 80032e8:	2200      	movs	r2, #0
 80032ea:	601a      	str	r2, [r3, #0]
 80032ec:	605a      	str	r2, [r3, #4]
 80032ee:	609a      	str	r2, [r3, #8]
 80032f0:	60da      	str	r2, [r3, #12]
 80032f2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a3b      	ldr	r2, [pc, #236]	; (80033e8 <HAL_I2C_MspInit+0x10c>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d12d      	bne.n	800335a <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032fe:	2300      	movs	r3, #0
 8003300:	61bb      	str	r3, [r7, #24]
 8003302:	4b3a      	ldr	r3, [pc, #232]	; (80033ec <HAL_I2C_MspInit+0x110>)
 8003304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003306:	4a39      	ldr	r2, [pc, #228]	; (80033ec <HAL_I2C_MspInit+0x110>)
 8003308:	f043 0302 	orr.w	r3, r3, #2
 800330c:	6313      	str	r3, [r2, #48]	; 0x30
 800330e:	4b37      	ldr	r3, [pc, #220]	; (80033ec <HAL_I2C_MspInit+0x110>)
 8003310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003312:	f003 0302 	and.w	r3, r3, #2
 8003316:	61bb      	str	r3, [r7, #24]
 8003318:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800331a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800331e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003320:	2312      	movs	r3, #18
 8003322:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003324:	2300      	movs	r3, #0
 8003326:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003328:	2303      	movs	r3, #3
 800332a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800332c:	2304      	movs	r3, #4
 800332e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003330:	f107 031c 	add.w	r3, r7, #28
 8003334:	4619      	mov	r1, r3
 8003336:	482e      	ldr	r0, [pc, #184]	; (80033f0 <HAL_I2C_MspInit+0x114>)
 8003338:	f000 fef2 	bl	8004120 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800333c:	2300      	movs	r3, #0
 800333e:	617b      	str	r3, [r7, #20]
 8003340:	4b2a      	ldr	r3, [pc, #168]	; (80033ec <HAL_I2C_MspInit+0x110>)
 8003342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003344:	4a29      	ldr	r2, [pc, #164]	; (80033ec <HAL_I2C_MspInit+0x110>)
 8003346:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800334a:	6413      	str	r3, [r2, #64]	; 0x40
 800334c:	4b27      	ldr	r3, [pc, #156]	; (80033ec <HAL_I2C_MspInit+0x110>)
 800334e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003350:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003354:	617b      	str	r3, [r7, #20]
 8003356:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8003358:	e041      	b.n	80033de <HAL_I2C_MspInit+0x102>
  else if(hi2c->Instance==I2C2)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a25      	ldr	r2, [pc, #148]	; (80033f4 <HAL_I2C_MspInit+0x118>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d13c      	bne.n	80033de <HAL_I2C_MspInit+0x102>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003364:	2300      	movs	r3, #0
 8003366:	613b      	str	r3, [r7, #16]
 8003368:	4b20      	ldr	r3, [pc, #128]	; (80033ec <HAL_I2C_MspInit+0x110>)
 800336a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800336c:	4a1f      	ldr	r2, [pc, #124]	; (80033ec <HAL_I2C_MspInit+0x110>)
 800336e:	f043 0302 	orr.w	r3, r3, #2
 8003372:	6313      	str	r3, [r2, #48]	; 0x30
 8003374:	4b1d      	ldr	r3, [pc, #116]	; (80033ec <HAL_I2C_MspInit+0x110>)
 8003376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003378:	f003 0302 	and.w	r3, r3, #2
 800337c:	613b      	str	r3, [r7, #16]
 800337e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003380:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003384:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003386:	2312      	movs	r3, #18
 8003388:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800338a:	2301      	movs	r3, #1
 800338c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800338e:	2303      	movs	r3, #3
 8003390:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003392:	2304      	movs	r3, #4
 8003394:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003396:	f107 031c 	add.w	r3, r7, #28
 800339a:	4619      	mov	r1, r3
 800339c:	4814      	ldr	r0, [pc, #80]	; (80033f0 <HAL_I2C_MspInit+0x114>)
 800339e:	f000 febf 	bl	8004120 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80033a2:	2308      	movs	r3, #8
 80033a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80033a6:	2312      	movs	r3, #18
 80033a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80033aa:	2301      	movs	r3, #1
 80033ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033ae:	2303      	movs	r3, #3
 80033b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 80033b2:	2309      	movs	r3, #9
 80033b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033b6:	f107 031c 	add.w	r3, r7, #28
 80033ba:	4619      	mov	r1, r3
 80033bc:	480c      	ldr	r0, [pc, #48]	; (80033f0 <HAL_I2C_MspInit+0x114>)
 80033be:	f000 feaf 	bl	8004120 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80033c2:	2300      	movs	r3, #0
 80033c4:	60fb      	str	r3, [r7, #12]
 80033c6:	4b09      	ldr	r3, [pc, #36]	; (80033ec <HAL_I2C_MspInit+0x110>)
 80033c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ca:	4a08      	ldr	r2, [pc, #32]	; (80033ec <HAL_I2C_MspInit+0x110>)
 80033cc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80033d0:	6413      	str	r3, [r2, #64]	; 0x40
 80033d2:	4b06      	ldr	r3, [pc, #24]	; (80033ec <HAL_I2C_MspInit+0x110>)
 80033d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033da:	60fb      	str	r3, [r7, #12]
 80033dc:	68fb      	ldr	r3, [r7, #12]
}
 80033de:	bf00      	nop
 80033e0:	3730      	adds	r7, #48	; 0x30
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}
 80033e6:	bf00      	nop
 80033e8:	40005400 	.word	0x40005400
 80033ec:	40023800 	.word	0x40023800
 80033f0:	40020400 	.word	0x40020400
 80033f4:	40005800 	.word	0x40005800

080033f8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b085      	sub	sp, #20
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a15      	ldr	r2, [pc, #84]	; (800345c <HAL_TIM_Base_MspInit+0x64>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d10e      	bne.n	8003428 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800340a:	2300      	movs	r3, #0
 800340c:	60fb      	str	r3, [r7, #12]
 800340e:	4b14      	ldr	r3, [pc, #80]	; (8003460 <HAL_TIM_Base_MspInit+0x68>)
 8003410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003412:	4a13      	ldr	r2, [pc, #76]	; (8003460 <HAL_TIM_Base_MspInit+0x68>)
 8003414:	f043 0304 	orr.w	r3, r3, #4
 8003418:	6413      	str	r3, [r2, #64]	; 0x40
 800341a:	4b11      	ldr	r3, [pc, #68]	; (8003460 <HAL_TIM_Base_MspInit+0x68>)
 800341c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800341e:	f003 0304 	and.w	r3, r3, #4
 8003422:	60fb      	str	r3, [r7, #12]
 8003424:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8003426:	e012      	b.n	800344e <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM10)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a0d      	ldr	r2, [pc, #52]	; (8003464 <HAL_TIM_Base_MspInit+0x6c>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d10d      	bne.n	800344e <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8003432:	2300      	movs	r3, #0
 8003434:	60bb      	str	r3, [r7, #8]
 8003436:	4b0a      	ldr	r3, [pc, #40]	; (8003460 <HAL_TIM_Base_MspInit+0x68>)
 8003438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800343a:	4a09      	ldr	r2, [pc, #36]	; (8003460 <HAL_TIM_Base_MspInit+0x68>)
 800343c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003440:	6453      	str	r3, [r2, #68]	; 0x44
 8003442:	4b07      	ldr	r3, [pc, #28]	; (8003460 <HAL_TIM_Base_MspInit+0x68>)
 8003444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003446:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800344a:	60bb      	str	r3, [r7, #8]
 800344c:	68bb      	ldr	r3, [r7, #8]
}
 800344e:	bf00      	nop
 8003450:	3714      	adds	r7, #20
 8003452:	46bd      	mov	sp, r7
 8003454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003458:	4770      	bx	lr
 800345a:	bf00      	nop
 800345c:	40000800 	.word	0x40000800
 8003460:	40023800 	.word	0x40023800
 8003464:	40014400 	.word	0x40014400

08003468 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b08a      	sub	sp, #40	; 0x28
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003470:	f107 0314 	add.w	r3, r7, #20
 8003474:	2200      	movs	r2, #0
 8003476:	601a      	str	r2, [r3, #0]
 8003478:	605a      	str	r2, [r3, #4]
 800347a:	609a      	str	r2, [r3, #8]
 800347c:	60da      	str	r2, [r3, #12]
 800347e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a19      	ldr	r2, [pc, #100]	; (80034ec <HAL_UART_MspInit+0x84>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d12b      	bne.n	80034e2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800348a:	2300      	movs	r3, #0
 800348c:	613b      	str	r3, [r7, #16]
 800348e:	4b18      	ldr	r3, [pc, #96]	; (80034f0 <HAL_UART_MspInit+0x88>)
 8003490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003492:	4a17      	ldr	r2, [pc, #92]	; (80034f0 <HAL_UART_MspInit+0x88>)
 8003494:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003498:	6413      	str	r3, [r2, #64]	; 0x40
 800349a:	4b15      	ldr	r3, [pc, #84]	; (80034f0 <HAL_UART_MspInit+0x88>)
 800349c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800349e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034a2:	613b      	str	r3, [r7, #16]
 80034a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034a6:	2300      	movs	r3, #0
 80034a8:	60fb      	str	r3, [r7, #12]
 80034aa:	4b11      	ldr	r3, [pc, #68]	; (80034f0 <HAL_UART_MspInit+0x88>)
 80034ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ae:	4a10      	ldr	r2, [pc, #64]	; (80034f0 <HAL_UART_MspInit+0x88>)
 80034b0:	f043 0301 	orr.w	r3, r3, #1
 80034b4:	6313      	str	r3, [r2, #48]	; 0x30
 80034b6:	4b0e      	ldr	r3, [pc, #56]	; (80034f0 <HAL_UART_MspInit+0x88>)
 80034b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ba:	f003 0301 	and.w	r3, r3, #1
 80034be:	60fb      	str	r3, [r7, #12]
 80034c0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80034c2:	230c      	movs	r3, #12
 80034c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034c6:	2302      	movs	r3, #2
 80034c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034ca:	2300      	movs	r3, #0
 80034cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034ce:	2303      	movs	r3, #3
 80034d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80034d2:	2307      	movs	r3, #7
 80034d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034d6:	f107 0314 	add.w	r3, r7, #20
 80034da:	4619      	mov	r1, r3
 80034dc:	4805      	ldr	r0, [pc, #20]	; (80034f4 <HAL_UART_MspInit+0x8c>)
 80034de:	f000 fe1f 	bl	8004120 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80034e2:	bf00      	nop
 80034e4:	3728      	adds	r7, #40	; 0x28
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}
 80034ea:	bf00      	nop
 80034ec:	40004400 	.word	0x40004400
 80034f0:	40023800 	.word	0x40023800
 80034f4:	40020000 	.word	0x40020000

080034f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80034f8:	b480      	push	{r7}
 80034fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80034fc:	e7fe      	b.n	80034fc <NMI_Handler+0x4>

080034fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80034fe:	b480      	push	{r7}
 8003500:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003502:	e7fe      	b.n	8003502 <HardFault_Handler+0x4>

08003504 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003504:	b480      	push	{r7}
 8003506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003508:	e7fe      	b.n	8003508 <MemManage_Handler+0x4>

0800350a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800350a:	b480      	push	{r7}
 800350c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800350e:	e7fe      	b.n	800350e <BusFault_Handler+0x4>

08003510 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003510:	b480      	push	{r7}
 8003512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003514:	e7fe      	b.n	8003514 <UsageFault_Handler+0x4>

08003516 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003516:	b480      	push	{r7}
 8003518:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800351a:	bf00      	nop
 800351c:	46bd      	mov	sp, r7
 800351e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003522:	4770      	bx	lr

08003524 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003524:	b480      	push	{r7}
 8003526:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003528:	bf00      	nop
 800352a:	46bd      	mov	sp, r7
 800352c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003530:	4770      	bx	lr

08003532 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003532:	b480      	push	{r7}
 8003534:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003536:	bf00      	nop
 8003538:	46bd      	mov	sp, r7
 800353a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353e:	4770      	bx	lr

08003540 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003544:	f000 f8e8 	bl	8003718 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003548:	bf00      	nop
 800354a:	bd80      	pop	{r7, pc}

0800354c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_Pin);
 8003550:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8003554:	f000 ff9a 	bl	800448c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003558:	bf00      	nop
 800355a:	bd80      	pop	{r7, pc}

0800355c <_kill>:
{
	return 1;
}

int _kill(int pid, int sig)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b082      	sub	sp, #8
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
 8003564:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003566:	f003 fabd 	bl	8006ae4 <__errno>
 800356a:	4603      	mov	r3, r0
 800356c:	2216      	movs	r2, #22
 800356e:	601a      	str	r2, [r3, #0]
	return -1;
 8003570:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003574:	4618      	mov	r0, r3
 8003576:	3708      	adds	r7, #8
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}

0800357c <_exit>:

void _exit (int status)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b082      	sub	sp, #8
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003584:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003588:	6878      	ldr	r0, [r7, #4]
 800358a:	f7ff ffe7 	bl	800355c <_kill>
	while (1) {}		/* Make sure we hang here */
 800358e:	e7fe      	b.n	800358e <_exit+0x12>

08003590 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b086      	sub	sp, #24
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003598:	4a14      	ldr	r2, [pc, #80]	; (80035ec <_sbrk+0x5c>)
 800359a:	4b15      	ldr	r3, [pc, #84]	; (80035f0 <_sbrk+0x60>)
 800359c:	1ad3      	subs	r3, r2, r3
 800359e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80035a4:	4b13      	ldr	r3, [pc, #76]	; (80035f4 <_sbrk+0x64>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d102      	bne.n	80035b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80035ac:	4b11      	ldr	r3, [pc, #68]	; (80035f4 <_sbrk+0x64>)
 80035ae:	4a12      	ldr	r2, [pc, #72]	; (80035f8 <_sbrk+0x68>)
 80035b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80035b2:	4b10      	ldr	r3, [pc, #64]	; (80035f4 <_sbrk+0x64>)
 80035b4:	681a      	ldr	r2, [r3, #0]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	4413      	add	r3, r2
 80035ba:	693a      	ldr	r2, [r7, #16]
 80035bc:	429a      	cmp	r2, r3
 80035be:	d207      	bcs.n	80035d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80035c0:	f003 fa90 	bl	8006ae4 <__errno>
 80035c4:	4603      	mov	r3, r0
 80035c6:	220c      	movs	r2, #12
 80035c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80035ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80035ce:	e009      	b.n	80035e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80035d0:	4b08      	ldr	r3, [pc, #32]	; (80035f4 <_sbrk+0x64>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80035d6:	4b07      	ldr	r3, [pc, #28]	; (80035f4 <_sbrk+0x64>)
 80035d8:	681a      	ldr	r2, [r3, #0]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	4413      	add	r3, r2
 80035de:	4a05      	ldr	r2, [pc, #20]	; (80035f4 <_sbrk+0x64>)
 80035e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80035e2:	68fb      	ldr	r3, [r7, #12]
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	3718      	adds	r7, #24
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}
 80035ec:	20018000 	.word	0x20018000
 80035f0:	00000400 	.word	0x00000400
 80035f4:	20002cd0 	.word	0x20002cd0
 80035f8:	20002ce8 	.word	0x20002ce8

080035fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80035fc:	b480      	push	{r7}
 80035fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003600:	4b06      	ldr	r3, [pc, #24]	; (800361c <SystemInit+0x20>)
 8003602:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003606:	4a05      	ldr	r2, [pc, #20]	; (800361c <SystemInit+0x20>)
 8003608:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800360c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003610:	bf00      	nop
 8003612:	46bd      	mov	sp, r7
 8003614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003618:	4770      	bx	lr
 800361a:	bf00      	nop
 800361c:	e000ed00 	.word	0xe000ed00

08003620 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003620:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003658 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003624:	480d      	ldr	r0, [pc, #52]	; (800365c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003626:	490e      	ldr	r1, [pc, #56]	; (8003660 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003628:	4a0e      	ldr	r2, [pc, #56]	; (8003664 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800362a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800362c:	e002      	b.n	8003634 <LoopCopyDataInit>

0800362e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800362e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003630:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003632:	3304      	adds	r3, #4

08003634 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003634:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003636:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003638:	d3f9      	bcc.n	800362e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800363a:	4a0b      	ldr	r2, [pc, #44]	; (8003668 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800363c:	4c0b      	ldr	r4, [pc, #44]	; (800366c <LoopFillZerobss+0x26>)
  movs r3, #0
 800363e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003640:	e001      	b.n	8003646 <LoopFillZerobss>

08003642 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003642:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003644:	3204      	adds	r2, #4

08003646 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003646:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003648:	d3fb      	bcc.n	8003642 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800364a:	f7ff ffd7 	bl	80035fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800364e:	f003 fa63 	bl	8006b18 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003652:	f7fe ff45 	bl	80024e0 <main>
  bx  lr    
 8003656:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003658:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800365c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003660:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8003664:	0800769c 	.word	0x0800769c
  ldr r2, =_sbss
 8003668:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 800366c:	20002ce8 	.word	0x20002ce8

08003670 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003670:	e7fe      	b.n	8003670 <ADC_IRQHandler>
	...

08003674 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003678:	4b0e      	ldr	r3, [pc, #56]	; (80036b4 <HAL_Init+0x40>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a0d      	ldr	r2, [pc, #52]	; (80036b4 <HAL_Init+0x40>)
 800367e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003682:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003684:	4b0b      	ldr	r3, [pc, #44]	; (80036b4 <HAL_Init+0x40>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a0a      	ldr	r2, [pc, #40]	; (80036b4 <HAL_Init+0x40>)
 800368a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800368e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003690:	4b08      	ldr	r3, [pc, #32]	; (80036b4 <HAL_Init+0x40>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a07      	ldr	r2, [pc, #28]	; (80036b4 <HAL_Init+0x40>)
 8003696:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800369a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800369c:	2003      	movs	r0, #3
 800369e:	f000 fcfd 	bl	800409c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80036a2:	2000      	movs	r0, #0
 80036a4:	f000 f808 	bl	80036b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80036a8:	f7ff fdac 	bl	8003204 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80036ac:	2300      	movs	r3, #0
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	bd80      	pop	{r7, pc}
 80036b2:	bf00      	nop
 80036b4:	40023c00 	.word	0x40023c00

080036b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b082      	sub	sp, #8
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80036c0:	4b12      	ldr	r3, [pc, #72]	; (800370c <HAL_InitTick+0x54>)
 80036c2:	681a      	ldr	r2, [r3, #0]
 80036c4:	4b12      	ldr	r3, [pc, #72]	; (8003710 <HAL_InitTick+0x58>)
 80036c6:	781b      	ldrb	r3, [r3, #0]
 80036c8:	4619      	mov	r1, r3
 80036ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80036ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80036d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80036d6:	4618      	mov	r0, r3
 80036d8:	f000 fd15 	bl	8004106 <HAL_SYSTICK_Config>
 80036dc:	4603      	mov	r3, r0
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d001      	beq.n	80036e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	e00e      	b.n	8003704 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2b0f      	cmp	r3, #15
 80036ea:	d80a      	bhi.n	8003702 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80036ec:	2200      	movs	r2, #0
 80036ee:	6879      	ldr	r1, [r7, #4]
 80036f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80036f4:	f000 fcdd 	bl	80040b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80036f8:	4a06      	ldr	r2, [pc, #24]	; (8003714 <HAL_InitTick+0x5c>)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80036fe:	2300      	movs	r3, #0
 8003700:	e000      	b.n	8003704 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
}
 8003704:	4618      	mov	r0, r3
 8003706:	3708      	adds	r7, #8
 8003708:	46bd      	mov	sp, r7
 800370a:	bd80      	pop	{r7, pc}
 800370c:	20000014 	.word	0x20000014
 8003710:	2000001c 	.word	0x2000001c
 8003714:	20000018 	.word	0x20000018

08003718 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003718:	b480      	push	{r7}
 800371a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800371c:	4b06      	ldr	r3, [pc, #24]	; (8003738 <HAL_IncTick+0x20>)
 800371e:	781b      	ldrb	r3, [r3, #0]
 8003720:	461a      	mov	r2, r3
 8003722:	4b06      	ldr	r3, [pc, #24]	; (800373c <HAL_IncTick+0x24>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4413      	add	r3, r2
 8003728:	4a04      	ldr	r2, [pc, #16]	; (800373c <HAL_IncTick+0x24>)
 800372a:	6013      	str	r3, [r2, #0]
}
 800372c:	bf00      	nop
 800372e:	46bd      	mov	sp, r7
 8003730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003734:	4770      	bx	lr
 8003736:	bf00      	nop
 8003738:	2000001c 	.word	0x2000001c
 800373c:	20002cd4 	.word	0x20002cd4

08003740 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003740:	b480      	push	{r7}
 8003742:	af00      	add	r7, sp, #0
  return uwTick;
 8003744:	4b03      	ldr	r3, [pc, #12]	; (8003754 <HAL_GetTick+0x14>)
 8003746:	681b      	ldr	r3, [r3, #0]
}
 8003748:	4618      	mov	r0, r3
 800374a:	46bd      	mov	sp, r7
 800374c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003750:	4770      	bx	lr
 8003752:	bf00      	nop
 8003754:	20002cd4 	.word	0x20002cd4

08003758 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b084      	sub	sp, #16
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003760:	f7ff ffee 	bl	8003740 <HAL_GetTick>
 8003764:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003770:	d005      	beq.n	800377e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003772:	4b0a      	ldr	r3, [pc, #40]	; (800379c <HAL_Delay+0x44>)
 8003774:	781b      	ldrb	r3, [r3, #0]
 8003776:	461a      	mov	r2, r3
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	4413      	add	r3, r2
 800377c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800377e:	bf00      	nop
 8003780:	f7ff ffde 	bl	8003740 <HAL_GetTick>
 8003784:	4602      	mov	r2, r0
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	1ad3      	subs	r3, r2, r3
 800378a:	68fa      	ldr	r2, [r7, #12]
 800378c:	429a      	cmp	r2, r3
 800378e:	d8f7      	bhi.n	8003780 <HAL_Delay+0x28>
  {
  }
}
 8003790:	bf00      	nop
 8003792:	bf00      	nop
 8003794:	3710      	adds	r7, #16
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}
 800379a:	bf00      	nop
 800379c:	2000001c 	.word	0x2000001c

080037a0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b084      	sub	sp, #16
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80037a8:	2300      	movs	r3, #0
 80037aa:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d101      	bne.n	80037b6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
 80037b4:	e033      	b.n	800381e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d109      	bne.n	80037d2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	f7ff fd48 	bl	8003254 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2200      	movs	r2, #0
 80037c8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2200      	movs	r2, #0
 80037ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d6:	f003 0310 	and.w	r3, r3, #16
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d118      	bne.n	8003810 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80037e6:	f023 0302 	bic.w	r3, r3, #2
 80037ea:	f043 0202 	orr.w	r2, r3, #2
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f000 fa86 	bl	8003d04 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2200      	movs	r2, #0
 80037fc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003802:	f023 0303 	bic.w	r3, r3, #3
 8003806:	f043 0201 	orr.w	r2, r3, #1
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	641a      	str	r2, [r3, #64]	; 0x40
 800380e:	e001      	b.n	8003814 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003810:	2301      	movs	r3, #1
 8003812:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2200      	movs	r2, #0
 8003818:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800381c:	7bfb      	ldrb	r3, [r7, #15]
}
 800381e:	4618      	mov	r0, r3
 8003820:	3710      	adds	r7, #16
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}
	...

08003828 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003828:	b480      	push	{r7}
 800382a:	b085      	sub	sp, #20
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8003830:	2300      	movs	r3, #0
 8003832:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800383a:	2b01      	cmp	r3, #1
 800383c:	d101      	bne.n	8003842 <HAL_ADC_Start+0x1a>
 800383e:	2302      	movs	r3, #2
 8003840:	e097      	b.n	8003972 <HAL_ADC_Start+0x14a>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2201      	movs	r2, #1
 8003846:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	f003 0301 	and.w	r3, r3, #1
 8003854:	2b01      	cmp	r3, #1
 8003856:	d018      	beq.n	800388a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	689a      	ldr	r2, [r3, #8]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f042 0201 	orr.w	r2, r2, #1
 8003866:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003868:	4b45      	ldr	r3, [pc, #276]	; (8003980 <HAL_ADC_Start+0x158>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a45      	ldr	r2, [pc, #276]	; (8003984 <HAL_ADC_Start+0x15c>)
 800386e:	fba2 2303 	umull	r2, r3, r2, r3
 8003872:	0c9a      	lsrs	r2, r3, #18
 8003874:	4613      	mov	r3, r2
 8003876:	005b      	lsls	r3, r3, #1
 8003878:	4413      	add	r3, r2
 800387a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800387c:	e002      	b.n	8003884 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	3b01      	subs	r3, #1
 8003882:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d1f9      	bne.n	800387e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	f003 0301 	and.w	r3, r3, #1
 8003894:	2b01      	cmp	r3, #1
 8003896:	d15f      	bne.n	8003958 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800389c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80038a0:	f023 0301 	bic.w	r3, r3, #1
 80038a4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d007      	beq.n	80038ca <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038be:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80038c2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80038d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038d6:	d106      	bne.n	80038e6 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038dc:	f023 0206 	bic.w	r2, r3, #6
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	645a      	str	r2, [r3, #68]	; 0x44
 80038e4:	e002      	b.n	80038ec <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2200      	movs	r2, #0
 80038ea:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2200      	movs	r2, #0
 80038f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80038f4:	4b24      	ldr	r3, [pc, #144]	; (8003988 <HAL_ADC_Start+0x160>)
 80038f6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003900:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	f003 031f 	and.w	r3, r3, #31
 800390a:	2b00      	cmp	r3, #0
 800390c:	d10f      	bne.n	800392e <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	689b      	ldr	r3, [r3, #8]
 8003914:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003918:	2b00      	cmp	r3, #0
 800391a:	d129      	bne.n	8003970 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	689a      	ldr	r2, [r3, #8]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800392a:	609a      	str	r2, [r3, #8]
 800392c:	e020      	b.n	8003970 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a16      	ldr	r2, [pc, #88]	; (800398c <HAL_ADC_Start+0x164>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d11b      	bne.n	8003970 <HAL_ADC_Start+0x148>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003942:	2b00      	cmp	r3, #0
 8003944:	d114      	bne.n	8003970 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	689a      	ldr	r2, [r3, #8]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003954:	609a      	str	r2, [r3, #8]
 8003956:	e00b      	b.n	8003970 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800395c:	f043 0210 	orr.w	r2, r3, #16
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003968:	f043 0201 	orr.w	r2, r3, #1
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003970:	2300      	movs	r3, #0
}
 8003972:	4618      	mov	r0, r3
 8003974:	3714      	adds	r7, #20
 8003976:	46bd      	mov	sp, r7
 8003978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397c:	4770      	bx	lr
 800397e:	bf00      	nop
 8003980:	20000014 	.word	0x20000014
 8003984:	431bde83 	.word	0x431bde83
 8003988:	40012300 	.word	0x40012300
 800398c:	40012000 	.word	0x40012000

08003990 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b084      	sub	sp, #16
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
 8003998:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800399a:	2300      	movs	r3, #0
 800399c:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039ac:	d113      	bne.n	80039d6 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	689b      	ldr	r3, [r3, #8]
 80039b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80039b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039bc:	d10b      	bne.n	80039d6 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c2:	f043 0220 	orr.w	r2, r3, #32
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2200      	movs	r2, #0
 80039ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80039d2:	2301      	movs	r3, #1
 80039d4:	e063      	b.n	8003a9e <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80039d6:	f7ff feb3 	bl	8003740 <HAL_GetTick>
 80039da:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80039dc:	e021      	b.n	8003a22 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80039e4:	d01d      	beq.n	8003a22 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d007      	beq.n	80039fc <HAL_ADC_PollForConversion+0x6c>
 80039ec:	f7ff fea8 	bl	8003740 <HAL_GetTick>
 80039f0:	4602      	mov	r2, r0
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	1ad3      	subs	r3, r2, r3
 80039f6:	683a      	ldr	r2, [r7, #0]
 80039f8:	429a      	cmp	r2, r3
 80039fa:	d212      	bcs.n	8003a22 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f003 0302 	and.w	r3, r3, #2
 8003a06:	2b02      	cmp	r3, #2
 8003a08:	d00b      	beq.n	8003a22 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a0e:	f043 0204 	orr.w	r2, r3, #4
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8003a1e:	2303      	movs	r3, #3
 8003a20:	e03d      	b.n	8003a9e <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f003 0302 	and.w	r3, r3, #2
 8003a2c:	2b02      	cmp	r3, #2
 8003a2e:	d1d6      	bne.n	80039de <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f06f 0212 	mvn.w	r2, #18
 8003a38:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a3e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	689b      	ldr	r3, [r3, #8]
 8003a4c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d123      	bne.n	8003a9c <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d11f      	bne.n	8003a9c <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a62:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d006      	beq.n	8003a78 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d111      	bne.n	8003a9c <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a7c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a88:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d105      	bne.n	8003a9c <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a94:	f043 0201 	orr.w	r2, r3, #1
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003a9c:	2300      	movs	r3, #0
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	3710      	adds	r7, #16
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}

08003aa6 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8003aa6:	b480      	push	{r7}
 8003aa8:	b083      	sub	sp, #12
 8003aaa:	af00      	add	r7, sp, #0
 8003aac:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	370c      	adds	r7, #12
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abe:	4770      	bx	lr

08003ac0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b085      	sub	sp, #20
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
 8003ac8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003aca:	2300      	movs	r3, #0
 8003acc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ad4:	2b01      	cmp	r3, #1
 8003ad6:	d101      	bne.n	8003adc <HAL_ADC_ConfigChannel+0x1c>
 8003ad8:	2302      	movs	r3, #2
 8003ada:	e105      	b.n	8003ce8 <HAL_ADC_ConfigChannel+0x228>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2201      	movs	r2, #1
 8003ae0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	2b09      	cmp	r3, #9
 8003aea:	d925      	bls.n	8003b38 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	68d9      	ldr	r1, [r3, #12]
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	b29b      	uxth	r3, r3
 8003af8:	461a      	mov	r2, r3
 8003afa:	4613      	mov	r3, r2
 8003afc:	005b      	lsls	r3, r3, #1
 8003afe:	4413      	add	r3, r2
 8003b00:	3b1e      	subs	r3, #30
 8003b02:	2207      	movs	r2, #7
 8003b04:	fa02 f303 	lsl.w	r3, r2, r3
 8003b08:	43da      	mvns	r2, r3
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	400a      	ands	r2, r1
 8003b10:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	68d9      	ldr	r1, [r3, #12]
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	689a      	ldr	r2, [r3, #8]
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	b29b      	uxth	r3, r3
 8003b22:	4618      	mov	r0, r3
 8003b24:	4603      	mov	r3, r0
 8003b26:	005b      	lsls	r3, r3, #1
 8003b28:	4403      	add	r3, r0
 8003b2a:	3b1e      	subs	r3, #30
 8003b2c:	409a      	lsls	r2, r3
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	430a      	orrs	r2, r1
 8003b34:	60da      	str	r2, [r3, #12]
 8003b36:	e022      	b.n	8003b7e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	6919      	ldr	r1, [r3, #16]
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	b29b      	uxth	r3, r3
 8003b44:	461a      	mov	r2, r3
 8003b46:	4613      	mov	r3, r2
 8003b48:	005b      	lsls	r3, r3, #1
 8003b4a:	4413      	add	r3, r2
 8003b4c:	2207      	movs	r2, #7
 8003b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b52:	43da      	mvns	r2, r3
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	400a      	ands	r2, r1
 8003b5a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	6919      	ldr	r1, [r3, #16]
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	689a      	ldr	r2, [r3, #8]
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	b29b      	uxth	r3, r3
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	4603      	mov	r3, r0
 8003b70:	005b      	lsls	r3, r3, #1
 8003b72:	4403      	add	r3, r0
 8003b74:	409a      	lsls	r2, r3
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	430a      	orrs	r2, r1
 8003b7c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	2b06      	cmp	r3, #6
 8003b84:	d824      	bhi.n	8003bd0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	685a      	ldr	r2, [r3, #4]
 8003b90:	4613      	mov	r3, r2
 8003b92:	009b      	lsls	r3, r3, #2
 8003b94:	4413      	add	r3, r2
 8003b96:	3b05      	subs	r3, #5
 8003b98:	221f      	movs	r2, #31
 8003b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b9e:	43da      	mvns	r2, r3
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	400a      	ands	r2, r1
 8003ba6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	b29b      	uxth	r3, r3
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	685a      	ldr	r2, [r3, #4]
 8003bba:	4613      	mov	r3, r2
 8003bbc:	009b      	lsls	r3, r3, #2
 8003bbe:	4413      	add	r3, r2
 8003bc0:	3b05      	subs	r3, #5
 8003bc2:	fa00 f203 	lsl.w	r2, r0, r3
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	430a      	orrs	r2, r1
 8003bcc:	635a      	str	r2, [r3, #52]	; 0x34
 8003bce:	e04c      	b.n	8003c6a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	2b0c      	cmp	r3, #12
 8003bd6:	d824      	bhi.n	8003c22 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	685a      	ldr	r2, [r3, #4]
 8003be2:	4613      	mov	r3, r2
 8003be4:	009b      	lsls	r3, r3, #2
 8003be6:	4413      	add	r3, r2
 8003be8:	3b23      	subs	r3, #35	; 0x23
 8003bea:	221f      	movs	r2, #31
 8003bec:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf0:	43da      	mvns	r2, r3
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	400a      	ands	r2, r1
 8003bf8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	b29b      	uxth	r3, r3
 8003c06:	4618      	mov	r0, r3
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	685a      	ldr	r2, [r3, #4]
 8003c0c:	4613      	mov	r3, r2
 8003c0e:	009b      	lsls	r3, r3, #2
 8003c10:	4413      	add	r3, r2
 8003c12:	3b23      	subs	r3, #35	; 0x23
 8003c14:	fa00 f203 	lsl.w	r2, r0, r3
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	430a      	orrs	r2, r1
 8003c1e:	631a      	str	r2, [r3, #48]	; 0x30
 8003c20:	e023      	b.n	8003c6a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	685a      	ldr	r2, [r3, #4]
 8003c2c:	4613      	mov	r3, r2
 8003c2e:	009b      	lsls	r3, r3, #2
 8003c30:	4413      	add	r3, r2
 8003c32:	3b41      	subs	r3, #65	; 0x41
 8003c34:	221f      	movs	r2, #31
 8003c36:	fa02 f303 	lsl.w	r3, r2, r3
 8003c3a:	43da      	mvns	r2, r3
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	400a      	ands	r2, r1
 8003c42:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	b29b      	uxth	r3, r3
 8003c50:	4618      	mov	r0, r3
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	685a      	ldr	r2, [r3, #4]
 8003c56:	4613      	mov	r3, r2
 8003c58:	009b      	lsls	r3, r3, #2
 8003c5a:	4413      	add	r3, r2
 8003c5c:	3b41      	subs	r3, #65	; 0x41
 8003c5e:	fa00 f203 	lsl.w	r2, r0, r3
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	430a      	orrs	r2, r1
 8003c68:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003c6a:	4b22      	ldr	r3, [pc, #136]	; (8003cf4 <HAL_ADC_ConfigChannel+0x234>)
 8003c6c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a21      	ldr	r2, [pc, #132]	; (8003cf8 <HAL_ADC_ConfigChannel+0x238>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d109      	bne.n	8003c8c <HAL_ADC_ConfigChannel+0x1cc>
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	2b12      	cmp	r3, #18
 8003c7e:	d105      	bne.n	8003c8c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a19      	ldr	r2, [pc, #100]	; (8003cf8 <HAL_ADC_ConfigChannel+0x238>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d123      	bne.n	8003cde <HAL_ADC_ConfigChannel+0x21e>
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	2b10      	cmp	r3, #16
 8003c9c:	d003      	beq.n	8003ca6 <HAL_ADC_ConfigChannel+0x1e6>
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	2b11      	cmp	r3, #17
 8003ca4:	d11b      	bne.n	8003cde <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	2b10      	cmp	r3, #16
 8003cb8:	d111      	bne.n	8003cde <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003cba:	4b10      	ldr	r3, [pc, #64]	; (8003cfc <HAL_ADC_ConfigChannel+0x23c>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a10      	ldr	r2, [pc, #64]	; (8003d00 <HAL_ADC_ConfigChannel+0x240>)
 8003cc0:	fba2 2303 	umull	r2, r3, r2, r3
 8003cc4:	0c9a      	lsrs	r2, r3, #18
 8003cc6:	4613      	mov	r3, r2
 8003cc8:	009b      	lsls	r3, r3, #2
 8003cca:	4413      	add	r3, r2
 8003ccc:	005b      	lsls	r3, r3, #1
 8003cce:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003cd0:	e002      	b.n	8003cd8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	3b01      	subs	r3, #1
 8003cd6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d1f9      	bne.n	8003cd2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003ce6:	2300      	movs	r3, #0
}
 8003ce8:	4618      	mov	r0, r3
 8003cea:	3714      	adds	r7, #20
 8003cec:	46bd      	mov	sp, r7
 8003cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf2:	4770      	bx	lr
 8003cf4:	40012300 	.word	0x40012300
 8003cf8:	40012000 	.word	0x40012000
 8003cfc:	20000014 	.word	0x20000014
 8003d00:	431bde83 	.word	0x431bde83

08003d04 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003d04:	b480      	push	{r7}
 8003d06:	b085      	sub	sp, #20
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003d0c:	4b79      	ldr	r3, [pc, #484]	; (8003ef4 <ADC_Init+0x1f0>)
 8003d0e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	685a      	ldr	r2, [r3, #4]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	431a      	orrs	r2, r3
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	685a      	ldr	r2, [r3, #4]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003d38:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	6859      	ldr	r1, [r3, #4]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	691b      	ldr	r3, [r3, #16]
 8003d44:	021a      	lsls	r2, r3, #8
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	430a      	orrs	r2, r1
 8003d4c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	685a      	ldr	r2, [r3, #4]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003d5c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	6859      	ldr	r1, [r3, #4]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	689a      	ldr	r2, [r3, #8]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	430a      	orrs	r2, r1
 8003d6e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	689a      	ldr	r2, [r3, #8]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d7e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	6899      	ldr	r1, [r3, #8]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	68da      	ldr	r2, [r3, #12]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	430a      	orrs	r2, r1
 8003d90:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d96:	4a58      	ldr	r2, [pc, #352]	; (8003ef8 <ADC_Init+0x1f4>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d022      	beq.n	8003de2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	689a      	ldr	r2, [r3, #8]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003daa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	6899      	ldr	r1, [r3, #8]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	430a      	orrs	r2, r1
 8003dbc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	689a      	ldr	r2, [r3, #8]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003dcc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	6899      	ldr	r1, [r3, #8]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	430a      	orrs	r2, r1
 8003dde:	609a      	str	r2, [r3, #8]
 8003de0:	e00f      	b.n	8003e02 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	689a      	ldr	r2, [r3, #8]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003df0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	689a      	ldr	r2, [r3, #8]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003e00:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	689a      	ldr	r2, [r3, #8]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f022 0202 	bic.w	r2, r2, #2
 8003e10:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	6899      	ldr	r1, [r3, #8]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	7e1b      	ldrb	r3, [r3, #24]
 8003e1c:	005a      	lsls	r2, r3, #1
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	430a      	orrs	r2, r1
 8003e24:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d01b      	beq.n	8003e68 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	685a      	ldr	r2, [r3, #4]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e3e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	685a      	ldr	r2, [r3, #4]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003e4e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	6859      	ldr	r1, [r3, #4]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e5a:	3b01      	subs	r3, #1
 8003e5c:	035a      	lsls	r2, r3, #13
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	430a      	orrs	r2, r1
 8003e64:	605a      	str	r2, [r3, #4]
 8003e66:	e007      	b.n	8003e78 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	685a      	ldr	r2, [r3, #4]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e76:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003e86:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	69db      	ldr	r3, [r3, #28]
 8003e92:	3b01      	subs	r3, #1
 8003e94:	051a      	lsls	r2, r3, #20
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	430a      	orrs	r2, r1
 8003e9c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	689a      	ldr	r2, [r3, #8]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003eac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	6899      	ldr	r1, [r3, #8]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003eba:	025a      	lsls	r2, r3, #9
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	430a      	orrs	r2, r1
 8003ec2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	689a      	ldr	r2, [r3, #8]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ed2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	6899      	ldr	r1, [r3, #8]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	695b      	ldr	r3, [r3, #20]
 8003ede:	029a      	lsls	r2, r3, #10
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	430a      	orrs	r2, r1
 8003ee6:	609a      	str	r2, [r3, #8]
}
 8003ee8:	bf00      	nop
 8003eea:	3714      	adds	r7, #20
 8003eec:	46bd      	mov	sp, r7
 8003eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef2:	4770      	bx	lr
 8003ef4:	40012300 	.word	0x40012300
 8003ef8:	0f000001 	.word	0x0f000001

08003efc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003efc:	b480      	push	{r7}
 8003efe:	b085      	sub	sp, #20
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	f003 0307 	and.w	r3, r3, #7
 8003f0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003f0c:	4b0c      	ldr	r3, [pc, #48]	; (8003f40 <__NVIC_SetPriorityGrouping+0x44>)
 8003f0e:	68db      	ldr	r3, [r3, #12]
 8003f10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003f12:	68ba      	ldr	r2, [r7, #8]
 8003f14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003f18:	4013      	ands	r3, r2
 8003f1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003f24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003f28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003f2e:	4a04      	ldr	r2, [pc, #16]	; (8003f40 <__NVIC_SetPriorityGrouping+0x44>)
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	60d3      	str	r3, [r2, #12]
}
 8003f34:	bf00      	nop
 8003f36:	3714      	adds	r7, #20
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3e:	4770      	bx	lr
 8003f40:	e000ed00 	.word	0xe000ed00

08003f44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003f44:	b480      	push	{r7}
 8003f46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003f48:	4b04      	ldr	r3, [pc, #16]	; (8003f5c <__NVIC_GetPriorityGrouping+0x18>)
 8003f4a:	68db      	ldr	r3, [r3, #12]
 8003f4c:	0a1b      	lsrs	r3, r3, #8
 8003f4e:	f003 0307 	and.w	r3, r3, #7
}
 8003f52:	4618      	mov	r0, r3
 8003f54:	46bd      	mov	sp, r7
 8003f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5a:	4770      	bx	lr
 8003f5c:	e000ed00 	.word	0xe000ed00

08003f60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f60:	b480      	push	{r7}
 8003f62:	b083      	sub	sp, #12
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	4603      	mov	r3, r0
 8003f68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	db0b      	blt.n	8003f8a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003f72:	79fb      	ldrb	r3, [r7, #7]
 8003f74:	f003 021f 	and.w	r2, r3, #31
 8003f78:	4907      	ldr	r1, [pc, #28]	; (8003f98 <__NVIC_EnableIRQ+0x38>)
 8003f7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f7e:	095b      	lsrs	r3, r3, #5
 8003f80:	2001      	movs	r0, #1
 8003f82:	fa00 f202 	lsl.w	r2, r0, r2
 8003f86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003f8a:	bf00      	nop
 8003f8c:	370c      	adds	r7, #12
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f94:	4770      	bx	lr
 8003f96:	bf00      	nop
 8003f98:	e000e100 	.word	0xe000e100

08003f9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b083      	sub	sp, #12
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	6039      	str	r1, [r7, #0]
 8003fa6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003fa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	db0a      	blt.n	8003fc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	b2da      	uxtb	r2, r3
 8003fb4:	490c      	ldr	r1, [pc, #48]	; (8003fe8 <__NVIC_SetPriority+0x4c>)
 8003fb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fba:	0112      	lsls	r2, r2, #4
 8003fbc:	b2d2      	uxtb	r2, r2
 8003fbe:	440b      	add	r3, r1
 8003fc0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003fc4:	e00a      	b.n	8003fdc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	b2da      	uxtb	r2, r3
 8003fca:	4908      	ldr	r1, [pc, #32]	; (8003fec <__NVIC_SetPriority+0x50>)
 8003fcc:	79fb      	ldrb	r3, [r7, #7]
 8003fce:	f003 030f 	and.w	r3, r3, #15
 8003fd2:	3b04      	subs	r3, #4
 8003fd4:	0112      	lsls	r2, r2, #4
 8003fd6:	b2d2      	uxtb	r2, r2
 8003fd8:	440b      	add	r3, r1
 8003fda:	761a      	strb	r2, [r3, #24]
}
 8003fdc:	bf00      	nop
 8003fde:	370c      	adds	r7, #12
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe6:	4770      	bx	lr
 8003fe8:	e000e100 	.word	0xe000e100
 8003fec:	e000ed00 	.word	0xe000ed00

08003ff0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b089      	sub	sp, #36	; 0x24
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	60f8      	str	r0, [r7, #12]
 8003ff8:	60b9      	str	r1, [r7, #8]
 8003ffa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	f003 0307 	and.w	r3, r3, #7
 8004002:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004004:	69fb      	ldr	r3, [r7, #28]
 8004006:	f1c3 0307 	rsb	r3, r3, #7
 800400a:	2b04      	cmp	r3, #4
 800400c:	bf28      	it	cs
 800400e:	2304      	movcs	r3, #4
 8004010:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004012:	69fb      	ldr	r3, [r7, #28]
 8004014:	3304      	adds	r3, #4
 8004016:	2b06      	cmp	r3, #6
 8004018:	d902      	bls.n	8004020 <NVIC_EncodePriority+0x30>
 800401a:	69fb      	ldr	r3, [r7, #28]
 800401c:	3b03      	subs	r3, #3
 800401e:	e000      	b.n	8004022 <NVIC_EncodePriority+0x32>
 8004020:	2300      	movs	r3, #0
 8004022:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004024:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004028:	69bb      	ldr	r3, [r7, #24]
 800402a:	fa02 f303 	lsl.w	r3, r2, r3
 800402e:	43da      	mvns	r2, r3
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	401a      	ands	r2, r3
 8004034:	697b      	ldr	r3, [r7, #20]
 8004036:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004038:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	fa01 f303 	lsl.w	r3, r1, r3
 8004042:	43d9      	mvns	r1, r3
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004048:	4313      	orrs	r3, r2
         );
}
 800404a:	4618      	mov	r0, r3
 800404c:	3724      	adds	r7, #36	; 0x24
 800404e:	46bd      	mov	sp, r7
 8004050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004054:	4770      	bx	lr
	...

08004058 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b082      	sub	sp, #8
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	3b01      	subs	r3, #1
 8004064:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004068:	d301      	bcc.n	800406e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800406a:	2301      	movs	r3, #1
 800406c:	e00f      	b.n	800408e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800406e:	4a0a      	ldr	r2, [pc, #40]	; (8004098 <SysTick_Config+0x40>)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	3b01      	subs	r3, #1
 8004074:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004076:	210f      	movs	r1, #15
 8004078:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800407c:	f7ff ff8e 	bl	8003f9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004080:	4b05      	ldr	r3, [pc, #20]	; (8004098 <SysTick_Config+0x40>)
 8004082:	2200      	movs	r2, #0
 8004084:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004086:	4b04      	ldr	r3, [pc, #16]	; (8004098 <SysTick_Config+0x40>)
 8004088:	2207      	movs	r2, #7
 800408a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800408c:	2300      	movs	r3, #0
}
 800408e:	4618      	mov	r0, r3
 8004090:	3708      	adds	r7, #8
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}
 8004096:	bf00      	nop
 8004098:	e000e010 	.word	0xe000e010

0800409c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b082      	sub	sp, #8
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80040a4:	6878      	ldr	r0, [r7, #4]
 80040a6:	f7ff ff29 	bl	8003efc <__NVIC_SetPriorityGrouping>
}
 80040aa:	bf00      	nop
 80040ac:	3708      	adds	r7, #8
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}

080040b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80040b2:	b580      	push	{r7, lr}
 80040b4:	b086      	sub	sp, #24
 80040b6:	af00      	add	r7, sp, #0
 80040b8:	4603      	mov	r3, r0
 80040ba:	60b9      	str	r1, [r7, #8]
 80040bc:	607a      	str	r2, [r7, #4]
 80040be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80040c0:	2300      	movs	r3, #0
 80040c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80040c4:	f7ff ff3e 	bl	8003f44 <__NVIC_GetPriorityGrouping>
 80040c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80040ca:	687a      	ldr	r2, [r7, #4]
 80040cc:	68b9      	ldr	r1, [r7, #8]
 80040ce:	6978      	ldr	r0, [r7, #20]
 80040d0:	f7ff ff8e 	bl	8003ff0 <NVIC_EncodePriority>
 80040d4:	4602      	mov	r2, r0
 80040d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80040da:	4611      	mov	r1, r2
 80040dc:	4618      	mov	r0, r3
 80040de:	f7ff ff5d 	bl	8003f9c <__NVIC_SetPriority>
}
 80040e2:	bf00      	nop
 80040e4:	3718      	adds	r7, #24
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bd80      	pop	{r7, pc}

080040ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80040ea:	b580      	push	{r7, lr}
 80040ec:	b082      	sub	sp, #8
 80040ee:	af00      	add	r7, sp, #0
 80040f0:	4603      	mov	r3, r0
 80040f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80040f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040f8:	4618      	mov	r0, r3
 80040fa:	f7ff ff31 	bl	8003f60 <__NVIC_EnableIRQ>
}
 80040fe:	bf00      	nop
 8004100:	3708      	adds	r7, #8
 8004102:	46bd      	mov	sp, r7
 8004104:	bd80      	pop	{r7, pc}

08004106 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004106:	b580      	push	{r7, lr}
 8004108:	b082      	sub	sp, #8
 800410a:	af00      	add	r7, sp, #0
 800410c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800410e:	6878      	ldr	r0, [r7, #4]
 8004110:	f7ff ffa2 	bl	8004058 <SysTick_Config>
 8004114:	4603      	mov	r3, r0
}
 8004116:	4618      	mov	r0, r3
 8004118:	3708      	adds	r7, #8
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}
	...

08004120 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004120:	b480      	push	{r7}
 8004122:	b089      	sub	sp, #36	; 0x24
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
 8004128:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800412a:	2300      	movs	r3, #0
 800412c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800412e:	2300      	movs	r3, #0
 8004130:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004132:	2300      	movs	r3, #0
 8004134:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004136:	2300      	movs	r3, #0
 8004138:	61fb      	str	r3, [r7, #28]
 800413a:	e159      	b.n	80043f0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800413c:	2201      	movs	r2, #1
 800413e:	69fb      	ldr	r3, [r7, #28]
 8004140:	fa02 f303 	lsl.w	r3, r2, r3
 8004144:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	697a      	ldr	r2, [r7, #20]
 800414c:	4013      	ands	r3, r2
 800414e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004150:	693a      	ldr	r2, [r7, #16]
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	429a      	cmp	r2, r3
 8004156:	f040 8148 	bne.w	80043ea <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	f003 0303 	and.w	r3, r3, #3
 8004162:	2b01      	cmp	r3, #1
 8004164:	d005      	beq.n	8004172 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800416e:	2b02      	cmp	r3, #2
 8004170:	d130      	bne.n	80041d4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004178:	69fb      	ldr	r3, [r7, #28]
 800417a:	005b      	lsls	r3, r3, #1
 800417c:	2203      	movs	r2, #3
 800417e:	fa02 f303 	lsl.w	r3, r2, r3
 8004182:	43db      	mvns	r3, r3
 8004184:	69ba      	ldr	r2, [r7, #24]
 8004186:	4013      	ands	r3, r2
 8004188:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	68da      	ldr	r2, [r3, #12]
 800418e:	69fb      	ldr	r3, [r7, #28]
 8004190:	005b      	lsls	r3, r3, #1
 8004192:	fa02 f303 	lsl.w	r3, r2, r3
 8004196:	69ba      	ldr	r2, [r7, #24]
 8004198:	4313      	orrs	r3, r2
 800419a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	69ba      	ldr	r2, [r7, #24]
 80041a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80041a8:	2201      	movs	r2, #1
 80041aa:	69fb      	ldr	r3, [r7, #28]
 80041ac:	fa02 f303 	lsl.w	r3, r2, r3
 80041b0:	43db      	mvns	r3, r3
 80041b2:	69ba      	ldr	r2, [r7, #24]
 80041b4:	4013      	ands	r3, r2
 80041b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	091b      	lsrs	r3, r3, #4
 80041be:	f003 0201 	and.w	r2, r3, #1
 80041c2:	69fb      	ldr	r3, [r7, #28]
 80041c4:	fa02 f303 	lsl.w	r3, r2, r3
 80041c8:	69ba      	ldr	r2, [r7, #24]
 80041ca:	4313      	orrs	r3, r2
 80041cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	69ba      	ldr	r2, [r7, #24]
 80041d2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	f003 0303 	and.w	r3, r3, #3
 80041dc:	2b03      	cmp	r3, #3
 80041de:	d017      	beq.n	8004210 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	68db      	ldr	r3, [r3, #12]
 80041e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80041e6:	69fb      	ldr	r3, [r7, #28]
 80041e8:	005b      	lsls	r3, r3, #1
 80041ea:	2203      	movs	r2, #3
 80041ec:	fa02 f303 	lsl.w	r3, r2, r3
 80041f0:	43db      	mvns	r3, r3
 80041f2:	69ba      	ldr	r2, [r7, #24]
 80041f4:	4013      	ands	r3, r2
 80041f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	689a      	ldr	r2, [r3, #8]
 80041fc:	69fb      	ldr	r3, [r7, #28]
 80041fe:	005b      	lsls	r3, r3, #1
 8004200:	fa02 f303 	lsl.w	r3, r2, r3
 8004204:	69ba      	ldr	r2, [r7, #24]
 8004206:	4313      	orrs	r3, r2
 8004208:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	69ba      	ldr	r2, [r7, #24]
 800420e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	f003 0303 	and.w	r3, r3, #3
 8004218:	2b02      	cmp	r3, #2
 800421a:	d123      	bne.n	8004264 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800421c:	69fb      	ldr	r3, [r7, #28]
 800421e:	08da      	lsrs	r2, r3, #3
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	3208      	adds	r2, #8
 8004224:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004228:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800422a:	69fb      	ldr	r3, [r7, #28]
 800422c:	f003 0307 	and.w	r3, r3, #7
 8004230:	009b      	lsls	r3, r3, #2
 8004232:	220f      	movs	r2, #15
 8004234:	fa02 f303 	lsl.w	r3, r2, r3
 8004238:	43db      	mvns	r3, r3
 800423a:	69ba      	ldr	r2, [r7, #24]
 800423c:	4013      	ands	r3, r2
 800423e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	691a      	ldr	r2, [r3, #16]
 8004244:	69fb      	ldr	r3, [r7, #28]
 8004246:	f003 0307 	and.w	r3, r3, #7
 800424a:	009b      	lsls	r3, r3, #2
 800424c:	fa02 f303 	lsl.w	r3, r2, r3
 8004250:	69ba      	ldr	r2, [r7, #24]
 8004252:	4313      	orrs	r3, r2
 8004254:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004256:	69fb      	ldr	r3, [r7, #28]
 8004258:	08da      	lsrs	r2, r3, #3
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	3208      	adds	r2, #8
 800425e:	69b9      	ldr	r1, [r7, #24]
 8004260:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800426a:	69fb      	ldr	r3, [r7, #28]
 800426c:	005b      	lsls	r3, r3, #1
 800426e:	2203      	movs	r2, #3
 8004270:	fa02 f303 	lsl.w	r3, r2, r3
 8004274:	43db      	mvns	r3, r3
 8004276:	69ba      	ldr	r2, [r7, #24]
 8004278:	4013      	ands	r3, r2
 800427a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	f003 0203 	and.w	r2, r3, #3
 8004284:	69fb      	ldr	r3, [r7, #28]
 8004286:	005b      	lsls	r3, r3, #1
 8004288:	fa02 f303 	lsl.w	r3, r2, r3
 800428c:	69ba      	ldr	r2, [r7, #24]
 800428e:	4313      	orrs	r3, r2
 8004290:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	69ba      	ldr	r2, [r7, #24]
 8004296:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	f000 80a2 	beq.w	80043ea <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80042a6:	2300      	movs	r3, #0
 80042a8:	60fb      	str	r3, [r7, #12]
 80042aa:	4b57      	ldr	r3, [pc, #348]	; (8004408 <HAL_GPIO_Init+0x2e8>)
 80042ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042ae:	4a56      	ldr	r2, [pc, #344]	; (8004408 <HAL_GPIO_Init+0x2e8>)
 80042b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80042b4:	6453      	str	r3, [r2, #68]	; 0x44
 80042b6:	4b54      	ldr	r3, [pc, #336]	; (8004408 <HAL_GPIO_Init+0x2e8>)
 80042b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042be:	60fb      	str	r3, [r7, #12]
 80042c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80042c2:	4a52      	ldr	r2, [pc, #328]	; (800440c <HAL_GPIO_Init+0x2ec>)
 80042c4:	69fb      	ldr	r3, [r7, #28]
 80042c6:	089b      	lsrs	r3, r3, #2
 80042c8:	3302      	adds	r3, #2
 80042ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80042d0:	69fb      	ldr	r3, [r7, #28]
 80042d2:	f003 0303 	and.w	r3, r3, #3
 80042d6:	009b      	lsls	r3, r3, #2
 80042d8:	220f      	movs	r2, #15
 80042da:	fa02 f303 	lsl.w	r3, r2, r3
 80042de:	43db      	mvns	r3, r3
 80042e0:	69ba      	ldr	r2, [r7, #24]
 80042e2:	4013      	ands	r3, r2
 80042e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	4a49      	ldr	r2, [pc, #292]	; (8004410 <HAL_GPIO_Init+0x2f0>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d019      	beq.n	8004322 <HAL_GPIO_Init+0x202>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	4a48      	ldr	r2, [pc, #288]	; (8004414 <HAL_GPIO_Init+0x2f4>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d013      	beq.n	800431e <HAL_GPIO_Init+0x1fe>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	4a47      	ldr	r2, [pc, #284]	; (8004418 <HAL_GPIO_Init+0x2f8>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d00d      	beq.n	800431a <HAL_GPIO_Init+0x1fa>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	4a46      	ldr	r2, [pc, #280]	; (800441c <HAL_GPIO_Init+0x2fc>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d007      	beq.n	8004316 <HAL_GPIO_Init+0x1f6>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	4a45      	ldr	r2, [pc, #276]	; (8004420 <HAL_GPIO_Init+0x300>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d101      	bne.n	8004312 <HAL_GPIO_Init+0x1f2>
 800430e:	2304      	movs	r3, #4
 8004310:	e008      	b.n	8004324 <HAL_GPIO_Init+0x204>
 8004312:	2307      	movs	r3, #7
 8004314:	e006      	b.n	8004324 <HAL_GPIO_Init+0x204>
 8004316:	2303      	movs	r3, #3
 8004318:	e004      	b.n	8004324 <HAL_GPIO_Init+0x204>
 800431a:	2302      	movs	r3, #2
 800431c:	e002      	b.n	8004324 <HAL_GPIO_Init+0x204>
 800431e:	2301      	movs	r3, #1
 8004320:	e000      	b.n	8004324 <HAL_GPIO_Init+0x204>
 8004322:	2300      	movs	r3, #0
 8004324:	69fa      	ldr	r2, [r7, #28]
 8004326:	f002 0203 	and.w	r2, r2, #3
 800432a:	0092      	lsls	r2, r2, #2
 800432c:	4093      	lsls	r3, r2
 800432e:	69ba      	ldr	r2, [r7, #24]
 8004330:	4313      	orrs	r3, r2
 8004332:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004334:	4935      	ldr	r1, [pc, #212]	; (800440c <HAL_GPIO_Init+0x2ec>)
 8004336:	69fb      	ldr	r3, [r7, #28]
 8004338:	089b      	lsrs	r3, r3, #2
 800433a:	3302      	adds	r3, #2
 800433c:	69ba      	ldr	r2, [r7, #24]
 800433e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004342:	4b38      	ldr	r3, [pc, #224]	; (8004424 <HAL_GPIO_Init+0x304>)
 8004344:	689b      	ldr	r3, [r3, #8]
 8004346:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004348:	693b      	ldr	r3, [r7, #16]
 800434a:	43db      	mvns	r3, r3
 800434c:	69ba      	ldr	r2, [r7, #24]
 800434e:	4013      	ands	r3, r2
 8004350:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800435a:	2b00      	cmp	r3, #0
 800435c:	d003      	beq.n	8004366 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800435e:	69ba      	ldr	r2, [r7, #24]
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	4313      	orrs	r3, r2
 8004364:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004366:	4a2f      	ldr	r2, [pc, #188]	; (8004424 <HAL_GPIO_Init+0x304>)
 8004368:	69bb      	ldr	r3, [r7, #24]
 800436a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800436c:	4b2d      	ldr	r3, [pc, #180]	; (8004424 <HAL_GPIO_Init+0x304>)
 800436e:	68db      	ldr	r3, [r3, #12]
 8004370:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	43db      	mvns	r3, r3
 8004376:	69ba      	ldr	r2, [r7, #24]
 8004378:	4013      	ands	r3, r2
 800437a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004384:	2b00      	cmp	r3, #0
 8004386:	d003      	beq.n	8004390 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004388:	69ba      	ldr	r2, [r7, #24]
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	4313      	orrs	r3, r2
 800438e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004390:	4a24      	ldr	r2, [pc, #144]	; (8004424 <HAL_GPIO_Init+0x304>)
 8004392:	69bb      	ldr	r3, [r7, #24]
 8004394:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004396:	4b23      	ldr	r3, [pc, #140]	; (8004424 <HAL_GPIO_Init+0x304>)
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800439c:	693b      	ldr	r3, [r7, #16]
 800439e:	43db      	mvns	r3, r3
 80043a0:	69ba      	ldr	r2, [r7, #24]
 80043a2:	4013      	ands	r3, r2
 80043a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d003      	beq.n	80043ba <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80043b2:	69ba      	ldr	r2, [r7, #24]
 80043b4:	693b      	ldr	r3, [r7, #16]
 80043b6:	4313      	orrs	r3, r2
 80043b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80043ba:	4a1a      	ldr	r2, [pc, #104]	; (8004424 <HAL_GPIO_Init+0x304>)
 80043bc:	69bb      	ldr	r3, [r7, #24]
 80043be:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80043c0:	4b18      	ldr	r3, [pc, #96]	; (8004424 <HAL_GPIO_Init+0x304>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	43db      	mvns	r3, r3
 80043ca:	69ba      	ldr	r2, [r7, #24]
 80043cc:	4013      	ands	r3, r2
 80043ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d003      	beq.n	80043e4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80043dc:	69ba      	ldr	r2, [r7, #24]
 80043de:	693b      	ldr	r3, [r7, #16]
 80043e0:	4313      	orrs	r3, r2
 80043e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80043e4:	4a0f      	ldr	r2, [pc, #60]	; (8004424 <HAL_GPIO_Init+0x304>)
 80043e6:	69bb      	ldr	r3, [r7, #24]
 80043e8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80043ea:	69fb      	ldr	r3, [r7, #28]
 80043ec:	3301      	adds	r3, #1
 80043ee:	61fb      	str	r3, [r7, #28]
 80043f0:	69fb      	ldr	r3, [r7, #28]
 80043f2:	2b0f      	cmp	r3, #15
 80043f4:	f67f aea2 	bls.w	800413c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80043f8:	bf00      	nop
 80043fa:	bf00      	nop
 80043fc:	3724      	adds	r7, #36	; 0x24
 80043fe:	46bd      	mov	sp, r7
 8004400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004404:	4770      	bx	lr
 8004406:	bf00      	nop
 8004408:	40023800 	.word	0x40023800
 800440c:	40013800 	.word	0x40013800
 8004410:	40020000 	.word	0x40020000
 8004414:	40020400 	.word	0x40020400
 8004418:	40020800 	.word	0x40020800
 800441c:	40020c00 	.word	0x40020c00
 8004420:	40021000 	.word	0x40021000
 8004424:	40013c00 	.word	0x40013c00

08004428 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004428:	b480      	push	{r7}
 800442a:	b085      	sub	sp, #20
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
 8004430:	460b      	mov	r3, r1
 8004432:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	691a      	ldr	r2, [r3, #16]
 8004438:	887b      	ldrh	r3, [r7, #2]
 800443a:	4013      	ands	r3, r2
 800443c:	2b00      	cmp	r3, #0
 800443e:	d002      	beq.n	8004446 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004440:	2301      	movs	r3, #1
 8004442:	73fb      	strb	r3, [r7, #15]
 8004444:	e001      	b.n	800444a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004446:	2300      	movs	r3, #0
 8004448:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800444a:	7bfb      	ldrb	r3, [r7, #15]
}
 800444c:	4618      	mov	r0, r3
 800444e:	3714      	adds	r7, #20
 8004450:	46bd      	mov	sp, r7
 8004452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004456:	4770      	bx	lr

08004458 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004458:	b480      	push	{r7}
 800445a:	b083      	sub	sp, #12
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
 8004460:	460b      	mov	r3, r1
 8004462:	807b      	strh	r3, [r7, #2]
 8004464:	4613      	mov	r3, r2
 8004466:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004468:	787b      	ldrb	r3, [r7, #1]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d003      	beq.n	8004476 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800446e:	887a      	ldrh	r2, [r7, #2]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004474:	e003      	b.n	800447e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004476:	887b      	ldrh	r3, [r7, #2]
 8004478:	041a      	lsls	r2, r3, #16
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	619a      	str	r2, [r3, #24]
}
 800447e:	bf00      	nop
 8004480:	370c      	adds	r7, #12
 8004482:	46bd      	mov	sp, r7
 8004484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004488:	4770      	bx	lr
	...

0800448c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b082      	sub	sp, #8
 8004490:	af00      	add	r7, sp, #0
 8004492:	4603      	mov	r3, r0
 8004494:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004496:	4b08      	ldr	r3, [pc, #32]	; (80044b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004498:	695a      	ldr	r2, [r3, #20]
 800449a:	88fb      	ldrh	r3, [r7, #6]
 800449c:	4013      	ands	r3, r2
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d006      	beq.n	80044b0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80044a2:	4a05      	ldr	r2, [pc, #20]	; (80044b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80044a4:	88fb      	ldrh	r3, [r7, #6]
 80044a6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80044a8:	88fb      	ldrh	r3, [r7, #6]
 80044aa:	4618      	mov	r0, r3
 80044ac:	f7fe f806 	bl	80024bc <HAL_GPIO_EXTI_Callback>
  }
}
 80044b0:	bf00      	nop
 80044b2:	3708      	adds	r7, #8
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bd80      	pop	{r7, pc}
 80044b8:	40013c00 	.word	0x40013c00

080044bc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b084      	sub	sp, #16
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d101      	bne.n	80044ce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80044ca:	2301      	movs	r3, #1
 80044cc:	e12b      	b.n	8004726 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044d4:	b2db      	uxtb	r3, r3
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d106      	bne.n	80044e8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2200      	movs	r2, #0
 80044de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80044e2:	6878      	ldr	r0, [r7, #4]
 80044e4:	f7fe fefa 	bl	80032dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2224      	movs	r2, #36	; 0x24
 80044ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	681a      	ldr	r2, [r3, #0]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f022 0201 	bic.w	r2, r2, #1
 80044fe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	681a      	ldr	r2, [r3, #0]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800450e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	681a      	ldr	r2, [r3, #0]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800451e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004520:	f001 fbfc 	bl	8005d1c <HAL_RCC_GetPCLK1Freq>
 8004524:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	4a81      	ldr	r2, [pc, #516]	; (8004730 <HAL_I2C_Init+0x274>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d807      	bhi.n	8004540 <HAL_I2C_Init+0x84>
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	4a80      	ldr	r2, [pc, #512]	; (8004734 <HAL_I2C_Init+0x278>)
 8004534:	4293      	cmp	r3, r2
 8004536:	bf94      	ite	ls
 8004538:	2301      	movls	r3, #1
 800453a:	2300      	movhi	r3, #0
 800453c:	b2db      	uxtb	r3, r3
 800453e:	e006      	b.n	800454e <HAL_I2C_Init+0x92>
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	4a7d      	ldr	r2, [pc, #500]	; (8004738 <HAL_I2C_Init+0x27c>)
 8004544:	4293      	cmp	r3, r2
 8004546:	bf94      	ite	ls
 8004548:	2301      	movls	r3, #1
 800454a:	2300      	movhi	r3, #0
 800454c:	b2db      	uxtb	r3, r3
 800454e:	2b00      	cmp	r3, #0
 8004550:	d001      	beq.n	8004556 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004552:	2301      	movs	r3, #1
 8004554:	e0e7      	b.n	8004726 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	4a78      	ldr	r2, [pc, #480]	; (800473c <HAL_I2C_Init+0x280>)
 800455a:	fba2 2303 	umull	r2, r3, r2, r3
 800455e:	0c9b      	lsrs	r3, r3, #18
 8004560:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	68ba      	ldr	r2, [r7, #8]
 8004572:	430a      	orrs	r2, r1
 8004574:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	6a1b      	ldr	r3, [r3, #32]
 800457c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	4a6a      	ldr	r2, [pc, #424]	; (8004730 <HAL_I2C_Init+0x274>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d802      	bhi.n	8004590 <HAL_I2C_Init+0xd4>
 800458a:	68bb      	ldr	r3, [r7, #8]
 800458c:	3301      	adds	r3, #1
 800458e:	e009      	b.n	80045a4 <HAL_I2C_Init+0xe8>
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004596:	fb02 f303 	mul.w	r3, r2, r3
 800459a:	4a69      	ldr	r2, [pc, #420]	; (8004740 <HAL_I2C_Init+0x284>)
 800459c:	fba2 2303 	umull	r2, r3, r2, r3
 80045a0:	099b      	lsrs	r3, r3, #6
 80045a2:	3301      	adds	r3, #1
 80045a4:	687a      	ldr	r2, [r7, #4]
 80045a6:	6812      	ldr	r2, [r2, #0]
 80045a8:	430b      	orrs	r3, r1
 80045aa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	69db      	ldr	r3, [r3, #28]
 80045b2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80045b6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	495c      	ldr	r1, [pc, #368]	; (8004730 <HAL_I2C_Init+0x274>)
 80045c0:	428b      	cmp	r3, r1
 80045c2:	d819      	bhi.n	80045f8 <HAL_I2C_Init+0x13c>
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	1e59      	subs	r1, r3, #1
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	005b      	lsls	r3, r3, #1
 80045ce:	fbb1 f3f3 	udiv	r3, r1, r3
 80045d2:	1c59      	adds	r1, r3, #1
 80045d4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80045d8:	400b      	ands	r3, r1
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d00a      	beq.n	80045f4 <HAL_I2C_Init+0x138>
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	1e59      	subs	r1, r3, #1
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	005b      	lsls	r3, r3, #1
 80045e8:	fbb1 f3f3 	udiv	r3, r1, r3
 80045ec:	3301      	adds	r3, #1
 80045ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045f2:	e051      	b.n	8004698 <HAL_I2C_Init+0x1dc>
 80045f4:	2304      	movs	r3, #4
 80045f6:	e04f      	b.n	8004698 <HAL_I2C_Init+0x1dc>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	689b      	ldr	r3, [r3, #8]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d111      	bne.n	8004624 <HAL_I2C_Init+0x168>
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	1e58      	subs	r0, r3, #1
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6859      	ldr	r1, [r3, #4]
 8004608:	460b      	mov	r3, r1
 800460a:	005b      	lsls	r3, r3, #1
 800460c:	440b      	add	r3, r1
 800460e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004612:	3301      	adds	r3, #1
 8004614:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004618:	2b00      	cmp	r3, #0
 800461a:	bf0c      	ite	eq
 800461c:	2301      	moveq	r3, #1
 800461e:	2300      	movne	r3, #0
 8004620:	b2db      	uxtb	r3, r3
 8004622:	e012      	b.n	800464a <HAL_I2C_Init+0x18e>
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	1e58      	subs	r0, r3, #1
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6859      	ldr	r1, [r3, #4]
 800462c:	460b      	mov	r3, r1
 800462e:	009b      	lsls	r3, r3, #2
 8004630:	440b      	add	r3, r1
 8004632:	0099      	lsls	r1, r3, #2
 8004634:	440b      	add	r3, r1
 8004636:	fbb0 f3f3 	udiv	r3, r0, r3
 800463a:	3301      	adds	r3, #1
 800463c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004640:	2b00      	cmp	r3, #0
 8004642:	bf0c      	ite	eq
 8004644:	2301      	moveq	r3, #1
 8004646:	2300      	movne	r3, #0
 8004648:	b2db      	uxtb	r3, r3
 800464a:	2b00      	cmp	r3, #0
 800464c:	d001      	beq.n	8004652 <HAL_I2C_Init+0x196>
 800464e:	2301      	movs	r3, #1
 8004650:	e022      	b.n	8004698 <HAL_I2C_Init+0x1dc>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	689b      	ldr	r3, [r3, #8]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d10e      	bne.n	8004678 <HAL_I2C_Init+0x1bc>
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	1e58      	subs	r0, r3, #1
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6859      	ldr	r1, [r3, #4]
 8004662:	460b      	mov	r3, r1
 8004664:	005b      	lsls	r3, r3, #1
 8004666:	440b      	add	r3, r1
 8004668:	fbb0 f3f3 	udiv	r3, r0, r3
 800466c:	3301      	adds	r3, #1
 800466e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004672:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004676:	e00f      	b.n	8004698 <HAL_I2C_Init+0x1dc>
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	1e58      	subs	r0, r3, #1
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6859      	ldr	r1, [r3, #4]
 8004680:	460b      	mov	r3, r1
 8004682:	009b      	lsls	r3, r3, #2
 8004684:	440b      	add	r3, r1
 8004686:	0099      	lsls	r1, r3, #2
 8004688:	440b      	add	r3, r1
 800468a:	fbb0 f3f3 	udiv	r3, r0, r3
 800468e:	3301      	adds	r3, #1
 8004690:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004694:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004698:	6879      	ldr	r1, [r7, #4]
 800469a:	6809      	ldr	r1, [r1, #0]
 800469c:	4313      	orrs	r3, r2
 800469e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	69da      	ldr	r2, [r3, #28]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6a1b      	ldr	r3, [r3, #32]
 80046b2:	431a      	orrs	r2, r3
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	430a      	orrs	r2, r1
 80046ba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	689b      	ldr	r3, [r3, #8]
 80046c2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80046c6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80046ca:	687a      	ldr	r2, [r7, #4]
 80046cc:	6911      	ldr	r1, [r2, #16]
 80046ce:	687a      	ldr	r2, [r7, #4]
 80046d0:	68d2      	ldr	r2, [r2, #12]
 80046d2:	4311      	orrs	r1, r2
 80046d4:	687a      	ldr	r2, [r7, #4]
 80046d6:	6812      	ldr	r2, [r2, #0]
 80046d8:	430b      	orrs	r3, r1
 80046da:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	68db      	ldr	r3, [r3, #12]
 80046e2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	695a      	ldr	r2, [r3, #20]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	699b      	ldr	r3, [r3, #24]
 80046ee:	431a      	orrs	r2, r3
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	430a      	orrs	r2, r1
 80046f6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	681a      	ldr	r2, [r3, #0]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f042 0201 	orr.w	r2, r2, #1
 8004706:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2200      	movs	r2, #0
 800470c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2220      	movs	r2, #32
 8004712:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2200      	movs	r2, #0
 800471a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2200      	movs	r2, #0
 8004720:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004724:	2300      	movs	r3, #0
}
 8004726:	4618      	mov	r0, r3
 8004728:	3710      	adds	r7, #16
 800472a:	46bd      	mov	sp, r7
 800472c:	bd80      	pop	{r7, pc}
 800472e:	bf00      	nop
 8004730:	000186a0 	.word	0x000186a0
 8004734:	001e847f 	.word	0x001e847f
 8004738:	003d08ff 	.word	0x003d08ff
 800473c:	431bde83 	.word	0x431bde83
 8004740:	10624dd3 	.word	0x10624dd3

08004744 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b088      	sub	sp, #32
 8004748:	af02      	add	r7, sp, #8
 800474a:	60f8      	str	r0, [r7, #12]
 800474c:	4608      	mov	r0, r1
 800474e:	4611      	mov	r1, r2
 8004750:	461a      	mov	r2, r3
 8004752:	4603      	mov	r3, r0
 8004754:	817b      	strh	r3, [r7, #10]
 8004756:	460b      	mov	r3, r1
 8004758:	813b      	strh	r3, [r7, #8]
 800475a:	4613      	mov	r3, r2
 800475c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800475e:	f7fe ffef 	bl	8003740 <HAL_GetTick>
 8004762:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800476a:	b2db      	uxtb	r3, r3
 800476c:	2b20      	cmp	r3, #32
 800476e:	f040 80d9 	bne.w	8004924 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	9300      	str	r3, [sp, #0]
 8004776:	2319      	movs	r3, #25
 8004778:	2201      	movs	r2, #1
 800477a:	496d      	ldr	r1, [pc, #436]	; (8004930 <HAL_I2C_Mem_Write+0x1ec>)
 800477c:	68f8      	ldr	r0, [r7, #12]
 800477e:	f000 fc7f 	bl	8005080 <I2C_WaitOnFlagUntilTimeout>
 8004782:	4603      	mov	r3, r0
 8004784:	2b00      	cmp	r3, #0
 8004786:	d001      	beq.n	800478c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004788:	2302      	movs	r3, #2
 800478a:	e0cc      	b.n	8004926 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004792:	2b01      	cmp	r3, #1
 8004794:	d101      	bne.n	800479a <HAL_I2C_Mem_Write+0x56>
 8004796:	2302      	movs	r3, #2
 8004798:	e0c5      	b.n	8004926 <HAL_I2C_Mem_Write+0x1e2>
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	2201      	movs	r2, #1
 800479e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f003 0301 	and.w	r3, r3, #1
 80047ac:	2b01      	cmp	r3, #1
 80047ae:	d007      	beq.n	80047c0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	681a      	ldr	r2, [r3, #0]
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f042 0201 	orr.w	r2, r2, #1
 80047be:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	681a      	ldr	r2, [r3, #0]
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80047ce:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	2221      	movs	r2, #33	; 0x21
 80047d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	2240      	movs	r2, #64	; 0x40
 80047dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	2200      	movs	r2, #0
 80047e4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	6a3a      	ldr	r2, [r7, #32]
 80047ea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80047f0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047f6:	b29a      	uxth	r2, r3
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	4a4d      	ldr	r2, [pc, #308]	; (8004934 <HAL_I2C_Mem_Write+0x1f0>)
 8004800:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004802:	88f8      	ldrh	r0, [r7, #6]
 8004804:	893a      	ldrh	r2, [r7, #8]
 8004806:	8979      	ldrh	r1, [r7, #10]
 8004808:	697b      	ldr	r3, [r7, #20]
 800480a:	9301      	str	r3, [sp, #4]
 800480c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800480e:	9300      	str	r3, [sp, #0]
 8004810:	4603      	mov	r3, r0
 8004812:	68f8      	ldr	r0, [r7, #12]
 8004814:	f000 fab6 	bl	8004d84 <I2C_RequestMemoryWrite>
 8004818:	4603      	mov	r3, r0
 800481a:	2b00      	cmp	r3, #0
 800481c:	d052      	beq.n	80048c4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800481e:	2301      	movs	r3, #1
 8004820:	e081      	b.n	8004926 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004822:	697a      	ldr	r2, [r7, #20]
 8004824:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004826:	68f8      	ldr	r0, [r7, #12]
 8004828:	f000 fd00 	bl	800522c <I2C_WaitOnTXEFlagUntilTimeout>
 800482c:	4603      	mov	r3, r0
 800482e:	2b00      	cmp	r3, #0
 8004830:	d00d      	beq.n	800484e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004836:	2b04      	cmp	r3, #4
 8004838:	d107      	bne.n	800484a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	681a      	ldr	r2, [r3, #0]
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004848:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800484a:	2301      	movs	r3, #1
 800484c:	e06b      	b.n	8004926 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004852:	781a      	ldrb	r2, [r3, #0]
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800485e:	1c5a      	adds	r2, r3, #1
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004868:	3b01      	subs	r3, #1
 800486a:	b29a      	uxth	r2, r3
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004874:	b29b      	uxth	r3, r3
 8004876:	3b01      	subs	r3, #1
 8004878:	b29a      	uxth	r2, r3
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	695b      	ldr	r3, [r3, #20]
 8004884:	f003 0304 	and.w	r3, r3, #4
 8004888:	2b04      	cmp	r3, #4
 800488a:	d11b      	bne.n	80048c4 <HAL_I2C_Mem_Write+0x180>
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004890:	2b00      	cmp	r3, #0
 8004892:	d017      	beq.n	80048c4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004898:	781a      	ldrb	r2, [r3, #0]
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a4:	1c5a      	adds	r2, r3, #1
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048ae:	3b01      	subs	r3, #1
 80048b0:	b29a      	uxth	r2, r3
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048ba:	b29b      	uxth	r3, r3
 80048bc:	3b01      	subs	r3, #1
 80048be:	b29a      	uxth	r2, r3
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d1aa      	bne.n	8004822 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80048cc:	697a      	ldr	r2, [r7, #20]
 80048ce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80048d0:	68f8      	ldr	r0, [r7, #12]
 80048d2:	f000 fcec 	bl	80052ae <I2C_WaitOnBTFFlagUntilTimeout>
 80048d6:	4603      	mov	r3, r0
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d00d      	beq.n	80048f8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048e0:	2b04      	cmp	r3, #4
 80048e2:	d107      	bne.n	80048f4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	681a      	ldr	r2, [r3, #0]
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048f2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80048f4:	2301      	movs	r3, #1
 80048f6:	e016      	b.n	8004926 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	681a      	ldr	r2, [r3, #0]
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004906:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	2220      	movs	r2, #32
 800490c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	2200      	movs	r2, #0
 8004914:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	2200      	movs	r2, #0
 800491c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004920:	2300      	movs	r3, #0
 8004922:	e000      	b.n	8004926 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004924:	2302      	movs	r3, #2
  }
}
 8004926:	4618      	mov	r0, r3
 8004928:	3718      	adds	r7, #24
 800492a:	46bd      	mov	sp, r7
 800492c:	bd80      	pop	{r7, pc}
 800492e:	bf00      	nop
 8004930:	00100002 	.word	0x00100002
 8004934:	ffff0000 	.word	0xffff0000

08004938 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b08c      	sub	sp, #48	; 0x30
 800493c:	af02      	add	r7, sp, #8
 800493e:	60f8      	str	r0, [r7, #12]
 8004940:	4608      	mov	r0, r1
 8004942:	4611      	mov	r1, r2
 8004944:	461a      	mov	r2, r3
 8004946:	4603      	mov	r3, r0
 8004948:	817b      	strh	r3, [r7, #10]
 800494a:	460b      	mov	r3, r1
 800494c:	813b      	strh	r3, [r7, #8]
 800494e:	4613      	mov	r3, r2
 8004950:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004952:	f7fe fef5 	bl	8003740 <HAL_GetTick>
 8004956:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800495e:	b2db      	uxtb	r3, r3
 8004960:	2b20      	cmp	r3, #32
 8004962:	f040 8208 	bne.w	8004d76 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004968:	9300      	str	r3, [sp, #0]
 800496a:	2319      	movs	r3, #25
 800496c:	2201      	movs	r2, #1
 800496e:	497b      	ldr	r1, [pc, #492]	; (8004b5c <HAL_I2C_Mem_Read+0x224>)
 8004970:	68f8      	ldr	r0, [r7, #12]
 8004972:	f000 fb85 	bl	8005080 <I2C_WaitOnFlagUntilTimeout>
 8004976:	4603      	mov	r3, r0
 8004978:	2b00      	cmp	r3, #0
 800497a:	d001      	beq.n	8004980 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800497c:	2302      	movs	r3, #2
 800497e:	e1fb      	b.n	8004d78 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004986:	2b01      	cmp	r3, #1
 8004988:	d101      	bne.n	800498e <HAL_I2C_Mem_Read+0x56>
 800498a:	2302      	movs	r3, #2
 800498c:	e1f4      	b.n	8004d78 <HAL_I2C_Mem_Read+0x440>
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	2201      	movs	r2, #1
 8004992:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f003 0301 	and.w	r3, r3, #1
 80049a0:	2b01      	cmp	r3, #1
 80049a2:	d007      	beq.n	80049b4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	681a      	ldr	r2, [r3, #0]
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f042 0201 	orr.w	r2, r2, #1
 80049b2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	681a      	ldr	r2, [r3, #0]
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80049c2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	2222      	movs	r2, #34	; 0x22
 80049c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	2240      	movs	r2, #64	; 0x40
 80049d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	2200      	movs	r2, #0
 80049d8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80049de:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80049e4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049ea:	b29a      	uxth	r2, r3
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	4a5b      	ldr	r2, [pc, #364]	; (8004b60 <HAL_I2C_Mem_Read+0x228>)
 80049f4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80049f6:	88f8      	ldrh	r0, [r7, #6]
 80049f8:	893a      	ldrh	r2, [r7, #8]
 80049fa:	8979      	ldrh	r1, [r7, #10]
 80049fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049fe:	9301      	str	r3, [sp, #4]
 8004a00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a02:	9300      	str	r3, [sp, #0]
 8004a04:	4603      	mov	r3, r0
 8004a06:	68f8      	ldr	r0, [r7, #12]
 8004a08:	f000 fa52 	bl	8004eb0 <I2C_RequestMemoryRead>
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d001      	beq.n	8004a16 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004a12:	2301      	movs	r3, #1
 8004a14:	e1b0      	b.n	8004d78 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d113      	bne.n	8004a46 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a1e:	2300      	movs	r3, #0
 8004a20:	623b      	str	r3, [r7, #32]
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	695b      	ldr	r3, [r3, #20]
 8004a28:	623b      	str	r3, [r7, #32]
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	699b      	ldr	r3, [r3, #24]
 8004a30:	623b      	str	r3, [r7, #32]
 8004a32:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	681a      	ldr	r2, [r3, #0]
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a42:	601a      	str	r2, [r3, #0]
 8004a44:	e184      	b.n	8004d50 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a4a:	2b01      	cmp	r3, #1
 8004a4c:	d11b      	bne.n	8004a86 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	681a      	ldr	r2, [r3, #0]
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a5c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a5e:	2300      	movs	r3, #0
 8004a60:	61fb      	str	r3, [r7, #28]
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	695b      	ldr	r3, [r3, #20]
 8004a68:	61fb      	str	r3, [r7, #28]
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	699b      	ldr	r3, [r3, #24]
 8004a70:	61fb      	str	r3, [r7, #28]
 8004a72:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	681a      	ldr	r2, [r3, #0]
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a82:	601a      	str	r2, [r3, #0]
 8004a84:	e164      	b.n	8004d50 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a8a:	2b02      	cmp	r3, #2
 8004a8c:	d11b      	bne.n	8004ac6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	681a      	ldr	r2, [r3, #0]
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a9c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	681a      	ldr	r2, [r3, #0]
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004aac:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004aae:	2300      	movs	r3, #0
 8004ab0:	61bb      	str	r3, [r7, #24]
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	695b      	ldr	r3, [r3, #20]
 8004ab8:	61bb      	str	r3, [r7, #24]
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	699b      	ldr	r3, [r3, #24]
 8004ac0:	61bb      	str	r3, [r7, #24]
 8004ac2:	69bb      	ldr	r3, [r7, #24]
 8004ac4:	e144      	b.n	8004d50 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	617b      	str	r3, [r7, #20]
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	695b      	ldr	r3, [r3, #20]
 8004ad0:	617b      	str	r3, [r7, #20]
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	699b      	ldr	r3, [r3, #24]
 8004ad8:	617b      	str	r3, [r7, #20]
 8004ada:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004adc:	e138      	b.n	8004d50 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ae2:	2b03      	cmp	r3, #3
 8004ae4:	f200 80f1 	bhi.w	8004cca <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004aec:	2b01      	cmp	r3, #1
 8004aee:	d123      	bne.n	8004b38 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004af0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004af2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004af4:	68f8      	ldr	r0, [r7, #12]
 8004af6:	f000 fc1b 	bl	8005330 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004afa:	4603      	mov	r3, r0
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d001      	beq.n	8004b04 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004b00:	2301      	movs	r3, #1
 8004b02:	e139      	b.n	8004d78 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	691a      	ldr	r2, [r3, #16]
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b0e:	b2d2      	uxtb	r2, r2
 8004b10:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b16:	1c5a      	adds	r2, r3, #1
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b20:	3b01      	subs	r3, #1
 8004b22:	b29a      	uxth	r2, r3
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b2c:	b29b      	uxth	r3, r3
 8004b2e:	3b01      	subs	r3, #1
 8004b30:	b29a      	uxth	r2, r3
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004b36:	e10b      	b.n	8004d50 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b3c:	2b02      	cmp	r3, #2
 8004b3e:	d14e      	bne.n	8004bde <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b42:	9300      	str	r3, [sp, #0]
 8004b44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b46:	2200      	movs	r2, #0
 8004b48:	4906      	ldr	r1, [pc, #24]	; (8004b64 <HAL_I2C_Mem_Read+0x22c>)
 8004b4a:	68f8      	ldr	r0, [r7, #12]
 8004b4c:	f000 fa98 	bl	8005080 <I2C_WaitOnFlagUntilTimeout>
 8004b50:	4603      	mov	r3, r0
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d008      	beq.n	8004b68 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004b56:	2301      	movs	r3, #1
 8004b58:	e10e      	b.n	8004d78 <HAL_I2C_Mem_Read+0x440>
 8004b5a:	bf00      	nop
 8004b5c:	00100002 	.word	0x00100002
 8004b60:	ffff0000 	.word	0xffff0000
 8004b64:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	681a      	ldr	r2, [r3, #0]
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b76:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	691a      	ldr	r2, [r3, #16]
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b82:	b2d2      	uxtb	r2, r2
 8004b84:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b8a:	1c5a      	adds	r2, r3, #1
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b94:	3b01      	subs	r3, #1
 8004b96:	b29a      	uxth	r2, r3
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ba0:	b29b      	uxth	r3, r3
 8004ba2:	3b01      	subs	r3, #1
 8004ba4:	b29a      	uxth	r2, r3
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	691a      	ldr	r2, [r3, #16]
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bb4:	b2d2      	uxtb	r2, r2
 8004bb6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bbc:	1c5a      	adds	r2, r3, #1
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bc6:	3b01      	subs	r3, #1
 8004bc8:	b29a      	uxth	r2, r3
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bd2:	b29b      	uxth	r3, r3
 8004bd4:	3b01      	subs	r3, #1
 8004bd6:	b29a      	uxth	r2, r3
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004bdc:	e0b8      	b.n	8004d50 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be0:	9300      	str	r3, [sp, #0]
 8004be2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004be4:	2200      	movs	r2, #0
 8004be6:	4966      	ldr	r1, [pc, #408]	; (8004d80 <HAL_I2C_Mem_Read+0x448>)
 8004be8:	68f8      	ldr	r0, [r7, #12]
 8004bea:	f000 fa49 	bl	8005080 <I2C_WaitOnFlagUntilTimeout>
 8004bee:	4603      	mov	r3, r0
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d001      	beq.n	8004bf8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	e0bf      	b.n	8004d78 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	681a      	ldr	r2, [r3, #0]
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c06:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	691a      	ldr	r2, [r3, #16]
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c12:	b2d2      	uxtb	r2, r2
 8004c14:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c1a:	1c5a      	adds	r2, r3, #1
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c24:	3b01      	subs	r3, #1
 8004c26:	b29a      	uxth	r2, r3
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c30:	b29b      	uxth	r3, r3
 8004c32:	3b01      	subs	r3, #1
 8004c34:	b29a      	uxth	r2, r3
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c3c:	9300      	str	r3, [sp, #0]
 8004c3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c40:	2200      	movs	r2, #0
 8004c42:	494f      	ldr	r1, [pc, #316]	; (8004d80 <HAL_I2C_Mem_Read+0x448>)
 8004c44:	68f8      	ldr	r0, [r7, #12]
 8004c46:	f000 fa1b 	bl	8005080 <I2C_WaitOnFlagUntilTimeout>
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d001      	beq.n	8004c54 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004c50:	2301      	movs	r3, #1
 8004c52:	e091      	b.n	8004d78 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	681a      	ldr	r2, [r3, #0]
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c62:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	691a      	ldr	r2, [r3, #16]
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c6e:	b2d2      	uxtb	r2, r2
 8004c70:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c76:	1c5a      	adds	r2, r3, #1
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c80:	3b01      	subs	r3, #1
 8004c82:	b29a      	uxth	r2, r3
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c8c:	b29b      	uxth	r3, r3
 8004c8e:	3b01      	subs	r3, #1
 8004c90:	b29a      	uxth	r2, r3
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	691a      	ldr	r2, [r3, #16]
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca0:	b2d2      	uxtb	r2, r2
 8004ca2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca8:	1c5a      	adds	r2, r3, #1
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cb2:	3b01      	subs	r3, #1
 8004cb4:	b29a      	uxth	r2, r3
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cbe:	b29b      	uxth	r3, r3
 8004cc0:	3b01      	subs	r3, #1
 8004cc2:	b29a      	uxth	r2, r3
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004cc8:	e042      	b.n	8004d50 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004cca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ccc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004cce:	68f8      	ldr	r0, [r7, #12]
 8004cd0:	f000 fb2e 	bl	8005330 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d001      	beq.n	8004cde <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004cda:	2301      	movs	r3, #1
 8004cdc:	e04c      	b.n	8004d78 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	691a      	ldr	r2, [r3, #16]
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce8:	b2d2      	uxtb	r2, r2
 8004cea:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cf0:	1c5a      	adds	r2, r3, #1
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cfa:	3b01      	subs	r3, #1
 8004cfc:	b29a      	uxth	r2, r3
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d06:	b29b      	uxth	r3, r3
 8004d08:	3b01      	subs	r3, #1
 8004d0a:	b29a      	uxth	r2, r3
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	695b      	ldr	r3, [r3, #20]
 8004d16:	f003 0304 	and.w	r3, r3, #4
 8004d1a:	2b04      	cmp	r3, #4
 8004d1c:	d118      	bne.n	8004d50 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	691a      	ldr	r2, [r3, #16]
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d28:	b2d2      	uxtb	r2, r2
 8004d2a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d30:	1c5a      	adds	r2, r3, #1
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d3a:	3b01      	subs	r3, #1
 8004d3c:	b29a      	uxth	r2, r3
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d46:	b29b      	uxth	r3, r3
 8004d48:	3b01      	subs	r3, #1
 8004d4a:	b29a      	uxth	r2, r3
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	f47f aec2 	bne.w	8004ade <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	2220      	movs	r2, #32
 8004d5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	2200      	movs	r2, #0
 8004d66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004d72:	2300      	movs	r3, #0
 8004d74:	e000      	b.n	8004d78 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004d76:	2302      	movs	r3, #2
  }
}
 8004d78:	4618      	mov	r0, r3
 8004d7a:	3728      	adds	r7, #40	; 0x28
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	bd80      	pop	{r7, pc}
 8004d80:	00010004 	.word	0x00010004

08004d84 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b088      	sub	sp, #32
 8004d88:	af02      	add	r7, sp, #8
 8004d8a:	60f8      	str	r0, [r7, #12]
 8004d8c:	4608      	mov	r0, r1
 8004d8e:	4611      	mov	r1, r2
 8004d90:	461a      	mov	r2, r3
 8004d92:	4603      	mov	r3, r0
 8004d94:	817b      	strh	r3, [r7, #10]
 8004d96:	460b      	mov	r3, r1
 8004d98:	813b      	strh	r3, [r7, #8]
 8004d9a:	4613      	mov	r3, r2
 8004d9c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	681a      	ldr	r2, [r3, #0]
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004dac:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db0:	9300      	str	r3, [sp, #0]
 8004db2:	6a3b      	ldr	r3, [r7, #32]
 8004db4:	2200      	movs	r2, #0
 8004db6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004dba:	68f8      	ldr	r0, [r7, #12]
 8004dbc:	f000 f960 	bl	8005080 <I2C_WaitOnFlagUntilTimeout>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d00d      	beq.n	8004de2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dd0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004dd4:	d103      	bne.n	8004dde <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004ddc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004dde:	2303      	movs	r3, #3
 8004de0:	e05f      	b.n	8004ea2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004de2:	897b      	ldrh	r3, [r7, #10]
 8004de4:	b2db      	uxtb	r3, r3
 8004de6:	461a      	mov	r2, r3
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004df0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df4:	6a3a      	ldr	r2, [r7, #32]
 8004df6:	492d      	ldr	r1, [pc, #180]	; (8004eac <I2C_RequestMemoryWrite+0x128>)
 8004df8:	68f8      	ldr	r0, [r7, #12]
 8004dfa:	f000 f998 	bl	800512e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004dfe:	4603      	mov	r3, r0
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d001      	beq.n	8004e08 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004e04:	2301      	movs	r3, #1
 8004e06:	e04c      	b.n	8004ea2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e08:	2300      	movs	r3, #0
 8004e0a:	617b      	str	r3, [r7, #20]
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	695b      	ldr	r3, [r3, #20]
 8004e12:	617b      	str	r3, [r7, #20]
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	699b      	ldr	r3, [r3, #24]
 8004e1a:	617b      	str	r3, [r7, #20]
 8004e1c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e20:	6a39      	ldr	r1, [r7, #32]
 8004e22:	68f8      	ldr	r0, [r7, #12]
 8004e24:	f000 fa02 	bl	800522c <I2C_WaitOnTXEFlagUntilTimeout>
 8004e28:	4603      	mov	r3, r0
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d00d      	beq.n	8004e4a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e32:	2b04      	cmp	r3, #4
 8004e34:	d107      	bne.n	8004e46 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	681a      	ldr	r2, [r3, #0]
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e44:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004e46:	2301      	movs	r3, #1
 8004e48:	e02b      	b.n	8004ea2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004e4a:	88fb      	ldrh	r3, [r7, #6]
 8004e4c:	2b01      	cmp	r3, #1
 8004e4e:	d105      	bne.n	8004e5c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004e50:	893b      	ldrh	r3, [r7, #8]
 8004e52:	b2da      	uxtb	r2, r3
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	611a      	str	r2, [r3, #16]
 8004e5a:	e021      	b.n	8004ea0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004e5c:	893b      	ldrh	r3, [r7, #8]
 8004e5e:	0a1b      	lsrs	r3, r3, #8
 8004e60:	b29b      	uxth	r3, r3
 8004e62:	b2da      	uxtb	r2, r3
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e6c:	6a39      	ldr	r1, [r7, #32]
 8004e6e:	68f8      	ldr	r0, [r7, #12]
 8004e70:	f000 f9dc 	bl	800522c <I2C_WaitOnTXEFlagUntilTimeout>
 8004e74:	4603      	mov	r3, r0
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d00d      	beq.n	8004e96 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e7e:	2b04      	cmp	r3, #4
 8004e80:	d107      	bne.n	8004e92 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	681a      	ldr	r2, [r3, #0]
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e90:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004e92:	2301      	movs	r3, #1
 8004e94:	e005      	b.n	8004ea2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004e96:	893b      	ldrh	r3, [r7, #8]
 8004e98:	b2da      	uxtb	r2, r3
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004ea0:	2300      	movs	r3, #0
}
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	3718      	adds	r7, #24
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	bd80      	pop	{r7, pc}
 8004eaa:	bf00      	nop
 8004eac:	00010002 	.word	0x00010002

08004eb0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b088      	sub	sp, #32
 8004eb4:	af02      	add	r7, sp, #8
 8004eb6:	60f8      	str	r0, [r7, #12]
 8004eb8:	4608      	mov	r0, r1
 8004eba:	4611      	mov	r1, r2
 8004ebc:	461a      	mov	r2, r3
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	817b      	strh	r3, [r7, #10]
 8004ec2:	460b      	mov	r3, r1
 8004ec4:	813b      	strh	r3, [r7, #8]
 8004ec6:	4613      	mov	r3, r2
 8004ec8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	681a      	ldr	r2, [r3, #0]
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004ed8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	681a      	ldr	r2, [r3, #0]
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ee8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eec:	9300      	str	r3, [sp, #0]
 8004eee:	6a3b      	ldr	r3, [r7, #32]
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004ef6:	68f8      	ldr	r0, [r7, #12]
 8004ef8:	f000 f8c2 	bl	8005080 <I2C_WaitOnFlagUntilTimeout>
 8004efc:	4603      	mov	r3, r0
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d00d      	beq.n	8004f1e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f10:	d103      	bne.n	8004f1a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004f18:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004f1a:	2303      	movs	r3, #3
 8004f1c:	e0aa      	b.n	8005074 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004f1e:	897b      	ldrh	r3, [r7, #10]
 8004f20:	b2db      	uxtb	r3, r3
 8004f22:	461a      	mov	r2, r3
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004f2c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f30:	6a3a      	ldr	r2, [r7, #32]
 8004f32:	4952      	ldr	r1, [pc, #328]	; (800507c <I2C_RequestMemoryRead+0x1cc>)
 8004f34:	68f8      	ldr	r0, [r7, #12]
 8004f36:	f000 f8fa 	bl	800512e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d001      	beq.n	8004f44 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004f40:	2301      	movs	r3, #1
 8004f42:	e097      	b.n	8005074 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f44:	2300      	movs	r3, #0
 8004f46:	617b      	str	r3, [r7, #20]
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	695b      	ldr	r3, [r3, #20]
 8004f4e:	617b      	str	r3, [r7, #20]
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	699b      	ldr	r3, [r3, #24]
 8004f56:	617b      	str	r3, [r7, #20]
 8004f58:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f5c:	6a39      	ldr	r1, [r7, #32]
 8004f5e:	68f8      	ldr	r0, [r7, #12]
 8004f60:	f000 f964 	bl	800522c <I2C_WaitOnTXEFlagUntilTimeout>
 8004f64:	4603      	mov	r3, r0
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d00d      	beq.n	8004f86 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f6e:	2b04      	cmp	r3, #4
 8004f70:	d107      	bne.n	8004f82 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	681a      	ldr	r2, [r3, #0]
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f80:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004f82:	2301      	movs	r3, #1
 8004f84:	e076      	b.n	8005074 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004f86:	88fb      	ldrh	r3, [r7, #6]
 8004f88:	2b01      	cmp	r3, #1
 8004f8a:	d105      	bne.n	8004f98 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004f8c:	893b      	ldrh	r3, [r7, #8]
 8004f8e:	b2da      	uxtb	r2, r3
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	611a      	str	r2, [r3, #16]
 8004f96:	e021      	b.n	8004fdc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004f98:	893b      	ldrh	r3, [r7, #8]
 8004f9a:	0a1b      	lsrs	r3, r3, #8
 8004f9c:	b29b      	uxth	r3, r3
 8004f9e:	b2da      	uxtb	r2, r3
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004fa6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fa8:	6a39      	ldr	r1, [r7, #32]
 8004faa:	68f8      	ldr	r0, [r7, #12]
 8004fac:	f000 f93e 	bl	800522c <I2C_WaitOnTXEFlagUntilTimeout>
 8004fb0:	4603      	mov	r3, r0
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d00d      	beq.n	8004fd2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fba:	2b04      	cmp	r3, #4
 8004fbc:	d107      	bne.n	8004fce <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	681a      	ldr	r2, [r3, #0]
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fcc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004fce:	2301      	movs	r3, #1
 8004fd0:	e050      	b.n	8005074 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004fd2:	893b      	ldrh	r3, [r7, #8]
 8004fd4:	b2da      	uxtb	r2, r3
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004fdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fde:	6a39      	ldr	r1, [r7, #32]
 8004fe0:	68f8      	ldr	r0, [r7, #12]
 8004fe2:	f000 f923 	bl	800522c <I2C_WaitOnTXEFlagUntilTimeout>
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d00d      	beq.n	8005008 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ff0:	2b04      	cmp	r3, #4
 8004ff2:	d107      	bne.n	8005004 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	681a      	ldr	r2, [r3, #0]
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005002:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005004:	2301      	movs	r3, #1
 8005006:	e035      	b.n	8005074 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	681a      	ldr	r2, [r3, #0]
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005016:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800501a:	9300      	str	r3, [sp, #0]
 800501c:	6a3b      	ldr	r3, [r7, #32]
 800501e:	2200      	movs	r2, #0
 8005020:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005024:	68f8      	ldr	r0, [r7, #12]
 8005026:	f000 f82b 	bl	8005080 <I2C_WaitOnFlagUntilTimeout>
 800502a:	4603      	mov	r3, r0
 800502c:	2b00      	cmp	r3, #0
 800502e:	d00d      	beq.n	800504c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800503a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800503e:	d103      	bne.n	8005048 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005046:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005048:	2303      	movs	r3, #3
 800504a:	e013      	b.n	8005074 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800504c:	897b      	ldrh	r3, [r7, #10]
 800504e:	b2db      	uxtb	r3, r3
 8005050:	f043 0301 	orr.w	r3, r3, #1
 8005054:	b2da      	uxtb	r2, r3
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800505c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800505e:	6a3a      	ldr	r2, [r7, #32]
 8005060:	4906      	ldr	r1, [pc, #24]	; (800507c <I2C_RequestMemoryRead+0x1cc>)
 8005062:	68f8      	ldr	r0, [r7, #12]
 8005064:	f000 f863 	bl	800512e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005068:	4603      	mov	r3, r0
 800506a:	2b00      	cmp	r3, #0
 800506c:	d001      	beq.n	8005072 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800506e:	2301      	movs	r3, #1
 8005070:	e000      	b.n	8005074 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005072:	2300      	movs	r3, #0
}
 8005074:	4618      	mov	r0, r3
 8005076:	3718      	adds	r7, #24
 8005078:	46bd      	mov	sp, r7
 800507a:	bd80      	pop	{r7, pc}
 800507c:	00010002 	.word	0x00010002

08005080 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b084      	sub	sp, #16
 8005084:	af00      	add	r7, sp, #0
 8005086:	60f8      	str	r0, [r7, #12]
 8005088:	60b9      	str	r1, [r7, #8]
 800508a:	603b      	str	r3, [r7, #0]
 800508c:	4613      	mov	r3, r2
 800508e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005090:	e025      	b.n	80050de <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005098:	d021      	beq.n	80050de <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800509a:	f7fe fb51 	bl	8003740 <HAL_GetTick>
 800509e:	4602      	mov	r2, r0
 80050a0:	69bb      	ldr	r3, [r7, #24]
 80050a2:	1ad3      	subs	r3, r2, r3
 80050a4:	683a      	ldr	r2, [r7, #0]
 80050a6:	429a      	cmp	r2, r3
 80050a8:	d302      	bcc.n	80050b0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d116      	bne.n	80050de <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	2200      	movs	r2, #0
 80050b4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	2220      	movs	r2, #32
 80050ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	2200      	movs	r2, #0
 80050c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ca:	f043 0220 	orr.w	r2, r3, #32
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	2200      	movs	r2, #0
 80050d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80050da:	2301      	movs	r3, #1
 80050dc:	e023      	b.n	8005126 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80050de:	68bb      	ldr	r3, [r7, #8]
 80050e0:	0c1b      	lsrs	r3, r3, #16
 80050e2:	b2db      	uxtb	r3, r3
 80050e4:	2b01      	cmp	r3, #1
 80050e6:	d10d      	bne.n	8005104 <I2C_WaitOnFlagUntilTimeout+0x84>
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	695b      	ldr	r3, [r3, #20]
 80050ee:	43da      	mvns	r2, r3
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	4013      	ands	r3, r2
 80050f4:	b29b      	uxth	r3, r3
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	bf0c      	ite	eq
 80050fa:	2301      	moveq	r3, #1
 80050fc:	2300      	movne	r3, #0
 80050fe:	b2db      	uxtb	r3, r3
 8005100:	461a      	mov	r2, r3
 8005102:	e00c      	b.n	800511e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	699b      	ldr	r3, [r3, #24]
 800510a:	43da      	mvns	r2, r3
 800510c:	68bb      	ldr	r3, [r7, #8]
 800510e:	4013      	ands	r3, r2
 8005110:	b29b      	uxth	r3, r3
 8005112:	2b00      	cmp	r3, #0
 8005114:	bf0c      	ite	eq
 8005116:	2301      	moveq	r3, #1
 8005118:	2300      	movne	r3, #0
 800511a:	b2db      	uxtb	r3, r3
 800511c:	461a      	mov	r2, r3
 800511e:	79fb      	ldrb	r3, [r7, #7]
 8005120:	429a      	cmp	r2, r3
 8005122:	d0b6      	beq.n	8005092 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005124:	2300      	movs	r3, #0
}
 8005126:	4618      	mov	r0, r3
 8005128:	3710      	adds	r7, #16
 800512a:	46bd      	mov	sp, r7
 800512c:	bd80      	pop	{r7, pc}

0800512e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800512e:	b580      	push	{r7, lr}
 8005130:	b084      	sub	sp, #16
 8005132:	af00      	add	r7, sp, #0
 8005134:	60f8      	str	r0, [r7, #12]
 8005136:	60b9      	str	r1, [r7, #8]
 8005138:	607a      	str	r2, [r7, #4]
 800513a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800513c:	e051      	b.n	80051e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	695b      	ldr	r3, [r3, #20]
 8005144:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005148:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800514c:	d123      	bne.n	8005196 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	681a      	ldr	r2, [r3, #0]
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800515c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005166:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	2200      	movs	r2, #0
 800516c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	2220      	movs	r2, #32
 8005172:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	2200      	movs	r2, #0
 800517a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005182:	f043 0204 	orr.w	r2, r3, #4
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	2200      	movs	r2, #0
 800518e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005192:	2301      	movs	r3, #1
 8005194:	e046      	b.n	8005224 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800519c:	d021      	beq.n	80051e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800519e:	f7fe facf 	bl	8003740 <HAL_GetTick>
 80051a2:	4602      	mov	r2, r0
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	1ad3      	subs	r3, r2, r3
 80051a8:	687a      	ldr	r2, [r7, #4]
 80051aa:	429a      	cmp	r2, r3
 80051ac:	d302      	bcc.n	80051b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d116      	bne.n	80051e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	2200      	movs	r2, #0
 80051b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	2220      	movs	r2, #32
 80051be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	2200      	movs	r2, #0
 80051c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ce:	f043 0220 	orr.w	r2, r3, #32
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	2200      	movs	r2, #0
 80051da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80051de:	2301      	movs	r3, #1
 80051e0:	e020      	b.n	8005224 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	0c1b      	lsrs	r3, r3, #16
 80051e6:	b2db      	uxtb	r3, r3
 80051e8:	2b01      	cmp	r3, #1
 80051ea:	d10c      	bne.n	8005206 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	695b      	ldr	r3, [r3, #20]
 80051f2:	43da      	mvns	r2, r3
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	4013      	ands	r3, r2
 80051f8:	b29b      	uxth	r3, r3
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	bf14      	ite	ne
 80051fe:	2301      	movne	r3, #1
 8005200:	2300      	moveq	r3, #0
 8005202:	b2db      	uxtb	r3, r3
 8005204:	e00b      	b.n	800521e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	699b      	ldr	r3, [r3, #24]
 800520c:	43da      	mvns	r2, r3
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	4013      	ands	r3, r2
 8005212:	b29b      	uxth	r3, r3
 8005214:	2b00      	cmp	r3, #0
 8005216:	bf14      	ite	ne
 8005218:	2301      	movne	r3, #1
 800521a:	2300      	moveq	r3, #0
 800521c:	b2db      	uxtb	r3, r3
 800521e:	2b00      	cmp	r3, #0
 8005220:	d18d      	bne.n	800513e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005222:	2300      	movs	r3, #0
}
 8005224:	4618      	mov	r0, r3
 8005226:	3710      	adds	r7, #16
 8005228:	46bd      	mov	sp, r7
 800522a:	bd80      	pop	{r7, pc}

0800522c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b084      	sub	sp, #16
 8005230:	af00      	add	r7, sp, #0
 8005232:	60f8      	str	r0, [r7, #12]
 8005234:	60b9      	str	r1, [r7, #8]
 8005236:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005238:	e02d      	b.n	8005296 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800523a:	68f8      	ldr	r0, [r7, #12]
 800523c:	f000 f8ce 	bl	80053dc <I2C_IsAcknowledgeFailed>
 8005240:	4603      	mov	r3, r0
 8005242:	2b00      	cmp	r3, #0
 8005244:	d001      	beq.n	800524a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005246:	2301      	movs	r3, #1
 8005248:	e02d      	b.n	80052a6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005250:	d021      	beq.n	8005296 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005252:	f7fe fa75 	bl	8003740 <HAL_GetTick>
 8005256:	4602      	mov	r2, r0
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	1ad3      	subs	r3, r2, r3
 800525c:	68ba      	ldr	r2, [r7, #8]
 800525e:	429a      	cmp	r2, r3
 8005260:	d302      	bcc.n	8005268 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005262:	68bb      	ldr	r3, [r7, #8]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d116      	bne.n	8005296 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	2200      	movs	r2, #0
 800526c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	2220      	movs	r2, #32
 8005272:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	2200      	movs	r2, #0
 800527a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005282:	f043 0220 	orr.w	r2, r3, #32
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	2200      	movs	r2, #0
 800528e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005292:	2301      	movs	r3, #1
 8005294:	e007      	b.n	80052a6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	695b      	ldr	r3, [r3, #20]
 800529c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052a0:	2b80      	cmp	r3, #128	; 0x80
 80052a2:	d1ca      	bne.n	800523a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80052a4:	2300      	movs	r3, #0
}
 80052a6:	4618      	mov	r0, r3
 80052a8:	3710      	adds	r7, #16
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bd80      	pop	{r7, pc}

080052ae <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80052ae:	b580      	push	{r7, lr}
 80052b0:	b084      	sub	sp, #16
 80052b2:	af00      	add	r7, sp, #0
 80052b4:	60f8      	str	r0, [r7, #12]
 80052b6:	60b9      	str	r1, [r7, #8]
 80052b8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80052ba:	e02d      	b.n	8005318 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80052bc:	68f8      	ldr	r0, [r7, #12]
 80052be:	f000 f88d 	bl	80053dc <I2C_IsAcknowledgeFailed>
 80052c2:	4603      	mov	r3, r0
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d001      	beq.n	80052cc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80052c8:	2301      	movs	r3, #1
 80052ca:	e02d      	b.n	8005328 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80052d2:	d021      	beq.n	8005318 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052d4:	f7fe fa34 	bl	8003740 <HAL_GetTick>
 80052d8:	4602      	mov	r2, r0
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	1ad3      	subs	r3, r2, r3
 80052de:	68ba      	ldr	r2, [r7, #8]
 80052e0:	429a      	cmp	r2, r3
 80052e2:	d302      	bcc.n	80052ea <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d116      	bne.n	8005318 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	2200      	movs	r2, #0
 80052ee:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	2220      	movs	r2, #32
 80052f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	2200      	movs	r2, #0
 80052fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005304:	f043 0220 	orr.w	r2, r3, #32
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	2200      	movs	r2, #0
 8005310:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005314:	2301      	movs	r3, #1
 8005316:	e007      	b.n	8005328 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	695b      	ldr	r3, [r3, #20]
 800531e:	f003 0304 	and.w	r3, r3, #4
 8005322:	2b04      	cmp	r3, #4
 8005324:	d1ca      	bne.n	80052bc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005326:	2300      	movs	r3, #0
}
 8005328:	4618      	mov	r0, r3
 800532a:	3710      	adds	r7, #16
 800532c:	46bd      	mov	sp, r7
 800532e:	bd80      	pop	{r7, pc}

08005330 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b084      	sub	sp, #16
 8005334:	af00      	add	r7, sp, #0
 8005336:	60f8      	str	r0, [r7, #12]
 8005338:	60b9      	str	r1, [r7, #8]
 800533a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800533c:	e042      	b.n	80053c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	695b      	ldr	r3, [r3, #20]
 8005344:	f003 0310 	and.w	r3, r3, #16
 8005348:	2b10      	cmp	r3, #16
 800534a:	d119      	bne.n	8005380 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f06f 0210 	mvn.w	r2, #16
 8005354:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	2200      	movs	r2, #0
 800535a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	2220      	movs	r2, #32
 8005360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	2200      	movs	r2, #0
 8005368:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	2200      	movs	r2, #0
 8005378:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800537c:	2301      	movs	r3, #1
 800537e:	e029      	b.n	80053d4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005380:	f7fe f9de 	bl	8003740 <HAL_GetTick>
 8005384:	4602      	mov	r2, r0
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	1ad3      	subs	r3, r2, r3
 800538a:	68ba      	ldr	r2, [r7, #8]
 800538c:	429a      	cmp	r2, r3
 800538e:	d302      	bcc.n	8005396 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d116      	bne.n	80053c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	2200      	movs	r2, #0
 800539a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	2220      	movs	r2, #32
 80053a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	2200      	movs	r2, #0
 80053a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053b0:	f043 0220 	orr.w	r2, r3, #32
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	2200      	movs	r2, #0
 80053bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80053c0:	2301      	movs	r3, #1
 80053c2:	e007      	b.n	80053d4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	695b      	ldr	r3, [r3, #20]
 80053ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053ce:	2b40      	cmp	r3, #64	; 0x40
 80053d0:	d1b5      	bne.n	800533e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80053d2:	2300      	movs	r3, #0
}
 80053d4:	4618      	mov	r0, r3
 80053d6:	3710      	adds	r7, #16
 80053d8:	46bd      	mov	sp, r7
 80053da:	bd80      	pop	{r7, pc}

080053dc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80053dc:	b480      	push	{r7}
 80053de:	b083      	sub	sp, #12
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	695b      	ldr	r3, [r3, #20]
 80053ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053f2:	d11b      	bne.n	800542c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80053fc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2200      	movs	r2, #0
 8005402:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2220      	movs	r2, #32
 8005408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2200      	movs	r2, #0
 8005410:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005418:	f043 0204 	orr.w	r2, r3, #4
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2200      	movs	r2, #0
 8005424:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005428:	2301      	movs	r3, #1
 800542a:	e000      	b.n	800542e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800542c:	2300      	movs	r3, #0
}
 800542e:	4618      	mov	r0, r3
 8005430:	370c      	adds	r7, #12
 8005432:	46bd      	mov	sp, r7
 8005434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005438:	4770      	bx	lr
	...

0800543c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b086      	sub	sp, #24
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d101      	bne.n	800544e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800544a:	2301      	movs	r3, #1
 800544c:	e267      	b.n	800591e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f003 0301 	and.w	r3, r3, #1
 8005456:	2b00      	cmp	r3, #0
 8005458:	d075      	beq.n	8005546 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800545a:	4b88      	ldr	r3, [pc, #544]	; (800567c <HAL_RCC_OscConfig+0x240>)
 800545c:	689b      	ldr	r3, [r3, #8]
 800545e:	f003 030c 	and.w	r3, r3, #12
 8005462:	2b04      	cmp	r3, #4
 8005464:	d00c      	beq.n	8005480 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005466:	4b85      	ldr	r3, [pc, #532]	; (800567c <HAL_RCC_OscConfig+0x240>)
 8005468:	689b      	ldr	r3, [r3, #8]
 800546a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800546e:	2b08      	cmp	r3, #8
 8005470:	d112      	bne.n	8005498 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005472:	4b82      	ldr	r3, [pc, #520]	; (800567c <HAL_RCC_OscConfig+0x240>)
 8005474:	685b      	ldr	r3, [r3, #4]
 8005476:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800547a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800547e:	d10b      	bne.n	8005498 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005480:	4b7e      	ldr	r3, [pc, #504]	; (800567c <HAL_RCC_OscConfig+0x240>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005488:	2b00      	cmp	r3, #0
 800548a:	d05b      	beq.n	8005544 <HAL_RCC_OscConfig+0x108>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d157      	bne.n	8005544 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005494:	2301      	movs	r3, #1
 8005496:	e242      	b.n	800591e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	685b      	ldr	r3, [r3, #4]
 800549c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054a0:	d106      	bne.n	80054b0 <HAL_RCC_OscConfig+0x74>
 80054a2:	4b76      	ldr	r3, [pc, #472]	; (800567c <HAL_RCC_OscConfig+0x240>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4a75      	ldr	r2, [pc, #468]	; (800567c <HAL_RCC_OscConfig+0x240>)
 80054a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054ac:	6013      	str	r3, [r2, #0]
 80054ae:	e01d      	b.n	80054ec <HAL_RCC_OscConfig+0xb0>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	685b      	ldr	r3, [r3, #4]
 80054b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80054b8:	d10c      	bne.n	80054d4 <HAL_RCC_OscConfig+0x98>
 80054ba:	4b70      	ldr	r3, [pc, #448]	; (800567c <HAL_RCC_OscConfig+0x240>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4a6f      	ldr	r2, [pc, #444]	; (800567c <HAL_RCC_OscConfig+0x240>)
 80054c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80054c4:	6013      	str	r3, [r2, #0]
 80054c6:	4b6d      	ldr	r3, [pc, #436]	; (800567c <HAL_RCC_OscConfig+0x240>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4a6c      	ldr	r2, [pc, #432]	; (800567c <HAL_RCC_OscConfig+0x240>)
 80054cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054d0:	6013      	str	r3, [r2, #0]
 80054d2:	e00b      	b.n	80054ec <HAL_RCC_OscConfig+0xb0>
 80054d4:	4b69      	ldr	r3, [pc, #420]	; (800567c <HAL_RCC_OscConfig+0x240>)
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4a68      	ldr	r2, [pc, #416]	; (800567c <HAL_RCC_OscConfig+0x240>)
 80054da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80054de:	6013      	str	r3, [r2, #0]
 80054e0:	4b66      	ldr	r3, [pc, #408]	; (800567c <HAL_RCC_OscConfig+0x240>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4a65      	ldr	r2, [pc, #404]	; (800567c <HAL_RCC_OscConfig+0x240>)
 80054e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80054ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	685b      	ldr	r3, [r3, #4]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d013      	beq.n	800551c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054f4:	f7fe f924 	bl	8003740 <HAL_GetTick>
 80054f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054fa:	e008      	b.n	800550e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80054fc:	f7fe f920 	bl	8003740 <HAL_GetTick>
 8005500:	4602      	mov	r2, r0
 8005502:	693b      	ldr	r3, [r7, #16]
 8005504:	1ad3      	subs	r3, r2, r3
 8005506:	2b64      	cmp	r3, #100	; 0x64
 8005508:	d901      	bls.n	800550e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800550a:	2303      	movs	r3, #3
 800550c:	e207      	b.n	800591e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800550e:	4b5b      	ldr	r3, [pc, #364]	; (800567c <HAL_RCC_OscConfig+0x240>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005516:	2b00      	cmp	r3, #0
 8005518:	d0f0      	beq.n	80054fc <HAL_RCC_OscConfig+0xc0>
 800551a:	e014      	b.n	8005546 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800551c:	f7fe f910 	bl	8003740 <HAL_GetTick>
 8005520:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005522:	e008      	b.n	8005536 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005524:	f7fe f90c 	bl	8003740 <HAL_GetTick>
 8005528:	4602      	mov	r2, r0
 800552a:	693b      	ldr	r3, [r7, #16]
 800552c:	1ad3      	subs	r3, r2, r3
 800552e:	2b64      	cmp	r3, #100	; 0x64
 8005530:	d901      	bls.n	8005536 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005532:	2303      	movs	r3, #3
 8005534:	e1f3      	b.n	800591e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005536:	4b51      	ldr	r3, [pc, #324]	; (800567c <HAL_RCC_OscConfig+0x240>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800553e:	2b00      	cmp	r3, #0
 8005540:	d1f0      	bne.n	8005524 <HAL_RCC_OscConfig+0xe8>
 8005542:	e000      	b.n	8005546 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005544:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f003 0302 	and.w	r3, r3, #2
 800554e:	2b00      	cmp	r3, #0
 8005550:	d063      	beq.n	800561a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005552:	4b4a      	ldr	r3, [pc, #296]	; (800567c <HAL_RCC_OscConfig+0x240>)
 8005554:	689b      	ldr	r3, [r3, #8]
 8005556:	f003 030c 	and.w	r3, r3, #12
 800555a:	2b00      	cmp	r3, #0
 800555c:	d00b      	beq.n	8005576 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800555e:	4b47      	ldr	r3, [pc, #284]	; (800567c <HAL_RCC_OscConfig+0x240>)
 8005560:	689b      	ldr	r3, [r3, #8]
 8005562:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005566:	2b08      	cmp	r3, #8
 8005568:	d11c      	bne.n	80055a4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800556a:	4b44      	ldr	r3, [pc, #272]	; (800567c <HAL_RCC_OscConfig+0x240>)
 800556c:	685b      	ldr	r3, [r3, #4]
 800556e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005572:	2b00      	cmp	r3, #0
 8005574:	d116      	bne.n	80055a4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005576:	4b41      	ldr	r3, [pc, #260]	; (800567c <HAL_RCC_OscConfig+0x240>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f003 0302 	and.w	r3, r3, #2
 800557e:	2b00      	cmp	r3, #0
 8005580:	d005      	beq.n	800558e <HAL_RCC_OscConfig+0x152>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	68db      	ldr	r3, [r3, #12]
 8005586:	2b01      	cmp	r3, #1
 8005588:	d001      	beq.n	800558e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800558a:	2301      	movs	r3, #1
 800558c:	e1c7      	b.n	800591e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800558e:	4b3b      	ldr	r3, [pc, #236]	; (800567c <HAL_RCC_OscConfig+0x240>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	691b      	ldr	r3, [r3, #16]
 800559a:	00db      	lsls	r3, r3, #3
 800559c:	4937      	ldr	r1, [pc, #220]	; (800567c <HAL_RCC_OscConfig+0x240>)
 800559e:	4313      	orrs	r3, r2
 80055a0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80055a2:	e03a      	b.n	800561a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	68db      	ldr	r3, [r3, #12]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d020      	beq.n	80055ee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80055ac:	4b34      	ldr	r3, [pc, #208]	; (8005680 <HAL_RCC_OscConfig+0x244>)
 80055ae:	2201      	movs	r2, #1
 80055b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055b2:	f7fe f8c5 	bl	8003740 <HAL_GetTick>
 80055b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80055b8:	e008      	b.n	80055cc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80055ba:	f7fe f8c1 	bl	8003740 <HAL_GetTick>
 80055be:	4602      	mov	r2, r0
 80055c0:	693b      	ldr	r3, [r7, #16]
 80055c2:	1ad3      	subs	r3, r2, r3
 80055c4:	2b02      	cmp	r3, #2
 80055c6:	d901      	bls.n	80055cc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80055c8:	2303      	movs	r3, #3
 80055ca:	e1a8      	b.n	800591e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80055cc:	4b2b      	ldr	r3, [pc, #172]	; (800567c <HAL_RCC_OscConfig+0x240>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f003 0302 	and.w	r3, r3, #2
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d0f0      	beq.n	80055ba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055d8:	4b28      	ldr	r3, [pc, #160]	; (800567c <HAL_RCC_OscConfig+0x240>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	691b      	ldr	r3, [r3, #16]
 80055e4:	00db      	lsls	r3, r3, #3
 80055e6:	4925      	ldr	r1, [pc, #148]	; (800567c <HAL_RCC_OscConfig+0x240>)
 80055e8:	4313      	orrs	r3, r2
 80055ea:	600b      	str	r3, [r1, #0]
 80055ec:	e015      	b.n	800561a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80055ee:	4b24      	ldr	r3, [pc, #144]	; (8005680 <HAL_RCC_OscConfig+0x244>)
 80055f0:	2200      	movs	r2, #0
 80055f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055f4:	f7fe f8a4 	bl	8003740 <HAL_GetTick>
 80055f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80055fa:	e008      	b.n	800560e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80055fc:	f7fe f8a0 	bl	8003740 <HAL_GetTick>
 8005600:	4602      	mov	r2, r0
 8005602:	693b      	ldr	r3, [r7, #16]
 8005604:	1ad3      	subs	r3, r2, r3
 8005606:	2b02      	cmp	r3, #2
 8005608:	d901      	bls.n	800560e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800560a:	2303      	movs	r3, #3
 800560c:	e187      	b.n	800591e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800560e:	4b1b      	ldr	r3, [pc, #108]	; (800567c <HAL_RCC_OscConfig+0x240>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f003 0302 	and.w	r3, r3, #2
 8005616:	2b00      	cmp	r3, #0
 8005618:	d1f0      	bne.n	80055fc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f003 0308 	and.w	r3, r3, #8
 8005622:	2b00      	cmp	r3, #0
 8005624:	d036      	beq.n	8005694 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	695b      	ldr	r3, [r3, #20]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d016      	beq.n	800565c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800562e:	4b15      	ldr	r3, [pc, #84]	; (8005684 <HAL_RCC_OscConfig+0x248>)
 8005630:	2201      	movs	r2, #1
 8005632:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005634:	f7fe f884 	bl	8003740 <HAL_GetTick>
 8005638:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800563a:	e008      	b.n	800564e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800563c:	f7fe f880 	bl	8003740 <HAL_GetTick>
 8005640:	4602      	mov	r2, r0
 8005642:	693b      	ldr	r3, [r7, #16]
 8005644:	1ad3      	subs	r3, r2, r3
 8005646:	2b02      	cmp	r3, #2
 8005648:	d901      	bls.n	800564e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800564a:	2303      	movs	r3, #3
 800564c:	e167      	b.n	800591e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800564e:	4b0b      	ldr	r3, [pc, #44]	; (800567c <HAL_RCC_OscConfig+0x240>)
 8005650:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005652:	f003 0302 	and.w	r3, r3, #2
 8005656:	2b00      	cmp	r3, #0
 8005658:	d0f0      	beq.n	800563c <HAL_RCC_OscConfig+0x200>
 800565a:	e01b      	b.n	8005694 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800565c:	4b09      	ldr	r3, [pc, #36]	; (8005684 <HAL_RCC_OscConfig+0x248>)
 800565e:	2200      	movs	r2, #0
 8005660:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005662:	f7fe f86d 	bl	8003740 <HAL_GetTick>
 8005666:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005668:	e00e      	b.n	8005688 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800566a:	f7fe f869 	bl	8003740 <HAL_GetTick>
 800566e:	4602      	mov	r2, r0
 8005670:	693b      	ldr	r3, [r7, #16]
 8005672:	1ad3      	subs	r3, r2, r3
 8005674:	2b02      	cmp	r3, #2
 8005676:	d907      	bls.n	8005688 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005678:	2303      	movs	r3, #3
 800567a:	e150      	b.n	800591e <HAL_RCC_OscConfig+0x4e2>
 800567c:	40023800 	.word	0x40023800
 8005680:	42470000 	.word	0x42470000
 8005684:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005688:	4b88      	ldr	r3, [pc, #544]	; (80058ac <HAL_RCC_OscConfig+0x470>)
 800568a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800568c:	f003 0302 	and.w	r3, r3, #2
 8005690:	2b00      	cmp	r3, #0
 8005692:	d1ea      	bne.n	800566a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f003 0304 	and.w	r3, r3, #4
 800569c:	2b00      	cmp	r3, #0
 800569e:	f000 8097 	beq.w	80057d0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80056a2:	2300      	movs	r3, #0
 80056a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80056a6:	4b81      	ldr	r3, [pc, #516]	; (80058ac <HAL_RCC_OscConfig+0x470>)
 80056a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d10f      	bne.n	80056d2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80056b2:	2300      	movs	r3, #0
 80056b4:	60bb      	str	r3, [r7, #8]
 80056b6:	4b7d      	ldr	r3, [pc, #500]	; (80058ac <HAL_RCC_OscConfig+0x470>)
 80056b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ba:	4a7c      	ldr	r2, [pc, #496]	; (80058ac <HAL_RCC_OscConfig+0x470>)
 80056bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056c0:	6413      	str	r3, [r2, #64]	; 0x40
 80056c2:	4b7a      	ldr	r3, [pc, #488]	; (80058ac <HAL_RCC_OscConfig+0x470>)
 80056c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056ca:	60bb      	str	r3, [r7, #8]
 80056cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80056ce:	2301      	movs	r3, #1
 80056d0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056d2:	4b77      	ldr	r3, [pc, #476]	; (80058b0 <HAL_RCC_OscConfig+0x474>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d118      	bne.n	8005710 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80056de:	4b74      	ldr	r3, [pc, #464]	; (80058b0 <HAL_RCC_OscConfig+0x474>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	4a73      	ldr	r2, [pc, #460]	; (80058b0 <HAL_RCC_OscConfig+0x474>)
 80056e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80056ea:	f7fe f829 	bl	8003740 <HAL_GetTick>
 80056ee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056f0:	e008      	b.n	8005704 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056f2:	f7fe f825 	bl	8003740 <HAL_GetTick>
 80056f6:	4602      	mov	r2, r0
 80056f8:	693b      	ldr	r3, [r7, #16]
 80056fa:	1ad3      	subs	r3, r2, r3
 80056fc:	2b02      	cmp	r3, #2
 80056fe:	d901      	bls.n	8005704 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005700:	2303      	movs	r3, #3
 8005702:	e10c      	b.n	800591e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005704:	4b6a      	ldr	r3, [pc, #424]	; (80058b0 <HAL_RCC_OscConfig+0x474>)
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800570c:	2b00      	cmp	r3, #0
 800570e:	d0f0      	beq.n	80056f2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	689b      	ldr	r3, [r3, #8]
 8005714:	2b01      	cmp	r3, #1
 8005716:	d106      	bne.n	8005726 <HAL_RCC_OscConfig+0x2ea>
 8005718:	4b64      	ldr	r3, [pc, #400]	; (80058ac <HAL_RCC_OscConfig+0x470>)
 800571a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800571c:	4a63      	ldr	r2, [pc, #396]	; (80058ac <HAL_RCC_OscConfig+0x470>)
 800571e:	f043 0301 	orr.w	r3, r3, #1
 8005722:	6713      	str	r3, [r2, #112]	; 0x70
 8005724:	e01c      	b.n	8005760 <HAL_RCC_OscConfig+0x324>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	689b      	ldr	r3, [r3, #8]
 800572a:	2b05      	cmp	r3, #5
 800572c:	d10c      	bne.n	8005748 <HAL_RCC_OscConfig+0x30c>
 800572e:	4b5f      	ldr	r3, [pc, #380]	; (80058ac <HAL_RCC_OscConfig+0x470>)
 8005730:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005732:	4a5e      	ldr	r2, [pc, #376]	; (80058ac <HAL_RCC_OscConfig+0x470>)
 8005734:	f043 0304 	orr.w	r3, r3, #4
 8005738:	6713      	str	r3, [r2, #112]	; 0x70
 800573a:	4b5c      	ldr	r3, [pc, #368]	; (80058ac <HAL_RCC_OscConfig+0x470>)
 800573c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800573e:	4a5b      	ldr	r2, [pc, #364]	; (80058ac <HAL_RCC_OscConfig+0x470>)
 8005740:	f043 0301 	orr.w	r3, r3, #1
 8005744:	6713      	str	r3, [r2, #112]	; 0x70
 8005746:	e00b      	b.n	8005760 <HAL_RCC_OscConfig+0x324>
 8005748:	4b58      	ldr	r3, [pc, #352]	; (80058ac <HAL_RCC_OscConfig+0x470>)
 800574a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800574c:	4a57      	ldr	r2, [pc, #348]	; (80058ac <HAL_RCC_OscConfig+0x470>)
 800574e:	f023 0301 	bic.w	r3, r3, #1
 8005752:	6713      	str	r3, [r2, #112]	; 0x70
 8005754:	4b55      	ldr	r3, [pc, #340]	; (80058ac <HAL_RCC_OscConfig+0x470>)
 8005756:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005758:	4a54      	ldr	r2, [pc, #336]	; (80058ac <HAL_RCC_OscConfig+0x470>)
 800575a:	f023 0304 	bic.w	r3, r3, #4
 800575e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	689b      	ldr	r3, [r3, #8]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d015      	beq.n	8005794 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005768:	f7fd ffea 	bl	8003740 <HAL_GetTick>
 800576c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800576e:	e00a      	b.n	8005786 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005770:	f7fd ffe6 	bl	8003740 <HAL_GetTick>
 8005774:	4602      	mov	r2, r0
 8005776:	693b      	ldr	r3, [r7, #16]
 8005778:	1ad3      	subs	r3, r2, r3
 800577a:	f241 3288 	movw	r2, #5000	; 0x1388
 800577e:	4293      	cmp	r3, r2
 8005780:	d901      	bls.n	8005786 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005782:	2303      	movs	r3, #3
 8005784:	e0cb      	b.n	800591e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005786:	4b49      	ldr	r3, [pc, #292]	; (80058ac <HAL_RCC_OscConfig+0x470>)
 8005788:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800578a:	f003 0302 	and.w	r3, r3, #2
 800578e:	2b00      	cmp	r3, #0
 8005790:	d0ee      	beq.n	8005770 <HAL_RCC_OscConfig+0x334>
 8005792:	e014      	b.n	80057be <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005794:	f7fd ffd4 	bl	8003740 <HAL_GetTick>
 8005798:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800579a:	e00a      	b.n	80057b2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800579c:	f7fd ffd0 	bl	8003740 <HAL_GetTick>
 80057a0:	4602      	mov	r2, r0
 80057a2:	693b      	ldr	r3, [r7, #16]
 80057a4:	1ad3      	subs	r3, r2, r3
 80057a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d901      	bls.n	80057b2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80057ae:	2303      	movs	r3, #3
 80057b0:	e0b5      	b.n	800591e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80057b2:	4b3e      	ldr	r3, [pc, #248]	; (80058ac <HAL_RCC_OscConfig+0x470>)
 80057b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057b6:	f003 0302 	and.w	r3, r3, #2
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d1ee      	bne.n	800579c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80057be:	7dfb      	ldrb	r3, [r7, #23]
 80057c0:	2b01      	cmp	r3, #1
 80057c2:	d105      	bne.n	80057d0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80057c4:	4b39      	ldr	r3, [pc, #228]	; (80058ac <HAL_RCC_OscConfig+0x470>)
 80057c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057c8:	4a38      	ldr	r2, [pc, #224]	; (80058ac <HAL_RCC_OscConfig+0x470>)
 80057ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80057ce:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	699b      	ldr	r3, [r3, #24]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	f000 80a1 	beq.w	800591c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80057da:	4b34      	ldr	r3, [pc, #208]	; (80058ac <HAL_RCC_OscConfig+0x470>)
 80057dc:	689b      	ldr	r3, [r3, #8]
 80057de:	f003 030c 	and.w	r3, r3, #12
 80057e2:	2b08      	cmp	r3, #8
 80057e4:	d05c      	beq.n	80058a0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	699b      	ldr	r3, [r3, #24]
 80057ea:	2b02      	cmp	r3, #2
 80057ec:	d141      	bne.n	8005872 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057ee:	4b31      	ldr	r3, [pc, #196]	; (80058b4 <HAL_RCC_OscConfig+0x478>)
 80057f0:	2200      	movs	r2, #0
 80057f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057f4:	f7fd ffa4 	bl	8003740 <HAL_GetTick>
 80057f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057fa:	e008      	b.n	800580e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80057fc:	f7fd ffa0 	bl	8003740 <HAL_GetTick>
 8005800:	4602      	mov	r2, r0
 8005802:	693b      	ldr	r3, [r7, #16]
 8005804:	1ad3      	subs	r3, r2, r3
 8005806:	2b02      	cmp	r3, #2
 8005808:	d901      	bls.n	800580e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800580a:	2303      	movs	r3, #3
 800580c:	e087      	b.n	800591e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800580e:	4b27      	ldr	r3, [pc, #156]	; (80058ac <HAL_RCC_OscConfig+0x470>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005816:	2b00      	cmp	r3, #0
 8005818:	d1f0      	bne.n	80057fc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	69da      	ldr	r2, [r3, #28]
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6a1b      	ldr	r3, [r3, #32]
 8005822:	431a      	orrs	r2, r3
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005828:	019b      	lsls	r3, r3, #6
 800582a:	431a      	orrs	r2, r3
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005830:	085b      	lsrs	r3, r3, #1
 8005832:	3b01      	subs	r3, #1
 8005834:	041b      	lsls	r3, r3, #16
 8005836:	431a      	orrs	r2, r3
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800583c:	061b      	lsls	r3, r3, #24
 800583e:	491b      	ldr	r1, [pc, #108]	; (80058ac <HAL_RCC_OscConfig+0x470>)
 8005840:	4313      	orrs	r3, r2
 8005842:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005844:	4b1b      	ldr	r3, [pc, #108]	; (80058b4 <HAL_RCC_OscConfig+0x478>)
 8005846:	2201      	movs	r2, #1
 8005848:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800584a:	f7fd ff79 	bl	8003740 <HAL_GetTick>
 800584e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005850:	e008      	b.n	8005864 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005852:	f7fd ff75 	bl	8003740 <HAL_GetTick>
 8005856:	4602      	mov	r2, r0
 8005858:	693b      	ldr	r3, [r7, #16]
 800585a:	1ad3      	subs	r3, r2, r3
 800585c:	2b02      	cmp	r3, #2
 800585e:	d901      	bls.n	8005864 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005860:	2303      	movs	r3, #3
 8005862:	e05c      	b.n	800591e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005864:	4b11      	ldr	r3, [pc, #68]	; (80058ac <HAL_RCC_OscConfig+0x470>)
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800586c:	2b00      	cmp	r3, #0
 800586e:	d0f0      	beq.n	8005852 <HAL_RCC_OscConfig+0x416>
 8005870:	e054      	b.n	800591c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005872:	4b10      	ldr	r3, [pc, #64]	; (80058b4 <HAL_RCC_OscConfig+0x478>)
 8005874:	2200      	movs	r2, #0
 8005876:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005878:	f7fd ff62 	bl	8003740 <HAL_GetTick>
 800587c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800587e:	e008      	b.n	8005892 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005880:	f7fd ff5e 	bl	8003740 <HAL_GetTick>
 8005884:	4602      	mov	r2, r0
 8005886:	693b      	ldr	r3, [r7, #16]
 8005888:	1ad3      	subs	r3, r2, r3
 800588a:	2b02      	cmp	r3, #2
 800588c:	d901      	bls.n	8005892 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800588e:	2303      	movs	r3, #3
 8005890:	e045      	b.n	800591e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005892:	4b06      	ldr	r3, [pc, #24]	; (80058ac <HAL_RCC_OscConfig+0x470>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800589a:	2b00      	cmp	r3, #0
 800589c:	d1f0      	bne.n	8005880 <HAL_RCC_OscConfig+0x444>
 800589e:	e03d      	b.n	800591c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	699b      	ldr	r3, [r3, #24]
 80058a4:	2b01      	cmp	r3, #1
 80058a6:	d107      	bne.n	80058b8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80058a8:	2301      	movs	r3, #1
 80058aa:	e038      	b.n	800591e <HAL_RCC_OscConfig+0x4e2>
 80058ac:	40023800 	.word	0x40023800
 80058b0:	40007000 	.word	0x40007000
 80058b4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80058b8:	4b1b      	ldr	r3, [pc, #108]	; (8005928 <HAL_RCC_OscConfig+0x4ec>)
 80058ba:	685b      	ldr	r3, [r3, #4]
 80058bc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	699b      	ldr	r3, [r3, #24]
 80058c2:	2b01      	cmp	r3, #1
 80058c4:	d028      	beq.n	8005918 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80058d0:	429a      	cmp	r2, r3
 80058d2:	d121      	bne.n	8005918 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80058de:	429a      	cmp	r2, r3
 80058e0:	d11a      	bne.n	8005918 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80058e2:	68fa      	ldr	r2, [r7, #12]
 80058e4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80058e8:	4013      	ands	r3, r2
 80058ea:	687a      	ldr	r2, [r7, #4]
 80058ec:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80058ee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d111      	bne.n	8005918 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058fe:	085b      	lsrs	r3, r3, #1
 8005900:	3b01      	subs	r3, #1
 8005902:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005904:	429a      	cmp	r2, r3
 8005906:	d107      	bne.n	8005918 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005912:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005914:	429a      	cmp	r2, r3
 8005916:	d001      	beq.n	800591c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005918:	2301      	movs	r3, #1
 800591a:	e000      	b.n	800591e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800591c:	2300      	movs	r3, #0
}
 800591e:	4618      	mov	r0, r3
 8005920:	3718      	adds	r7, #24
 8005922:	46bd      	mov	sp, r7
 8005924:	bd80      	pop	{r7, pc}
 8005926:	bf00      	nop
 8005928:	40023800 	.word	0x40023800

0800592c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b084      	sub	sp, #16
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
 8005934:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d101      	bne.n	8005940 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800593c:	2301      	movs	r3, #1
 800593e:	e0cc      	b.n	8005ada <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005940:	4b68      	ldr	r3, [pc, #416]	; (8005ae4 <HAL_RCC_ClockConfig+0x1b8>)
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f003 0307 	and.w	r3, r3, #7
 8005948:	683a      	ldr	r2, [r7, #0]
 800594a:	429a      	cmp	r2, r3
 800594c:	d90c      	bls.n	8005968 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800594e:	4b65      	ldr	r3, [pc, #404]	; (8005ae4 <HAL_RCC_ClockConfig+0x1b8>)
 8005950:	683a      	ldr	r2, [r7, #0]
 8005952:	b2d2      	uxtb	r2, r2
 8005954:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005956:	4b63      	ldr	r3, [pc, #396]	; (8005ae4 <HAL_RCC_ClockConfig+0x1b8>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f003 0307 	and.w	r3, r3, #7
 800595e:	683a      	ldr	r2, [r7, #0]
 8005960:	429a      	cmp	r2, r3
 8005962:	d001      	beq.n	8005968 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005964:	2301      	movs	r3, #1
 8005966:	e0b8      	b.n	8005ada <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f003 0302 	and.w	r3, r3, #2
 8005970:	2b00      	cmp	r3, #0
 8005972:	d020      	beq.n	80059b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f003 0304 	and.w	r3, r3, #4
 800597c:	2b00      	cmp	r3, #0
 800597e:	d005      	beq.n	800598c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005980:	4b59      	ldr	r3, [pc, #356]	; (8005ae8 <HAL_RCC_ClockConfig+0x1bc>)
 8005982:	689b      	ldr	r3, [r3, #8]
 8005984:	4a58      	ldr	r2, [pc, #352]	; (8005ae8 <HAL_RCC_ClockConfig+0x1bc>)
 8005986:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800598a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f003 0308 	and.w	r3, r3, #8
 8005994:	2b00      	cmp	r3, #0
 8005996:	d005      	beq.n	80059a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005998:	4b53      	ldr	r3, [pc, #332]	; (8005ae8 <HAL_RCC_ClockConfig+0x1bc>)
 800599a:	689b      	ldr	r3, [r3, #8]
 800599c:	4a52      	ldr	r2, [pc, #328]	; (8005ae8 <HAL_RCC_ClockConfig+0x1bc>)
 800599e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80059a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80059a4:	4b50      	ldr	r3, [pc, #320]	; (8005ae8 <HAL_RCC_ClockConfig+0x1bc>)
 80059a6:	689b      	ldr	r3, [r3, #8]
 80059a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	689b      	ldr	r3, [r3, #8]
 80059b0:	494d      	ldr	r1, [pc, #308]	; (8005ae8 <HAL_RCC_ClockConfig+0x1bc>)
 80059b2:	4313      	orrs	r3, r2
 80059b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f003 0301 	and.w	r3, r3, #1
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d044      	beq.n	8005a4c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	685b      	ldr	r3, [r3, #4]
 80059c6:	2b01      	cmp	r3, #1
 80059c8:	d107      	bne.n	80059da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059ca:	4b47      	ldr	r3, [pc, #284]	; (8005ae8 <HAL_RCC_ClockConfig+0x1bc>)
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d119      	bne.n	8005a0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80059d6:	2301      	movs	r3, #1
 80059d8:	e07f      	b.n	8005ada <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	685b      	ldr	r3, [r3, #4]
 80059de:	2b02      	cmp	r3, #2
 80059e0:	d003      	beq.n	80059ea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80059e6:	2b03      	cmp	r3, #3
 80059e8:	d107      	bne.n	80059fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80059ea:	4b3f      	ldr	r3, [pc, #252]	; (8005ae8 <HAL_RCC_ClockConfig+0x1bc>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d109      	bne.n	8005a0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80059f6:	2301      	movs	r3, #1
 80059f8:	e06f      	b.n	8005ada <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059fa:	4b3b      	ldr	r3, [pc, #236]	; (8005ae8 <HAL_RCC_ClockConfig+0x1bc>)
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f003 0302 	and.w	r3, r3, #2
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d101      	bne.n	8005a0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a06:	2301      	movs	r3, #1
 8005a08:	e067      	b.n	8005ada <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005a0a:	4b37      	ldr	r3, [pc, #220]	; (8005ae8 <HAL_RCC_ClockConfig+0x1bc>)
 8005a0c:	689b      	ldr	r3, [r3, #8]
 8005a0e:	f023 0203 	bic.w	r2, r3, #3
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	685b      	ldr	r3, [r3, #4]
 8005a16:	4934      	ldr	r1, [pc, #208]	; (8005ae8 <HAL_RCC_ClockConfig+0x1bc>)
 8005a18:	4313      	orrs	r3, r2
 8005a1a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005a1c:	f7fd fe90 	bl	8003740 <HAL_GetTick>
 8005a20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a22:	e00a      	b.n	8005a3a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a24:	f7fd fe8c 	bl	8003740 <HAL_GetTick>
 8005a28:	4602      	mov	r2, r0
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	1ad3      	subs	r3, r2, r3
 8005a2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d901      	bls.n	8005a3a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005a36:	2303      	movs	r3, #3
 8005a38:	e04f      	b.n	8005ada <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a3a:	4b2b      	ldr	r3, [pc, #172]	; (8005ae8 <HAL_RCC_ClockConfig+0x1bc>)
 8005a3c:	689b      	ldr	r3, [r3, #8]
 8005a3e:	f003 020c 	and.w	r2, r3, #12
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	685b      	ldr	r3, [r3, #4]
 8005a46:	009b      	lsls	r3, r3, #2
 8005a48:	429a      	cmp	r2, r3
 8005a4a:	d1eb      	bne.n	8005a24 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005a4c:	4b25      	ldr	r3, [pc, #148]	; (8005ae4 <HAL_RCC_ClockConfig+0x1b8>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f003 0307 	and.w	r3, r3, #7
 8005a54:	683a      	ldr	r2, [r7, #0]
 8005a56:	429a      	cmp	r2, r3
 8005a58:	d20c      	bcs.n	8005a74 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a5a:	4b22      	ldr	r3, [pc, #136]	; (8005ae4 <HAL_RCC_ClockConfig+0x1b8>)
 8005a5c:	683a      	ldr	r2, [r7, #0]
 8005a5e:	b2d2      	uxtb	r2, r2
 8005a60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a62:	4b20      	ldr	r3, [pc, #128]	; (8005ae4 <HAL_RCC_ClockConfig+0x1b8>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f003 0307 	and.w	r3, r3, #7
 8005a6a:	683a      	ldr	r2, [r7, #0]
 8005a6c:	429a      	cmp	r2, r3
 8005a6e:	d001      	beq.n	8005a74 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005a70:	2301      	movs	r3, #1
 8005a72:	e032      	b.n	8005ada <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f003 0304 	and.w	r3, r3, #4
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d008      	beq.n	8005a92 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005a80:	4b19      	ldr	r3, [pc, #100]	; (8005ae8 <HAL_RCC_ClockConfig+0x1bc>)
 8005a82:	689b      	ldr	r3, [r3, #8]
 8005a84:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	68db      	ldr	r3, [r3, #12]
 8005a8c:	4916      	ldr	r1, [pc, #88]	; (8005ae8 <HAL_RCC_ClockConfig+0x1bc>)
 8005a8e:	4313      	orrs	r3, r2
 8005a90:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f003 0308 	and.w	r3, r3, #8
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d009      	beq.n	8005ab2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005a9e:	4b12      	ldr	r3, [pc, #72]	; (8005ae8 <HAL_RCC_ClockConfig+0x1bc>)
 8005aa0:	689b      	ldr	r3, [r3, #8]
 8005aa2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	691b      	ldr	r3, [r3, #16]
 8005aaa:	00db      	lsls	r3, r3, #3
 8005aac:	490e      	ldr	r1, [pc, #56]	; (8005ae8 <HAL_RCC_ClockConfig+0x1bc>)
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005ab2:	f000 f821 	bl	8005af8 <HAL_RCC_GetSysClockFreq>
 8005ab6:	4602      	mov	r2, r0
 8005ab8:	4b0b      	ldr	r3, [pc, #44]	; (8005ae8 <HAL_RCC_ClockConfig+0x1bc>)
 8005aba:	689b      	ldr	r3, [r3, #8]
 8005abc:	091b      	lsrs	r3, r3, #4
 8005abe:	f003 030f 	and.w	r3, r3, #15
 8005ac2:	490a      	ldr	r1, [pc, #40]	; (8005aec <HAL_RCC_ClockConfig+0x1c0>)
 8005ac4:	5ccb      	ldrb	r3, [r1, r3]
 8005ac6:	fa22 f303 	lsr.w	r3, r2, r3
 8005aca:	4a09      	ldr	r2, [pc, #36]	; (8005af0 <HAL_RCC_ClockConfig+0x1c4>)
 8005acc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005ace:	4b09      	ldr	r3, [pc, #36]	; (8005af4 <HAL_RCC_ClockConfig+0x1c8>)
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	f7fd fdf0 	bl	80036b8 <HAL_InitTick>

  return HAL_OK;
 8005ad8:	2300      	movs	r3, #0
}
 8005ada:	4618      	mov	r0, r3
 8005adc:	3710      	adds	r7, #16
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bd80      	pop	{r7, pc}
 8005ae2:	bf00      	nop
 8005ae4:	40023c00 	.word	0x40023c00
 8005ae8:	40023800 	.word	0x40023800
 8005aec:	0800763c 	.word	0x0800763c
 8005af0:	20000014 	.word	0x20000014
 8005af4:	20000018 	.word	0x20000018

08005af8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005af8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005afc:	b094      	sub	sp, #80	; 0x50
 8005afe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005b00:	2300      	movs	r3, #0
 8005b02:	647b      	str	r3, [r7, #68]	; 0x44
 8005b04:	2300      	movs	r3, #0
 8005b06:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b08:	2300      	movs	r3, #0
 8005b0a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005b10:	4b79      	ldr	r3, [pc, #484]	; (8005cf8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005b12:	689b      	ldr	r3, [r3, #8]
 8005b14:	f003 030c 	and.w	r3, r3, #12
 8005b18:	2b08      	cmp	r3, #8
 8005b1a:	d00d      	beq.n	8005b38 <HAL_RCC_GetSysClockFreq+0x40>
 8005b1c:	2b08      	cmp	r3, #8
 8005b1e:	f200 80e1 	bhi.w	8005ce4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d002      	beq.n	8005b2c <HAL_RCC_GetSysClockFreq+0x34>
 8005b26:	2b04      	cmp	r3, #4
 8005b28:	d003      	beq.n	8005b32 <HAL_RCC_GetSysClockFreq+0x3a>
 8005b2a:	e0db      	b.n	8005ce4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005b2c:	4b73      	ldr	r3, [pc, #460]	; (8005cfc <HAL_RCC_GetSysClockFreq+0x204>)
 8005b2e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005b30:	e0db      	b.n	8005cea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005b32:	4b73      	ldr	r3, [pc, #460]	; (8005d00 <HAL_RCC_GetSysClockFreq+0x208>)
 8005b34:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005b36:	e0d8      	b.n	8005cea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005b38:	4b6f      	ldr	r3, [pc, #444]	; (8005cf8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005b3a:	685b      	ldr	r3, [r3, #4]
 8005b3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005b40:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005b42:	4b6d      	ldr	r3, [pc, #436]	; (8005cf8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005b44:	685b      	ldr	r3, [r3, #4]
 8005b46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d063      	beq.n	8005c16 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b4e:	4b6a      	ldr	r3, [pc, #424]	; (8005cf8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005b50:	685b      	ldr	r3, [r3, #4]
 8005b52:	099b      	lsrs	r3, r3, #6
 8005b54:	2200      	movs	r2, #0
 8005b56:	63bb      	str	r3, [r7, #56]	; 0x38
 8005b58:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005b5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b60:	633b      	str	r3, [r7, #48]	; 0x30
 8005b62:	2300      	movs	r3, #0
 8005b64:	637b      	str	r3, [r7, #52]	; 0x34
 8005b66:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005b6a:	4622      	mov	r2, r4
 8005b6c:	462b      	mov	r3, r5
 8005b6e:	f04f 0000 	mov.w	r0, #0
 8005b72:	f04f 0100 	mov.w	r1, #0
 8005b76:	0159      	lsls	r1, r3, #5
 8005b78:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005b7c:	0150      	lsls	r0, r2, #5
 8005b7e:	4602      	mov	r2, r0
 8005b80:	460b      	mov	r3, r1
 8005b82:	4621      	mov	r1, r4
 8005b84:	1a51      	subs	r1, r2, r1
 8005b86:	6139      	str	r1, [r7, #16]
 8005b88:	4629      	mov	r1, r5
 8005b8a:	eb63 0301 	sbc.w	r3, r3, r1
 8005b8e:	617b      	str	r3, [r7, #20]
 8005b90:	f04f 0200 	mov.w	r2, #0
 8005b94:	f04f 0300 	mov.w	r3, #0
 8005b98:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005b9c:	4659      	mov	r1, fp
 8005b9e:	018b      	lsls	r3, r1, #6
 8005ba0:	4651      	mov	r1, sl
 8005ba2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005ba6:	4651      	mov	r1, sl
 8005ba8:	018a      	lsls	r2, r1, #6
 8005baa:	4651      	mov	r1, sl
 8005bac:	ebb2 0801 	subs.w	r8, r2, r1
 8005bb0:	4659      	mov	r1, fp
 8005bb2:	eb63 0901 	sbc.w	r9, r3, r1
 8005bb6:	f04f 0200 	mov.w	r2, #0
 8005bba:	f04f 0300 	mov.w	r3, #0
 8005bbe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005bc2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005bc6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005bca:	4690      	mov	r8, r2
 8005bcc:	4699      	mov	r9, r3
 8005bce:	4623      	mov	r3, r4
 8005bd0:	eb18 0303 	adds.w	r3, r8, r3
 8005bd4:	60bb      	str	r3, [r7, #8]
 8005bd6:	462b      	mov	r3, r5
 8005bd8:	eb49 0303 	adc.w	r3, r9, r3
 8005bdc:	60fb      	str	r3, [r7, #12]
 8005bde:	f04f 0200 	mov.w	r2, #0
 8005be2:	f04f 0300 	mov.w	r3, #0
 8005be6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005bea:	4629      	mov	r1, r5
 8005bec:	024b      	lsls	r3, r1, #9
 8005bee:	4621      	mov	r1, r4
 8005bf0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005bf4:	4621      	mov	r1, r4
 8005bf6:	024a      	lsls	r2, r1, #9
 8005bf8:	4610      	mov	r0, r2
 8005bfa:	4619      	mov	r1, r3
 8005bfc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005bfe:	2200      	movs	r2, #0
 8005c00:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c02:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005c04:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005c08:	f7fa ff30 	bl	8000a6c <__aeabi_uldivmod>
 8005c0c:	4602      	mov	r2, r0
 8005c0e:	460b      	mov	r3, r1
 8005c10:	4613      	mov	r3, r2
 8005c12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c14:	e058      	b.n	8005cc8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005c16:	4b38      	ldr	r3, [pc, #224]	; (8005cf8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005c18:	685b      	ldr	r3, [r3, #4]
 8005c1a:	099b      	lsrs	r3, r3, #6
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	4618      	mov	r0, r3
 8005c20:	4611      	mov	r1, r2
 8005c22:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005c26:	623b      	str	r3, [r7, #32]
 8005c28:	2300      	movs	r3, #0
 8005c2a:	627b      	str	r3, [r7, #36]	; 0x24
 8005c2c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005c30:	4642      	mov	r2, r8
 8005c32:	464b      	mov	r3, r9
 8005c34:	f04f 0000 	mov.w	r0, #0
 8005c38:	f04f 0100 	mov.w	r1, #0
 8005c3c:	0159      	lsls	r1, r3, #5
 8005c3e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005c42:	0150      	lsls	r0, r2, #5
 8005c44:	4602      	mov	r2, r0
 8005c46:	460b      	mov	r3, r1
 8005c48:	4641      	mov	r1, r8
 8005c4a:	ebb2 0a01 	subs.w	sl, r2, r1
 8005c4e:	4649      	mov	r1, r9
 8005c50:	eb63 0b01 	sbc.w	fp, r3, r1
 8005c54:	f04f 0200 	mov.w	r2, #0
 8005c58:	f04f 0300 	mov.w	r3, #0
 8005c5c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005c60:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005c64:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005c68:	ebb2 040a 	subs.w	r4, r2, sl
 8005c6c:	eb63 050b 	sbc.w	r5, r3, fp
 8005c70:	f04f 0200 	mov.w	r2, #0
 8005c74:	f04f 0300 	mov.w	r3, #0
 8005c78:	00eb      	lsls	r3, r5, #3
 8005c7a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005c7e:	00e2      	lsls	r2, r4, #3
 8005c80:	4614      	mov	r4, r2
 8005c82:	461d      	mov	r5, r3
 8005c84:	4643      	mov	r3, r8
 8005c86:	18e3      	adds	r3, r4, r3
 8005c88:	603b      	str	r3, [r7, #0]
 8005c8a:	464b      	mov	r3, r9
 8005c8c:	eb45 0303 	adc.w	r3, r5, r3
 8005c90:	607b      	str	r3, [r7, #4]
 8005c92:	f04f 0200 	mov.w	r2, #0
 8005c96:	f04f 0300 	mov.w	r3, #0
 8005c9a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005c9e:	4629      	mov	r1, r5
 8005ca0:	028b      	lsls	r3, r1, #10
 8005ca2:	4621      	mov	r1, r4
 8005ca4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005ca8:	4621      	mov	r1, r4
 8005caa:	028a      	lsls	r2, r1, #10
 8005cac:	4610      	mov	r0, r2
 8005cae:	4619      	mov	r1, r3
 8005cb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	61bb      	str	r3, [r7, #24]
 8005cb6:	61fa      	str	r2, [r7, #28]
 8005cb8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005cbc:	f7fa fed6 	bl	8000a6c <__aeabi_uldivmod>
 8005cc0:	4602      	mov	r2, r0
 8005cc2:	460b      	mov	r3, r1
 8005cc4:	4613      	mov	r3, r2
 8005cc6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005cc8:	4b0b      	ldr	r3, [pc, #44]	; (8005cf8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005cca:	685b      	ldr	r3, [r3, #4]
 8005ccc:	0c1b      	lsrs	r3, r3, #16
 8005cce:	f003 0303 	and.w	r3, r3, #3
 8005cd2:	3301      	adds	r3, #1
 8005cd4:	005b      	lsls	r3, r3, #1
 8005cd6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005cd8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005cda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ce0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005ce2:	e002      	b.n	8005cea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005ce4:	4b05      	ldr	r3, [pc, #20]	; (8005cfc <HAL_RCC_GetSysClockFreq+0x204>)
 8005ce6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005ce8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005cea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005cec:	4618      	mov	r0, r3
 8005cee:	3750      	adds	r7, #80	; 0x50
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005cf6:	bf00      	nop
 8005cf8:	40023800 	.word	0x40023800
 8005cfc:	00f42400 	.word	0x00f42400
 8005d00:	007a1200 	.word	0x007a1200

08005d04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005d04:	b480      	push	{r7}
 8005d06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005d08:	4b03      	ldr	r3, [pc, #12]	; (8005d18 <HAL_RCC_GetHCLKFreq+0x14>)
 8005d0a:	681b      	ldr	r3, [r3, #0]
}
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d14:	4770      	bx	lr
 8005d16:	bf00      	nop
 8005d18:	20000014 	.word	0x20000014

08005d1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005d20:	f7ff fff0 	bl	8005d04 <HAL_RCC_GetHCLKFreq>
 8005d24:	4602      	mov	r2, r0
 8005d26:	4b05      	ldr	r3, [pc, #20]	; (8005d3c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005d28:	689b      	ldr	r3, [r3, #8]
 8005d2a:	0a9b      	lsrs	r3, r3, #10
 8005d2c:	f003 0307 	and.w	r3, r3, #7
 8005d30:	4903      	ldr	r1, [pc, #12]	; (8005d40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005d32:	5ccb      	ldrb	r3, [r1, r3]
 8005d34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d38:	4618      	mov	r0, r3
 8005d3a:	bd80      	pop	{r7, pc}
 8005d3c:	40023800 	.word	0x40023800
 8005d40:	0800764c 	.word	0x0800764c

08005d44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005d48:	f7ff ffdc 	bl	8005d04 <HAL_RCC_GetHCLKFreq>
 8005d4c:	4602      	mov	r2, r0
 8005d4e:	4b05      	ldr	r3, [pc, #20]	; (8005d64 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005d50:	689b      	ldr	r3, [r3, #8]
 8005d52:	0b5b      	lsrs	r3, r3, #13
 8005d54:	f003 0307 	and.w	r3, r3, #7
 8005d58:	4903      	ldr	r1, [pc, #12]	; (8005d68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005d5a:	5ccb      	ldrb	r3, [r1, r3]
 8005d5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d60:	4618      	mov	r0, r3
 8005d62:	bd80      	pop	{r7, pc}
 8005d64:	40023800 	.word	0x40023800
 8005d68:	0800764c 	.word	0x0800764c

08005d6c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b082      	sub	sp, #8
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d101      	bne.n	8005d7e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	e041      	b.n	8005e02 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d84:	b2db      	uxtb	r3, r3
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d106      	bne.n	8005d98 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005d92:	6878      	ldr	r0, [r7, #4]
 8005d94:	f7fd fb30 	bl	80033f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2202      	movs	r2, #2
 8005d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681a      	ldr	r2, [r3, #0]
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	3304      	adds	r3, #4
 8005da8:	4619      	mov	r1, r3
 8005daa:	4610      	mov	r0, r2
 8005dac:	f000 f950 	bl	8006050 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2201      	movs	r2, #1
 8005db4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2201      	movs	r2, #1
 8005dbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2201      	movs	r2, #1
 8005dc4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2201      	movs	r2, #1
 8005dcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2201      	movs	r2, #1
 8005dd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2201      	movs	r2, #1
 8005ddc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2201      	movs	r2, #1
 8005de4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2201      	movs	r2, #1
 8005dec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2201      	movs	r2, #1
 8005df4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2201      	movs	r2, #1
 8005dfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005e00:	2300      	movs	r3, #0
}
 8005e02:	4618      	mov	r0, r3
 8005e04:	3708      	adds	r7, #8
 8005e06:	46bd      	mov	sp, r7
 8005e08:	bd80      	pop	{r7, pc}
	...

08005e0c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	b085      	sub	sp, #20
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e1a:	b2db      	uxtb	r3, r3
 8005e1c:	2b01      	cmp	r3, #1
 8005e1e:	d001      	beq.n	8005e24 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005e20:	2301      	movs	r3, #1
 8005e22:	e03c      	b.n	8005e9e <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2202      	movs	r2, #2
 8005e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4a1e      	ldr	r2, [pc, #120]	; (8005eac <HAL_TIM_Base_Start+0xa0>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d018      	beq.n	8005e68 <HAL_TIM_Base_Start+0x5c>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e3e:	d013      	beq.n	8005e68 <HAL_TIM_Base_Start+0x5c>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4a1a      	ldr	r2, [pc, #104]	; (8005eb0 <HAL_TIM_Base_Start+0xa4>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d00e      	beq.n	8005e68 <HAL_TIM_Base_Start+0x5c>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	4a19      	ldr	r2, [pc, #100]	; (8005eb4 <HAL_TIM_Base_Start+0xa8>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d009      	beq.n	8005e68 <HAL_TIM_Base_Start+0x5c>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	4a17      	ldr	r2, [pc, #92]	; (8005eb8 <HAL_TIM_Base_Start+0xac>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d004      	beq.n	8005e68 <HAL_TIM_Base_Start+0x5c>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	4a16      	ldr	r2, [pc, #88]	; (8005ebc <HAL_TIM_Base_Start+0xb0>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d111      	bne.n	8005e8c <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	689b      	ldr	r3, [r3, #8]
 8005e6e:	f003 0307 	and.w	r3, r3, #7
 8005e72:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	2b06      	cmp	r3, #6
 8005e78:	d010      	beq.n	8005e9c <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	681a      	ldr	r2, [r3, #0]
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f042 0201 	orr.w	r2, r2, #1
 8005e88:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e8a:	e007      	b.n	8005e9c <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	681a      	ldr	r2, [r3, #0]
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f042 0201 	orr.w	r2, r2, #1
 8005e9a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005e9c:	2300      	movs	r3, #0
}
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	3714      	adds	r7, #20
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea8:	4770      	bx	lr
 8005eaa:	bf00      	nop
 8005eac:	40010000 	.word	0x40010000
 8005eb0:	40000400 	.word	0x40000400
 8005eb4:	40000800 	.word	0x40000800
 8005eb8:	40000c00 	.word	0x40000c00
 8005ebc:	40014000 	.word	0x40014000

08005ec0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b084      	sub	sp, #16
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
 8005ec8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005eca:	2300      	movs	r3, #0
 8005ecc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ed4:	2b01      	cmp	r3, #1
 8005ed6:	d101      	bne.n	8005edc <HAL_TIM_ConfigClockSource+0x1c>
 8005ed8:	2302      	movs	r3, #2
 8005eda:	e0b4      	b.n	8006046 <HAL_TIM_ConfigClockSource+0x186>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2201      	movs	r2, #1
 8005ee0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2202      	movs	r2, #2
 8005ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	689b      	ldr	r3, [r3, #8]
 8005ef2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005ef4:	68bb      	ldr	r3, [r7, #8]
 8005ef6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005efa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005f02:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	68ba      	ldr	r2, [r7, #8]
 8005f0a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f14:	d03e      	beq.n	8005f94 <HAL_TIM_ConfigClockSource+0xd4>
 8005f16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f1a:	f200 8087 	bhi.w	800602c <HAL_TIM_ConfigClockSource+0x16c>
 8005f1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f22:	f000 8086 	beq.w	8006032 <HAL_TIM_ConfigClockSource+0x172>
 8005f26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f2a:	d87f      	bhi.n	800602c <HAL_TIM_ConfigClockSource+0x16c>
 8005f2c:	2b70      	cmp	r3, #112	; 0x70
 8005f2e:	d01a      	beq.n	8005f66 <HAL_TIM_ConfigClockSource+0xa6>
 8005f30:	2b70      	cmp	r3, #112	; 0x70
 8005f32:	d87b      	bhi.n	800602c <HAL_TIM_ConfigClockSource+0x16c>
 8005f34:	2b60      	cmp	r3, #96	; 0x60
 8005f36:	d050      	beq.n	8005fda <HAL_TIM_ConfigClockSource+0x11a>
 8005f38:	2b60      	cmp	r3, #96	; 0x60
 8005f3a:	d877      	bhi.n	800602c <HAL_TIM_ConfigClockSource+0x16c>
 8005f3c:	2b50      	cmp	r3, #80	; 0x50
 8005f3e:	d03c      	beq.n	8005fba <HAL_TIM_ConfigClockSource+0xfa>
 8005f40:	2b50      	cmp	r3, #80	; 0x50
 8005f42:	d873      	bhi.n	800602c <HAL_TIM_ConfigClockSource+0x16c>
 8005f44:	2b40      	cmp	r3, #64	; 0x40
 8005f46:	d058      	beq.n	8005ffa <HAL_TIM_ConfigClockSource+0x13a>
 8005f48:	2b40      	cmp	r3, #64	; 0x40
 8005f4a:	d86f      	bhi.n	800602c <HAL_TIM_ConfigClockSource+0x16c>
 8005f4c:	2b30      	cmp	r3, #48	; 0x30
 8005f4e:	d064      	beq.n	800601a <HAL_TIM_ConfigClockSource+0x15a>
 8005f50:	2b30      	cmp	r3, #48	; 0x30
 8005f52:	d86b      	bhi.n	800602c <HAL_TIM_ConfigClockSource+0x16c>
 8005f54:	2b20      	cmp	r3, #32
 8005f56:	d060      	beq.n	800601a <HAL_TIM_ConfigClockSource+0x15a>
 8005f58:	2b20      	cmp	r3, #32
 8005f5a:	d867      	bhi.n	800602c <HAL_TIM_ConfigClockSource+0x16c>
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d05c      	beq.n	800601a <HAL_TIM_ConfigClockSource+0x15a>
 8005f60:	2b10      	cmp	r3, #16
 8005f62:	d05a      	beq.n	800601a <HAL_TIM_ConfigClockSource+0x15a>
 8005f64:	e062      	b.n	800602c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6818      	ldr	r0, [r3, #0]
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	6899      	ldr	r1, [r3, #8]
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	685a      	ldr	r2, [r3, #4]
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	68db      	ldr	r3, [r3, #12]
 8005f76:	f000 f965 	bl	8006244 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	689b      	ldr	r3, [r3, #8]
 8005f80:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005f82:	68bb      	ldr	r3, [r7, #8]
 8005f84:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005f88:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	68ba      	ldr	r2, [r7, #8]
 8005f90:	609a      	str	r2, [r3, #8]
      break;
 8005f92:	e04f      	b.n	8006034 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6818      	ldr	r0, [r3, #0]
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	6899      	ldr	r1, [r3, #8]
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	685a      	ldr	r2, [r3, #4]
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	68db      	ldr	r3, [r3, #12]
 8005fa4:	f000 f94e 	bl	8006244 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	689a      	ldr	r2, [r3, #8]
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005fb6:	609a      	str	r2, [r3, #8]
      break;
 8005fb8:	e03c      	b.n	8006034 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6818      	ldr	r0, [r3, #0]
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	6859      	ldr	r1, [r3, #4]
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	68db      	ldr	r3, [r3, #12]
 8005fc6:	461a      	mov	r2, r3
 8005fc8:	f000 f8c2 	bl	8006150 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	2150      	movs	r1, #80	; 0x50
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	f000 f91b 	bl	800620e <TIM_ITRx_SetConfig>
      break;
 8005fd8:	e02c      	b.n	8006034 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6818      	ldr	r0, [r3, #0]
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	6859      	ldr	r1, [r3, #4]
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	68db      	ldr	r3, [r3, #12]
 8005fe6:	461a      	mov	r2, r3
 8005fe8:	f000 f8e1 	bl	80061ae <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	2160      	movs	r1, #96	; 0x60
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	f000 f90b 	bl	800620e <TIM_ITRx_SetConfig>
      break;
 8005ff8:	e01c      	b.n	8006034 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6818      	ldr	r0, [r3, #0]
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	6859      	ldr	r1, [r3, #4]
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	68db      	ldr	r3, [r3, #12]
 8006006:	461a      	mov	r2, r3
 8006008:	f000 f8a2 	bl	8006150 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	2140      	movs	r1, #64	; 0x40
 8006012:	4618      	mov	r0, r3
 8006014:	f000 f8fb 	bl	800620e <TIM_ITRx_SetConfig>
      break;
 8006018:	e00c      	b.n	8006034 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681a      	ldr	r2, [r3, #0]
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	4619      	mov	r1, r3
 8006024:	4610      	mov	r0, r2
 8006026:	f000 f8f2 	bl	800620e <TIM_ITRx_SetConfig>
      break;
 800602a:	e003      	b.n	8006034 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800602c:	2301      	movs	r3, #1
 800602e:	73fb      	strb	r3, [r7, #15]
      break;
 8006030:	e000      	b.n	8006034 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006032:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2201      	movs	r2, #1
 8006038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2200      	movs	r2, #0
 8006040:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006044:	7bfb      	ldrb	r3, [r7, #15]
}
 8006046:	4618      	mov	r0, r3
 8006048:	3710      	adds	r7, #16
 800604a:	46bd      	mov	sp, r7
 800604c:	bd80      	pop	{r7, pc}
	...

08006050 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006050:	b480      	push	{r7}
 8006052:	b085      	sub	sp, #20
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
 8006058:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	4a34      	ldr	r2, [pc, #208]	; (8006134 <TIM_Base_SetConfig+0xe4>)
 8006064:	4293      	cmp	r3, r2
 8006066:	d00f      	beq.n	8006088 <TIM_Base_SetConfig+0x38>
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800606e:	d00b      	beq.n	8006088 <TIM_Base_SetConfig+0x38>
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	4a31      	ldr	r2, [pc, #196]	; (8006138 <TIM_Base_SetConfig+0xe8>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d007      	beq.n	8006088 <TIM_Base_SetConfig+0x38>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	4a30      	ldr	r2, [pc, #192]	; (800613c <TIM_Base_SetConfig+0xec>)
 800607c:	4293      	cmp	r3, r2
 800607e:	d003      	beq.n	8006088 <TIM_Base_SetConfig+0x38>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	4a2f      	ldr	r2, [pc, #188]	; (8006140 <TIM_Base_SetConfig+0xf0>)
 8006084:	4293      	cmp	r3, r2
 8006086:	d108      	bne.n	800609a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800608e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	685b      	ldr	r3, [r3, #4]
 8006094:	68fa      	ldr	r2, [r7, #12]
 8006096:	4313      	orrs	r3, r2
 8006098:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	4a25      	ldr	r2, [pc, #148]	; (8006134 <TIM_Base_SetConfig+0xe4>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d01b      	beq.n	80060da <TIM_Base_SetConfig+0x8a>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060a8:	d017      	beq.n	80060da <TIM_Base_SetConfig+0x8a>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	4a22      	ldr	r2, [pc, #136]	; (8006138 <TIM_Base_SetConfig+0xe8>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d013      	beq.n	80060da <TIM_Base_SetConfig+0x8a>
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	4a21      	ldr	r2, [pc, #132]	; (800613c <TIM_Base_SetConfig+0xec>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d00f      	beq.n	80060da <TIM_Base_SetConfig+0x8a>
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	4a20      	ldr	r2, [pc, #128]	; (8006140 <TIM_Base_SetConfig+0xf0>)
 80060be:	4293      	cmp	r3, r2
 80060c0:	d00b      	beq.n	80060da <TIM_Base_SetConfig+0x8a>
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	4a1f      	ldr	r2, [pc, #124]	; (8006144 <TIM_Base_SetConfig+0xf4>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d007      	beq.n	80060da <TIM_Base_SetConfig+0x8a>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	4a1e      	ldr	r2, [pc, #120]	; (8006148 <TIM_Base_SetConfig+0xf8>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d003      	beq.n	80060da <TIM_Base_SetConfig+0x8a>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	4a1d      	ldr	r2, [pc, #116]	; (800614c <TIM_Base_SetConfig+0xfc>)
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d108      	bne.n	80060ec <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	68db      	ldr	r3, [r3, #12]
 80060e6:	68fa      	ldr	r2, [r7, #12]
 80060e8:	4313      	orrs	r3, r2
 80060ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	695b      	ldr	r3, [r3, #20]
 80060f6:	4313      	orrs	r3, r2
 80060f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	68fa      	ldr	r2, [r7, #12]
 80060fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	689a      	ldr	r2, [r3, #8]
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	681a      	ldr	r2, [r3, #0]
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	4a08      	ldr	r2, [pc, #32]	; (8006134 <TIM_Base_SetConfig+0xe4>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d103      	bne.n	8006120 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	691a      	ldr	r2, [r3, #16]
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2201      	movs	r2, #1
 8006124:	615a      	str	r2, [r3, #20]
}
 8006126:	bf00      	nop
 8006128:	3714      	adds	r7, #20
 800612a:	46bd      	mov	sp, r7
 800612c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006130:	4770      	bx	lr
 8006132:	bf00      	nop
 8006134:	40010000 	.word	0x40010000
 8006138:	40000400 	.word	0x40000400
 800613c:	40000800 	.word	0x40000800
 8006140:	40000c00 	.word	0x40000c00
 8006144:	40014000 	.word	0x40014000
 8006148:	40014400 	.word	0x40014400
 800614c:	40014800 	.word	0x40014800

08006150 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006150:	b480      	push	{r7}
 8006152:	b087      	sub	sp, #28
 8006154:	af00      	add	r7, sp, #0
 8006156:	60f8      	str	r0, [r7, #12]
 8006158:	60b9      	str	r1, [r7, #8]
 800615a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	6a1b      	ldr	r3, [r3, #32]
 8006160:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	6a1b      	ldr	r3, [r3, #32]
 8006166:	f023 0201 	bic.w	r2, r3, #1
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	699b      	ldr	r3, [r3, #24]
 8006172:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006174:	693b      	ldr	r3, [r7, #16]
 8006176:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800617a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	011b      	lsls	r3, r3, #4
 8006180:	693a      	ldr	r2, [r7, #16]
 8006182:	4313      	orrs	r3, r2
 8006184:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006186:	697b      	ldr	r3, [r7, #20]
 8006188:	f023 030a 	bic.w	r3, r3, #10
 800618c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800618e:	697a      	ldr	r2, [r7, #20]
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	4313      	orrs	r3, r2
 8006194:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	693a      	ldr	r2, [r7, #16]
 800619a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	697a      	ldr	r2, [r7, #20]
 80061a0:	621a      	str	r2, [r3, #32]
}
 80061a2:	bf00      	nop
 80061a4:	371c      	adds	r7, #28
 80061a6:	46bd      	mov	sp, r7
 80061a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ac:	4770      	bx	lr

080061ae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80061ae:	b480      	push	{r7}
 80061b0:	b087      	sub	sp, #28
 80061b2:	af00      	add	r7, sp, #0
 80061b4:	60f8      	str	r0, [r7, #12]
 80061b6:	60b9      	str	r1, [r7, #8]
 80061b8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	6a1b      	ldr	r3, [r3, #32]
 80061be:	f023 0210 	bic.w	r2, r3, #16
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	699b      	ldr	r3, [r3, #24]
 80061ca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	6a1b      	ldr	r3, [r3, #32]
 80061d0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80061d2:	697b      	ldr	r3, [r7, #20]
 80061d4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80061d8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	031b      	lsls	r3, r3, #12
 80061de:	697a      	ldr	r2, [r7, #20]
 80061e0:	4313      	orrs	r3, r2
 80061e2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80061e4:	693b      	ldr	r3, [r7, #16]
 80061e6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80061ea:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80061ec:	68bb      	ldr	r3, [r7, #8]
 80061ee:	011b      	lsls	r3, r3, #4
 80061f0:	693a      	ldr	r2, [r7, #16]
 80061f2:	4313      	orrs	r3, r2
 80061f4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	697a      	ldr	r2, [r7, #20]
 80061fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	693a      	ldr	r2, [r7, #16]
 8006200:	621a      	str	r2, [r3, #32]
}
 8006202:	bf00      	nop
 8006204:	371c      	adds	r7, #28
 8006206:	46bd      	mov	sp, r7
 8006208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620c:	4770      	bx	lr

0800620e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800620e:	b480      	push	{r7}
 8006210:	b085      	sub	sp, #20
 8006212:	af00      	add	r7, sp, #0
 8006214:	6078      	str	r0, [r7, #4]
 8006216:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	689b      	ldr	r3, [r3, #8]
 800621c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006224:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006226:	683a      	ldr	r2, [r7, #0]
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	4313      	orrs	r3, r2
 800622c:	f043 0307 	orr.w	r3, r3, #7
 8006230:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	68fa      	ldr	r2, [r7, #12]
 8006236:	609a      	str	r2, [r3, #8]
}
 8006238:	bf00      	nop
 800623a:	3714      	adds	r7, #20
 800623c:	46bd      	mov	sp, r7
 800623e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006242:	4770      	bx	lr

08006244 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006244:	b480      	push	{r7}
 8006246:	b087      	sub	sp, #28
 8006248:	af00      	add	r7, sp, #0
 800624a:	60f8      	str	r0, [r7, #12]
 800624c:	60b9      	str	r1, [r7, #8]
 800624e:	607a      	str	r2, [r7, #4]
 8006250:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	689b      	ldr	r3, [r3, #8]
 8006256:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006258:	697b      	ldr	r3, [r7, #20]
 800625a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800625e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	021a      	lsls	r2, r3, #8
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	431a      	orrs	r2, r3
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	4313      	orrs	r3, r2
 800626c:	697a      	ldr	r2, [r7, #20]
 800626e:	4313      	orrs	r3, r2
 8006270:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	697a      	ldr	r2, [r7, #20]
 8006276:	609a      	str	r2, [r3, #8]
}
 8006278:	bf00      	nop
 800627a:	371c      	adds	r7, #28
 800627c:	46bd      	mov	sp, r7
 800627e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006282:	4770      	bx	lr

08006284 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006284:	b480      	push	{r7}
 8006286:	b085      	sub	sp, #20
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
 800628c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006294:	2b01      	cmp	r3, #1
 8006296:	d101      	bne.n	800629c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006298:	2302      	movs	r3, #2
 800629a:	e050      	b.n	800633e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2201      	movs	r2, #1
 80062a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2202      	movs	r2, #2
 80062a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	685b      	ldr	r3, [r3, #4]
 80062b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	689b      	ldr	r3, [r3, #8]
 80062ba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	68fa      	ldr	r2, [r7, #12]
 80062ca:	4313      	orrs	r3, r2
 80062cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	68fa      	ldr	r2, [r7, #12]
 80062d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	4a1c      	ldr	r2, [pc, #112]	; (800634c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80062dc:	4293      	cmp	r3, r2
 80062de:	d018      	beq.n	8006312 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062e8:	d013      	beq.n	8006312 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	4a18      	ldr	r2, [pc, #96]	; (8006350 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d00e      	beq.n	8006312 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	4a16      	ldr	r2, [pc, #88]	; (8006354 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d009      	beq.n	8006312 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	4a15      	ldr	r2, [pc, #84]	; (8006358 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006304:	4293      	cmp	r3, r2
 8006306:	d004      	beq.n	8006312 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	4a13      	ldr	r2, [pc, #76]	; (800635c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800630e:	4293      	cmp	r3, r2
 8006310:	d10c      	bne.n	800632c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006312:	68bb      	ldr	r3, [r7, #8]
 8006314:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006318:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	685b      	ldr	r3, [r3, #4]
 800631e:	68ba      	ldr	r2, [r7, #8]
 8006320:	4313      	orrs	r3, r2
 8006322:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	68ba      	ldr	r2, [r7, #8]
 800632a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2201      	movs	r2, #1
 8006330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2200      	movs	r2, #0
 8006338:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800633c:	2300      	movs	r3, #0
}
 800633e:	4618      	mov	r0, r3
 8006340:	3714      	adds	r7, #20
 8006342:	46bd      	mov	sp, r7
 8006344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006348:	4770      	bx	lr
 800634a:	bf00      	nop
 800634c:	40010000 	.word	0x40010000
 8006350:	40000400 	.word	0x40000400
 8006354:	40000800 	.word	0x40000800
 8006358:	40000c00 	.word	0x40000c00
 800635c:	40014000 	.word	0x40014000

08006360 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b082      	sub	sp, #8
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d101      	bne.n	8006372 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800636e:	2301      	movs	r3, #1
 8006370:	e03f      	b.n	80063f2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006378:	b2db      	uxtb	r3, r3
 800637a:	2b00      	cmp	r3, #0
 800637c:	d106      	bne.n	800638c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2200      	movs	r2, #0
 8006382:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006386:	6878      	ldr	r0, [r7, #4]
 8006388:	f7fd f86e 	bl	8003468 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2224      	movs	r2, #36	; 0x24
 8006390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	68da      	ldr	r2, [r3, #12]
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80063a2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80063a4:	6878      	ldr	r0, [r7, #4]
 80063a6:	f000 f929 	bl	80065fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	691a      	ldr	r2, [r3, #16]
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80063b8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	695a      	ldr	r2, [r3, #20]
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80063c8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	68da      	ldr	r2, [r3, #12]
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80063d8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2200      	movs	r2, #0
 80063de:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2220      	movs	r2, #32
 80063e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2220      	movs	r2, #32
 80063ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80063f0:	2300      	movs	r3, #0
}
 80063f2:	4618      	mov	r0, r3
 80063f4:	3708      	adds	r7, #8
 80063f6:	46bd      	mov	sp, r7
 80063f8:	bd80      	pop	{r7, pc}

080063fa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80063fa:	b580      	push	{r7, lr}
 80063fc:	b08a      	sub	sp, #40	; 0x28
 80063fe:	af02      	add	r7, sp, #8
 8006400:	60f8      	str	r0, [r7, #12]
 8006402:	60b9      	str	r1, [r7, #8]
 8006404:	603b      	str	r3, [r7, #0]
 8006406:	4613      	mov	r3, r2
 8006408:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800640a:	2300      	movs	r3, #0
 800640c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006414:	b2db      	uxtb	r3, r3
 8006416:	2b20      	cmp	r3, #32
 8006418:	d17c      	bne.n	8006514 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800641a:	68bb      	ldr	r3, [r7, #8]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d002      	beq.n	8006426 <HAL_UART_Transmit+0x2c>
 8006420:	88fb      	ldrh	r3, [r7, #6]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d101      	bne.n	800642a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006426:	2301      	movs	r3, #1
 8006428:	e075      	b.n	8006516 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006430:	2b01      	cmp	r3, #1
 8006432:	d101      	bne.n	8006438 <HAL_UART_Transmit+0x3e>
 8006434:	2302      	movs	r3, #2
 8006436:	e06e      	b.n	8006516 <HAL_UART_Transmit+0x11c>
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	2201      	movs	r2, #1
 800643c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	2200      	movs	r2, #0
 8006444:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	2221      	movs	r2, #33	; 0x21
 800644a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800644e:	f7fd f977 	bl	8003740 <HAL_GetTick>
 8006452:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	88fa      	ldrh	r2, [r7, #6]
 8006458:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	88fa      	ldrh	r2, [r7, #6]
 800645e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	689b      	ldr	r3, [r3, #8]
 8006464:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006468:	d108      	bne.n	800647c <HAL_UART_Transmit+0x82>
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	691b      	ldr	r3, [r3, #16]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d104      	bne.n	800647c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006472:	2300      	movs	r3, #0
 8006474:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006476:	68bb      	ldr	r3, [r7, #8]
 8006478:	61bb      	str	r3, [r7, #24]
 800647a:	e003      	b.n	8006484 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800647c:	68bb      	ldr	r3, [r7, #8]
 800647e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006480:	2300      	movs	r3, #0
 8006482:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	2200      	movs	r2, #0
 8006488:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800648c:	e02a      	b.n	80064e4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	9300      	str	r3, [sp, #0]
 8006492:	697b      	ldr	r3, [r7, #20]
 8006494:	2200      	movs	r2, #0
 8006496:	2180      	movs	r1, #128	; 0x80
 8006498:	68f8      	ldr	r0, [r7, #12]
 800649a:	f000 f840 	bl	800651e <UART_WaitOnFlagUntilTimeout>
 800649e:	4603      	mov	r3, r0
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d001      	beq.n	80064a8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80064a4:	2303      	movs	r3, #3
 80064a6:	e036      	b.n	8006516 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80064a8:	69fb      	ldr	r3, [r7, #28]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d10b      	bne.n	80064c6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80064ae:	69bb      	ldr	r3, [r7, #24]
 80064b0:	881b      	ldrh	r3, [r3, #0]
 80064b2:	461a      	mov	r2, r3
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80064bc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80064be:	69bb      	ldr	r3, [r7, #24]
 80064c0:	3302      	adds	r3, #2
 80064c2:	61bb      	str	r3, [r7, #24]
 80064c4:	e007      	b.n	80064d6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80064c6:	69fb      	ldr	r3, [r7, #28]
 80064c8:	781a      	ldrb	r2, [r3, #0]
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80064d0:	69fb      	ldr	r3, [r7, #28]
 80064d2:	3301      	adds	r3, #1
 80064d4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80064da:	b29b      	uxth	r3, r3
 80064dc:	3b01      	subs	r3, #1
 80064de:	b29a      	uxth	r2, r3
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80064e8:	b29b      	uxth	r3, r3
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d1cf      	bne.n	800648e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	9300      	str	r3, [sp, #0]
 80064f2:	697b      	ldr	r3, [r7, #20]
 80064f4:	2200      	movs	r2, #0
 80064f6:	2140      	movs	r1, #64	; 0x40
 80064f8:	68f8      	ldr	r0, [r7, #12]
 80064fa:	f000 f810 	bl	800651e <UART_WaitOnFlagUntilTimeout>
 80064fe:	4603      	mov	r3, r0
 8006500:	2b00      	cmp	r3, #0
 8006502:	d001      	beq.n	8006508 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006504:	2303      	movs	r3, #3
 8006506:	e006      	b.n	8006516 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	2220      	movs	r2, #32
 800650c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006510:	2300      	movs	r3, #0
 8006512:	e000      	b.n	8006516 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006514:	2302      	movs	r3, #2
  }
}
 8006516:	4618      	mov	r0, r3
 8006518:	3720      	adds	r7, #32
 800651a:	46bd      	mov	sp, r7
 800651c:	bd80      	pop	{r7, pc}

0800651e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800651e:	b580      	push	{r7, lr}
 8006520:	b090      	sub	sp, #64	; 0x40
 8006522:	af00      	add	r7, sp, #0
 8006524:	60f8      	str	r0, [r7, #12]
 8006526:	60b9      	str	r1, [r7, #8]
 8006528:	603b      	str	r3, [r7, #0]
 800652a:	4613      	mov	r3, r2
 800652c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800652e:	e050      	b.n	80065d2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006530:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006532:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006536:	d04c      	beq.n	80065d2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006538:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800653a:	2b00      	cmp	r3, #0
 800653c:	d007      	beq.n	800654e <UART_WaitOnFlagUntilTimeout+0x30>
 800653e:	f7fd f8ff 	bl	8003740 <HAL_GetTick>
 8006542:	4602      	mov	r2, r0
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	1ad3      	subs	r3, r2, r3
 8006548:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800654a:	429a      	cmp	r2, r3
 800654c:	d241      	bcs.n	80065d2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	330c      	adds	r3, #12
 8006554:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006558:	e853 3f00 	ldrex	r3, [r3]
 800655c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800655e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006560:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006564:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	330c      	adds	r3, #12
 800656c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800656e:	637a      	str	r2, [r7, #52]	; 0x34
 8006570:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006572:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006574:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006576:	e841 2300 	strex	r3, r2, [r1]
 800657a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800657c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800657e:	2b00      	cmp	r3, #0
 8006580:	d1e5      	bne.n	800654e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	3314      	adds	r3, #20
 8006588:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800658a:	697b      	ldr	r3, [r7, #20]
 800658c:	e853 3f00 	ldrex	r3, [r3]
 8006590:	613b      	str	r3, [r7, #16]
   return(result);
 8006592:	693b      	ldr	r3, [r7, #16]
 8006594:	f023 0301 	bic.w	r3, r3, #1
 8006598:	63bb      	str	r3, [r7, #56]	; 0x38
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	3314      	adds	r3, #20
 80065a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80065a2:	623a      	str	r2, [r7, #32]
 80065a4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065a6:	69f9      	ldr	r1, [r7, #28]
 80065a8:	6a3a      	ldr	r2, [r7, #32]
 80065aa:	e841 2300 	strex	r3, r2, [r1]
 80065ae:	61bb      	str	r3, [r7, #24]
   return(result);
 80065b0:	69bb      	ldr	r3, [r7, #24]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d1e5      	bne.n	8006582 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	2220      	movs	r2, #32
 80065ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	2220      	movs	r2, #32
 80065c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	2200      	movs	r2, #0
 80065ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80065ce:	2303      	movs	r3, #3
 80065d0:	e00f      	b.n	80065f2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	681a      	ldr	r2, [r3, #0]
 80065d8:	68bb      	ldr	r3, [r7, #8]
 80065da:	4013      	ands	r3, r2
 80065dc:	68ba      	ldr	r2, [r7, #8]
 80065de:	429a      	cmp	r2, r3
 80065e0:	bf0c      	ite	eq
 80065e2:	2301      	moveq	r3, #1
 80065e4:	2300      	movne	r3, #0
 80065e6:	b2db      	uxtb	r3, r3
 80065e8:	461a      	mov	r2, r3
 80065ea:	79fb      	ldrb	r3, [r7, #7]
 80065ec:	429a      	cmp	r2, r3
 80065ee:	d09f      	beq.n	8006530 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80065f0:	2300      	movs	r3, #0
}
 80065f2:	4618      	mov	r0, r3
 80065f4:	3740      	adds	r7, #64	; 0x40
 80065f6:	46bd      	mov	sp, r7
 80065f8:	bd80      	pop	{r7, pc}
	...

080065fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80065fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006600:	b0c0      	sub	sp, #256	; 0x100
 8006602:	af00      	add	r7, sp, #0
 8006604:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006608:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	691b      	ldr	r3, [r3, #16]
 8006610:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006614:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006618:	68d9      	ldr	r1, [r3, #12]
 800661a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800661e:	681a      	ldr	r2, [r3, #0]
 8006620:	ea40 0301 	orr.w	r3, r0, r1
 8006624:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006626:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800662a:	689a      	ldr	r2, [r3, #8]
 800662c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006630:	691b      	ldr	r3, [r3, #16]
 8006632:	431a      	orrs	r2, r3
 8006634:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006638:	695b      	ldr	r3, [r3, #20]
 800663a:	431a      	orrs	r2, r3
 800663c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006640:	69db      	ldr	r3, [r3, #28]
 8006642:	4313      	orrs	r3, r2
 8006644:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006648:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	68db      	ldr	r3, [r3, #12]
 8006650:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006654:	f021 010c 	bic.w	r1, r1, #12
 8006658:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800665c:	681a      	ldr	r2, [r3, #0]
 800665e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006662:	430b      	orrs	r3, r1
 8006664:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006666:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	695b      	ldr	r3, [r3, #20]
 800666e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006672:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006676:	6999      	ldr	r1, [r3, #24]
 8006678:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800667c:	681a      	ldr	r2, [r3, #0]
 800667e:	ea40 0301 	orr.w	r3, r0, r1
 8006682:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006684:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006688:	681a      	ldr	r2, [r3, #0]
 800668a:	4b8f      	ldr	r3, [pc, #572]	; (80068c8 <UART_SetConfig+0x2cc>)
 800668c:	429a      	cmp	r2, r3
 800668e:	d005      	beq.n	800669c <UART_SetConfig+0xa0>
 8006690:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006694:	681a      	ldr	r2, [r3, #0]
 8006696:	4b8d      	ldr	r3, [pc, #564]	; (80068cc <UART_SetConfig+0x2d0>)
 8006698:	429a      	cmp	r2, r3
 800669a:	d104      	bne.n	80066a6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800669c:	f7ff fb52 	bl	8005d44 <HAL_RCC_GetPCLK2Freq>
 80066a0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80066a4:	e003      	b.n	80066ae <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80066a6:	f7ff fb39 	bl	8005d1c <HAL_RCC_GetPCLK1Freq>
 80066aa:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80066ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066b2:	69db      	ldr	r3, [r3, #28]
 80066b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80066b8:	f040 810c 	bne.w	80068d4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80066bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80066c0:	2200      	movs	r2, #0
 80066c2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80066c6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80066ca:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80066ce:	4622      	mov	r2, r4
 80066d0:	462b      	mov	r3, r5
 80066d2:	1891      	adds	r1, r2, r2
 80066d4:	65b9      	str	r1, [r7, #88]	; 0x58
 80066d6:	415b      	adcs	r3, r3
 80066d8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80066da:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80066de:	4621      	mov	r1, r4
 80066e0:	eb12 0801 	adds.w	r8, r2, r1
 80066e4:	4629      	mov	r1, r5
 80066e6:	eb43 0901 	adc.w	r9, r3, r1
 80066ea:	f04f 0200 	mov.w	r2, #0
 80066ee:	f04f 0300 	mov.w	r3, #0
 80066f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80066f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80066fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80066fe:	4690      	mov	r8, r2
 8006700:	4699      	mov	r9, r3
 8006702:	4623      	mov	r3, r4
 8006704:	eb18 0303 	adds.w	r3, r8, r3
 8006708:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800670c:	462b      	mov	r3, r5
 800670e:	eb49 0303 	adc.w	r3, r9, r3
 8006712:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006716:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800671a:	685b      	ldr	r3, [r3, #4]
 800671c:	2200      	movs	r2, #0
 800671e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006722:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006726:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800672a:	460b      	mov	r3, r1
 800672c:	18db      	adds	r3, r3, r3
 800672e:	653b      	str	r3, [r7, #80]	; 0x50
 8006730:	4613      	mov	r3, r2
 8006732:	eb42 0303 	adc.w	r3, r2, r3
 8006736:	657b      	str	r3, [r7, #84]	; 0x54
 8006738:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800673c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006740:	f7fa f994 	bl	8000a6c <__aeabi_uldivmod>
 8006744:	4602      	mov	r2, r0
 8006746:	460b      	mov	r3, r1
 8006748:	4b61      	ldr	r3, [pc, #388]	; (80068d0 <UART_SetConfig+0x2d4>)
 800674a:	fba3 2302 	umull	r2, r3, r3, r2
 800674e:	095b      	lsrs	r3, r3, #5
 8006750:	011c      	lsls	r4, r3, #4
 8006752:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006756:	2200      	movs	r2, #0
 8006758:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800675c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006760:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006764:	4642      	mov	r2, r8
 8006766:	464b      	mov	r3, r9
 8006768:	1891      	adds	r1, r2, r2
 800676a:	64b9      	str	r1, [r7, #72]	; 0x48
 800676c:	415b      	adcs	r3, r3
 800676e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006770:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006774:	4641      	mov	r1, r8
 8006776:	eb12 0a01 	adds.w	sl, r2, r1
 800677a:	4649      	mov	r1, r9
 800677c:	eb43 0b01 	adc.w	fp, r3, r1
 8006780:	f04f 0200 	mov.w	r2, #0
 8006784:	f04f 0300 	mov.w	r3, #0
 8006788:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800678c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006790:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006794:	4692      	mov	sl, r2
 8006796:	469b      	mov	fp, r3
 8006798:	4643      	mov	r3, r8
 800679a:	eb1a 0303 	adds.w	r3, sl, r3
 800679e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80067a2:	464b      	mov	r3, r9
 80067a4:	eb4b 0303 	adc.w	r3, fp, r3
 80067a8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80067ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067b0:	685b      	ldr	r3, [r3, #4]
 80067b2:	2200      	movs	r2, #0
 80067b4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80067b8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80067bc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80067c0:	460b      	mov	r3, r1
 80067c2:	18db      	adds	r3, r3, r3
 80067c4:	643b      	str	r3, [r7, #64]	; 0x40
 80067c6:	4613      	mov	r3, r2
 80067c8:	eb42 0303 	adc.w	r3, r2, r3
 80067cc:	647b      	str	r3, [r7, #68]	; 0x44
 80067ce:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80067d2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80067d6:	f7fa f949 	bl	8000a6c <__aeabi_uldivmod>
 80067da:	4602      	mov	r2, r0
 80067dc:	460b      	mov	r3, r1
 80067de:	4611      	mov	r1, r2
 80067e0:	4b3b      	ldr	r3, [pc, #236]	; (80068d0 <UART_SetConfig+0x2d4>)
 80067e2:	fba3 2301 	umull	r2, r3, r3, r1
 80067e6:	095b      	lsrs	r3, r3, #5
 80067e8:	2264      	movs	r2, #100	; 0x64
 80067ea:	fb02 f303 	mul.w	r3, r2, r3
 80067ee:	1acb      	subs	r3, r1, r3
 80067f0:	00db      	lsls	r3, r3, #3
 80067f2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80067f6:	4b36      	ldr	r3, [pc, #216]	; (80068d0 <UART_SetConfig+0x2d4>)
 80067f8:	fba3 2302 	umull	r2, r3, r3, r2
 80067fc:	095b      	lsrs	r3, r3, #5
 80067fe:	005b      	lsls	r3, r3, #1
 8006800:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006804:	441c      	add	r4, r3
 8006806:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800680a:	2200      	movs	r2, #0
 800680c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006810:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006814:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006818:	4642      	mov	r2, r8
 800681a:	464b      	mov	r3, r9
 800681c:	1891      	adds	r1, r2, r2
 800681e:	63b9      	str	r1, [r7, #56]	; 0x38
 8006820:	415b      	adcs	r3, r3
 8006822:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006824:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006828:	4641      	mov	r1, r8
 800682a:	1851      	adds	r1, r2, r1
 800682c:	6339      	str	r1, [r7, #48]	; 0x30
 800682e:	4649      	mov	r1, r9
 8006830:	414b      	adcs	r3, r1
 8006832:	637b      	str	r3, [r7, #52]	; 0x34
 8006834:	f04f 0200 	mov.w	r2, #0
 8006838:	f04f 0300 	mov.w	r3, #0
 800683c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006840:	4659      	mov	r1, fp
 8006842:	00cb      	lsls	r3, r1, #3
 8006844:	4651      	mov	r1, sl
 8006846:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800684a:	4651      	mov	r1, sl
 800684c:	00ca      	lsls	r2, r1, #3
 800684e:	4610      	mov	r0, r2
 8006850:	4619      	mov	r1, r3
 8006852:	4603      	mov	r3, r0
 8006854:	4642      	mov	r2, r8
 8006856:	189b      	adds	r3, r3, r2
 8006858:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800685c:	464b      	mov	r3, r9
 800685e:	460a      	mov	r2, r1
 8006860:	eb42 0303 	adc.w	r3, r2, r3
 8006864:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006868:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800686c:	685b      	ldr	r3, [r3, #4]
 800686e:	2200      	movs	r2, #0
 8006870:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006874:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006878:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800687c:	460b      	mov	r3, r1
 800687e:	18db      	adds	r3, r3, r3
 8006880:	62bb      	str	r3, [r7, #40]	; 0x28
 8006882:	4613      	mov	r3, r2
 8006884:	eb42 0303 	adc.w	r3, r2, r3
 8006888:	62fb      	str	r3, [r7, #44]	; 0x2c
 800688a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800688e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006892:	f7fa f8eb 	bl	8000a6c <__aeabi_uldivmod>
 8006896:	4602      	mov	r2, r0
 8006898:	460b      	mov	r3, r1
 800689a:	4b0d      	ldr	r3, [pc, #52]	; (80068d0 <UART_SetConfig+0x2d4>)
 800689c:	fba3 1302 	umull	r1, r3, r3, r2
 80068a0:	095b      	lsrs	r3, r3, #5
 80068a2:	2164      	movs	r1, #100	; 0x64
 80068a4:	fb01 f303 	mul.w	r3, r1, r3
 80068a8:	1ad3      	subs	r3, r2, r3
 80068aa:	00db      	lsls	r3, r3, #3
 80068ac:	3332      	adds	r3, #50	; 0x32
 80068ae:	4a08      	ldr	r2, [pc, #32]	; (80068d0 <UART_SetConfig+0x2d4>)
 80068b0:	fba2 2303 	umull	r2, r3, r2, r3
 80068b4:	095b      	lsrs	r3, r3, #5
 80068b6:	f003 0207 	and.w	r2, r3, #7
 80068ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	4422      	add	r2, r4
 80068c2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80068c4:	e105      	b.n	8006ad2 <UART_SetConfig+0x4d6>
 80068c6:	bf00      	nop
 80068c8:	40011000 	.word	0x40011000
 80068cc:	40011400 	.word	0x40011400
 80068d0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80068d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80068d8:	2200      	movs	r2, #0
 80068da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80068de:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80068e2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80068e6:	4642      	mov	r2, r8
 80068e8:	464b      	mov	r3, r9
 80068ea:	1891      	adds	r1, r2, r2
 80068ec:	6239      	str	r1, [r7, #32]
 80068ee:	415b      	adcs	r3, r3
 80068f0:	627b      	str	r3, [r7, #36]	; 0x24
 80068f2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80068f6:	4641      	mov	r1, r8
 80068f8:	1854      	adds	r4, r2, r1
 80068fa:	4649      	mov	r1, r9
 80068fc:	eb43 0501 	adc.w	r5, r3, r1
 8006900:	f04f 0200 	mov.w	r2, #0
 8006904:	f04f 0300 	mov.w	r3, #0
 8006908:	00eb      	lsls	r3, r5, #3
 800690a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800690e:	00e2      	lsls	r2, r4, #3
 8006910:	4614      	mov	r4, r2
 8006912:	461d      	mov	r5, r3
 8006914:	4643      	mov	r3, r8
 8006916:	18e3      	adds	r3, r4, r3
 8006918:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800691c:	464b      	mov	r3, r9
 800691e:	eb45 0303 	adc.w	r3, r5, r3
 8006922:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006926:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800692a:	685b      	ldr	r3, [r3, #4]
 800692c:	2200      	movs	r2, #0
 800692e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006932:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006936:	f04f 0200 	mov.w	r2, #0
 800693a:	f04f 0300 	mov.w	r3, #0
 800693e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006942:	4629      	mov	r1, r5
 8006944:	008b      	lsls	r3, r1, #2
 8006946:	4621      	mov	r1, r4
 8006948:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800694c:	4621      	mov	r1, r4
 800694e:	008a      	lsls	r2, r1, #2
 8006950:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006954:	f7fa f88a 	bl	8000a6c <__aeabi_uldivmod>
 8006958:	4602      	mov	r2, r0
 800695a:	460b      	mov	r3, r1
 800695c:	4b60      	ldr	r3, [pc, #384]	; (8006ae0 <UART_SetConfig+0x4e4>)
 800695e:	fba3 2302 	umull	r2, r3, r3, r2
 8006962:	095b      	lsrs	r3, r3, #5
 8006964:	011c      	lsls	r4, r3, #4
 8006966:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800696a:	2200      	movs	r2, #0
 800696c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006970:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006974:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006978:	4642      	mov	r2, r8
 800697a:	464b      	mov	r3, r9
 800697c:	1891      	adds	r1, r2, r2
 800697e:	61b9      	str	r1, [r7, #24]
 8006980:	415b      	adcs	r3, r3
 8006982:	61fb      	str	r3, [r7, #28]
 8006984:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006988:	4641      	mov	r1, r8
 800698a:	1851      	adds	r1, r2, r1
 800698c:	6139      	str	r1, [r7, #16]
 800698e:	4649      	mov	r1, r9
 8006990:	414b      	adcs	r3, r1
 8006992:	617b      	str	r3, [r7, #20]
 8006994:	f04f 0200 	mov.w	r2, #0
 8006998:	f04f 0300 	mov.w	r3, #0
 800699c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80069a0:	4659      	mov	r1, fp
 80069a2:	00cb      	lsls	r3, r1, #3
 80069a4:	4651      	mov	r1, sl
 80069a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80069aa:	4651      	mov	r1, sl
 80069ac:	00ca      	lsls	r2, r1, #3
 80069ae:	4610      	mov	r0, r2
 80069b0:	4619      	mov	r1, r3
 80069b2:	4603      	mov	r3, r0
 80069b4:	4642      	mov	r2, r8
 80069b6:	189b      	adds	r3, r3, r2
 80069b8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80069bc:	464b      	mov	r3, r9
 80069be:	460a      	mov	r2, r1
 80069c0:	eb42 0303 	adc.w	r3, r2, r3
 80069c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80069c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069cc:	685b      	ldr	r3, [r3, #4]
 80069ce:	2200      	movs	r2, #0
 80069d0:	67bb      	str	r3, [r7, #120]	; 0x78
 80069d2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80069d4:	f04f 0200 	mov.w	r2, #0
 80069d8:	f04f 0300 	mov.w	r3, #0
 80069dc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80069e0:	4649      	mov	r1, r9
 80069e2:	008b      	lsls	r3, r1, #2
 80069e4:	4641      	mov	r1, r8
 80069e6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80069ea:	4641      	mov	r1, r8
 80069ec:	008a      	lsls	r2, r1, #2
 80069ee:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80069f2:	f7fa f83b 	bl	8000a6c <__aeabi_uldivmod>
 80069f6:	4602      	mov	r2, r0
 80069f8:	460b      	mov	r3, r1
 80069fa:	4b39      	ldr	r3, [pc, #228]	; (8006ae0 <UART_SetConfig+0x4e4>)
 80069fc:	fba3 1302 	umull	r1, r3, r3, r2
 8006a00:	095b      	lsrs	r3, r3, #5
 8006a02:	2164      	movs	r1, #100	; 0x64
 8006a04:	fb01 f303 	mul.w	r3, r1, r3
 8006a08:	1ad3      	subs	r3, r2, r3
 8006a0a:	011b      	lsls	r3, r3, #4
 8006a0c:	3332      	adds	r3, #50	; 0x32
 8006a0e:	4a34      	ldr	r2, [pc, #208]	; (8006ae0 <UART_SetConfig+0x4e4>)
 8006a10:	fba2 2303 	umull	r2, r3, r2, r3
 8006a14:	095b      	lsrs	r3, r3, #5
 8006a16:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006a1a:	441c      	add	r4, r3
 8006a1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a20:	2200      	movs	r2, #0
 8006a22:	673b      	str	r3, [r7, #112]	; 0x70
 8006a24:	677a      	str	r2, [r7, #116]	; 0x74
 8006a26:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006a2a:	4642      	mov	r2, r8
 8006a2c:	464b      	mov	r3, r9
 8006a2e:	1891      	adds	r1, r2, r2
 8006a30:	60b9      	str	r1, [r7, #8]
 8006a32:	415b      	adcs	r3, r3
 8006a34:	60fb      	str	r3, [r7, #12]
 8006a36:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006a3a:	4641      	mov	r1, r8
 8006a3c:	1851      	adds	r1, r2, r1
 8006a3e:	6039      	str	r1, [r7, #0]
 8006a40:	4649      	mov	r1, r9
 8006a42:	414b      	adcs	r3, r1
 8006a44:	607b      	str	r3, [r7, #4]
 8006a46:	f04f 0200 	mov.w	r2, #0
 8006a4a:	f04f 0300 	mov.w	r3, #0
 8006a4e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006a52:	4659      	mov	r1, fp
 8006a54:	00cb      	lsls	r3, r1, #3
 8006a56:	4651      	mov	r1, sl
 8006a58:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006a5c:	4651      	mov	r1, sl
 8006a5e:	00ca      	lsls	r2, r1, #3
 8006a60:	4610      	mov	r0, r2
 8006a62:	4619      	mov	r1, r3
 8006a64:	4603      	mov	r3, r0
 8006a66:	4642      	mov	r2, r8
 8006a68:	189b      	adds	r3, r3, r2
 8006a6a:	66bb      	str	r3, [r7, #104]	; 0x68
 8006a6c:	464b      	mov	r3, r9
 8006a6e:	460a      	mov	r2, r1
 8006a70:	eb42 0303 	adc.w	r3, r2, r3
 8006a74:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006a76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a7a:	685b      	ldr	r3, [r3, #4]
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	663b      	str	r3, [r7, #96]	; 0x60
 8006a80:	667a      	str	r2, [r7, #100]	; 0x64
 8006a82:	f04f 0200 	mov.w	r2, #0
 8006a86:	f04f 0300 	mov.w	r3, #0
 8006a8a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006a8e:	4649      	mov	r1, r9
 8006a90:	008b      	lsls	r3, r1, #2
 8006a92:	4641      	mov	r1, r8
 8006a94:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006a98:	4641      	mov	r1, r8
 8006a9a:	008a      	lsls	r2, r1, #2
 8006a9c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006aa0:	f7f9 ffe4 	bl	8000a6c <__aeabi_uldivmod>
 8006aa4:	4602      	mov	r2, r0
 8006aa6:	460b      	mov	r3, r1
 8006aa8:	4b0d      	ldr	r3, [pc, #52]	; (8006ae0 <UART_SetConfig+0x4e4>)
 8006aaa:	fba3 1302 	umull	r1, r3, r3, r2
 8006aae:	095b      	lsrs	r3, r3, #5
 8006ab0:	2164      	movs	r1, #100	; 0x64
 8006ab2:	fb01 f303 	mul.w	r3, r1, r3
 8006ab6:	1ad3      	subs	r3, r2, r3
 8006ab8:	011b      	lsls	r3, r3, #4
 8006aba:	3332      	adds	r3, #50	; 0x32
 8006abc:	4a08      	ldr	r2, [pc, #32]	; (8006ae0 <UART_SetConfig+0x4e4>)
 8006abe:	fba2 2303 	umull	r2, r3, r2, r3
 8006ac2:	095b      	lsrs	r3, r3, #5
 8006ac4:	f003 020f 	and.w	r2, r3, #15
 8006ac8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	4422      	add	r2, r4
 8006ad0:	609a      	str	r2, [r3, #8]
}
 8006ad2:	bf00      	nop
 8006ad4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006ade:	bf00      	nop
 8006ae0:	51eb851f 	.word	0x51eb851f

08006ae4 <__errno>:
 8006ae4:	4b01      	ldr	r3, [pc, #4]	; (8006aec <__errno+0x8>)
 8006ae6:	6818      	ldr	r0, [r3, #0]
 8006ae8:	4770      	bx	lr
 8006aea:	bf00      	nop
 8006aec:	20000020 	.word	0x20000020

08006af0 <exit>:
 8006af0:	b508      	push	{r3, lr}
 8006af2:	4b07      	ldr	r3, [pc, #28]	; (8006b10 <exit+0x20>)
 8006af4:	4604      	mov	r4, r0
 8006af6:	b113      	cbz	r3, 8006afe <exit+0xe>
 8006af8:	2100      	movs	r1, #0
 8006afa:	f3af 8000 	nop.w
 8006afe:	4b05      	ldr	r3, [pc, #20]	; (8006b14 <exit+0x24>)
 8006b00:	6818      	ldr	r0, [r3, #0]
 8006b02:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8006b04:	b103      	cbz	r3, 8006b08 <exit+0x18>
 8006b06:	4798      	blx	r3
 8006b08:	4620      	mov	r0, r4
 8006b0a:	f7fc fd37 	bl	800357c <_exit>
 8006b0e:	bf00      	nop
 8006b10:	00000000 	.word	0x00000000
 8006b14:	08007654 	.word	0x08007654

08006b18 <__libc_init_array>:
 8006b18:	b570      	push	{r4, r5, r6, lr}
 8006b1a:	4d0d      	ldr	r5, [pc, #52]	; (8006b50 <__libc_init_array+0x38>)
 8006b1c:	4c0d      	ldr	r4, [pc, #52]	; (8006b54 <__libc_init_array+0x3c>)
 8006b1e:	1b64      	subs	r4, r4, r5
 8006b20:	10a4      	asrs	r4, r4, #2
 8006b22:	2600      	movs	r6, #0
 8006b24:	42a6      	cmp	r6, r4
 8006b26:	d109      	bne.n	8006b3c <__libc_init_array+0x24>
 8006b28:	4d0b      	ldr	r5, [pc, #44]	; (8006b58 <__libc_init_array+0x40>)
 8006b2a:	4c0c      	ldr	r4, [pc, #48]	; (8006b5c <__libc_init_array+0x44>)
 8006b2c:	f000 fc8e 	bl	800744c <_init>
 8006b30:	1b64      	subs	r4, r4, r5
 8006b32:	10a4      	asrs	r4, r4, #2
 8006b34:	2600      	movs	r6, #0
 8006b36:	42a6      	cmp	r6, r4
 8006b38:	d105      	bne.n	8006b46 <__libc_init_array+0x2e>
 8006b3a:	bd70      	pop	{r4, r5, r6, pc}
 8006b3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b40:	4798      	blx	r3
 8006b42:	3601      	adds	r6, #1
 8006b44:	e7ee      	b.n	8006b24 <__libc_init_array+0xc>
 8006b46:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b4a:	4798      	blx	r3
 8006b4c:	3601      	adds	r6, #1
 8006b4e:	e7f2      	b.n	8006b36 <__libc_init_array+0x1e>
 8006b50:	08007694 	.word	0x08007694
 8006b54:	08007694 	.word	0x08007694
 8006b58:	08007694 	.word	0x08007694
 8006b5c:	08007698 	.word	0x08007698

08006b60 <memset>:
 8006b60:	4402      	add	r2, r0
 8006b62:	4603      	mov	r3, r0
 8006b64:	4293      	cmp	r3, r2
 8006b66:	d100      	bne.n	8006b6a <memset+0xa>
 8006b68:	4770      	bx	lr
 8006b6a:	f803 1b01 	strb.w	r1, [r3], #1
 8006b6e:	e7f9      	b.n	8006b64 <memset+0x4>

08006b70 <siprintf>:
 8006b70:	b40e      	push	{r1, r2, r3}
 8006b72:	b500      	push	{lr}
 8006b74:	b09c      	sub	sp, #112	; 0x70
 8006b76:	ab1d      	add	r3, sp, #116	; 0x74
 8006b78:	9002      	str	r0, [sp, #8]
 8006b7a:	9006      	str	r0, [sp, #24]
 8006b7c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006b80:	4809      	ldr	r0, [pc, #36]	; (8006ba8 <siprintf+0x38>)
 8006b82:	9107      	str	r1, [sp, #28]
 8006b84:	9104      	str	r1, [sp, #16]
 8006b86:	4909      	ldr	r1, [pc, #36]	; (8006bac <siprintf+0x3c>)
 8006b88:	f853 2b04 	ldr.w	r2, [r3], #4
 8006b8c:	9105      	str	r1, [sp, #20]
 8006b8e:	6800      	ldr	r0, [r0, #0]
 8006b90:	9301      	str	r3, [sp, #4]
 8006b92:	a902      	add	r1, sp, #8
 8006b94:	f000 f868 	bl	8006c68 <_svfiprintf_r>
 8006b98:	9b02      	ldr	r3, [sp, #8]
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	701a      	strb	r2, [r3, #0]
 8006b9e:	b01c      	add	sp, #112	; 0x70
 8006ba0:	f85d eb04 	ldr.w	lr, [sp], #4
 8006ba4:	b003      	add	sp, #12
 8006ba6:	4770      	bx	lr
 8006ba8:	20000020 	.word	0x20000020
 8006bac:	ffff0208 	.word	0xffff0208

08006bb0 <__ssputs_r>:
 8006bb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006bb4:	688e      	ldr	r6, [r1, #8]
 8006bb6:	429e      	cmp	r6, r3
 8006bb8:	4682      	mov	sl, r0
 8006bba:	460c      	mov	r4, r1
 8006bbc:	4690      	mov	r8, r2
 8006bbe:	461f      	mov	r7, r3
 8006bc0:	d838      	bhi.n	8006c34 <__ssputs_r+0x84>
 8006bc2:	898a      	ldrh	r2, [r1, #12]
 8006bc4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006bc8:	d032      	beq.n	8006c30 <__ssputs_r+0x80>
 8006bca:	6825      	ldr	r5, [r4, #0]
 8006bcc:	6909      	ldr	r1, [r1, #16]
 8006bce:	eba5 0901 	sub.w	r9, r5, r1
 8006bd2:	6965      	ldr	r5, [r4, #20]
 8006bd4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006bd8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006bdc:	3301      	adds	r3, #1
 8006bde:	444b      	add	r3, r9
 8006be0:	106d      	asrs	r5, r5, #1
 8006be2:	429d      	cmp	r5, r3
 8006be4:	bf38      	it	cc
 8006be6:	461d      	movcc	r5, r3
 8006be8:	0553      	lsls	r3, r2, #21
 8006bea:	d531      	bpl.n	8006c50 <__ssputs_r+0xa0>
 8006bec:	4629      	mov	r1, r5
 8006bee:	f000 fb63 	bl	80072b8 <_malloc_r>
 8006bf2:	4606      	mov	r6, r0
 8006bf4:	b950      	cbnz	r0, 8006c0c <__ssputs_r+0x5c>
 8006bf6:	230c      	movs	r3, #12
 8006bf8:	f8ca 3000 	str.w	r3, [sl]
 8006bfc:	89a3      	ldrh	r3, [r4, #12]
 8006bfe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c02:	81a3      	strh	r3, [r4, #12]
 8006c04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006c08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c0c:	6921      	ldr	r1, [r4, #16]
 8006c0e:	464a      	mov	r2, r9
 8006c10:	f000 fabe 	bl	8007190 <memcpy>
 8006c14:	89a3      	ldrh	r3, [r4, #12]
 8006c16:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006c1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c1e:	81a3      	strh	r3, [r4, #12]
 8006c20:	6126      	str	r6, [r4, #16]
 8006c22:	6165      	str	r5, [r4, #20]
 8006c24:	444e      	add	r6, r9
 8006c26:	eba5 0509 	sub.w	r5, r5, r9
 8006c2a:	6026      	str	r6, [r4, #0]
 8006c2c:	60a5      	str	r5, [r4, #8]
 8006c2e:	463e      	mov	r6, r7
 8006c30:	42be      	cmp	r6, r7
 8006c32:	d900      	bls.n	8006c36 <__ssputs_r+0x86>
 8006c34:	463e      	mov	r6, r7
 8006c36:	6820      	ldr	r0, [r4, #0]
 8006c38:	4632      	mov	r2, r6
 8006c3a:	4641      	mov	r1, r8
 8006c3c:	f000 fab6 	bl	80071ac <memmove>
 8006c40:	68a3      	ldr	r3, [r4, #8]
 8006c42:	1b9b      	subs	r3, r3, r6
 8006c44:	60a3      	str	r3, [r4, #8]
 8006c46:	6823      	ldr	r3, [r4, #0]
 8006c48:	4433      	add	r3, r6
 8006c4a:	6023      	str	r3, [r4, #0]
 8006c4c:	2000      	movs	r0, #0
 8006c4e:	e7db      	b.n	8006c08 <__ssputs_r+0x58>
 8006c50:	462a      	mov	r2, r5
 8006c52:	f000 fba5 	bl	80073a0 <_realloc_r>
 8006c56:	4606      	mov	r6, r0
 8006c58:	2800      	cmp	r0, #0
 8006c5a:	d1e1      	bne.n	8006c20 <__ssputs_r+0x70>
 8006c5c:	6921      	ldr	r1, [r4, #16]
 8006c5e:	4650      	mov	r0, sl
 8006c60:	f000 fabe 	bl	80071e0 <_free_r>
 8006c64:	e7c7      	b.n	8006bf6 <__ssputs_r+0x46>
	...

08006c68 <_svfiprintf_r>:
 8006c68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c6c:	4698      	mov	r8, r3
 8006c6e:	898b      	ldrh	r3, [r1, #12]
 8006c70:	061b      	lsls	r3, r3, #24
 8006c72:	b09d      	sub	sp, #116	; 0x74
 8006c74:	4607      	mov	r7, r0
 8006c76:	460d      	mov	r5, r1
 8006c78:	4614      	mov	r4, r2
 8006c7a:	d50e      	bpl.n	8006c9a <_svfiprintf_r+0x32>
 8006c7c:	690b      	ldr	r3, [r1, #16]
 8006c7e:	b963      	cbnz	r3, 8006c9a <_svfiprintf_r+0x32>
 8006c80:	2140      	movs	r1, #64	; 0x40
 8006c82:	f000 fb19 	bl	80072b8 <_malloc_r>
 8006c86:	6028      	str	r0, [r5, #0]
 8006c88:	6128      	str	r0, [r5, #16]
 8006c8a:	b920      	cbnz	r0, 8006c96 <_svfiprintf_r+0x2e>
 8006c8c:	230c      	movs	r3, #12
 8006c8e:	603b      	str	r3, [r7, #0]
 8006c90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006c94:	e0d1      	b.n	8006e3a <_svfiprintf_r+0x1d2>
 8006c96:	2340      	movs	r3, #64	; 0x40
 8006c98:	616b      	str	r3, [r5, #20]
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	9309      	str	r3, [sp, #36]	; 0x24
 8006c9e:	2320      	movs	r3, #32
 8006ca0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006ca4:	f8cd 800c 	str.w	r8, [sp, #12]
 8006ca8:	2330      	movs	r3, #48	; 0x30
 8006caa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006e54 <_svfiprintf_r+0x1ec>
 8006cae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006cb2:	f04f 0901 	mov.w	r9, #1
 8006cb6:	4623      	mov	r3, r4
 8006cb8:	469a      	mov	sl, r3
 8006cba:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006cbe:	b10a      	cbz	r2, 8006cc4 <_svfiprintf_r+0x5c>
 8006cc0:	2a25      	cmp	r2, #37	; 0x25
 8006cc2:	d1f9      	bne.n	8006cb8 <_svfiprintf_r+0x50>
 8006cc4:	ebba 0b04 	subs.w	fp, sl, r4
 8006cc8:	d00b      	beq.n	8006ce2 <_svfiprintf_r+0x7a>
 8006cca:	465b      	mov	r3, fp
 8006ccc:	4622      	mov	r2, r4
 8006cce:	4629      	mov	r1, r5
 8006cd0:	4638      	mov	r0, r7
 8006cd2:	f7ff ff6d 	bl	8006bb0 <__ssputs_r>
 8006cd6:	3001      	adds	r0, #1
 8006cd8:	f000 80aa 	beq.w	8006e30 <_svfiprintf_r+0x1c8>
 8006cdc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006cde:	445a      	add	r2, fp
 8006ce0:	9209      	str	r2, [sp, #36]	; 0x24
 8006ce2:	f89a 3000 	ldrb.w	r3, [sl]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	f000 80a2 	beq.w	8006e30 <_svfiprintf_r+0x1c8>
 8006cec:	2300      	movs	r3, #0
 8006cee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006cf2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006cf6:	f10a 0a01 	add.w	sl, sl, #1
 8006cfa:	9304      	str	r3, [sp, #16]
 8006cfc:	9307      	str	r3, [sp, #28]
 8006cfe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006d02:	931a      	str	r3, [sp, #104]	; 0x68
 8006d04:	4654      	mov	r4, sl
 8006d06:	2205      	movs	r2, #5
 8006d08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d0c:	4851      	ldr	r0, [pc, #324]	; (8006e54 <_svfiprintf_r+0x1ec>)
 8006d0e:	f7f9 fa67 	bl	80001e0 <memchr>
 8006d12:	9a04      	ldr	r2, [sp, #16]
 8006d14:	b9d8      	cbnz	r0, 8006d4e <_svfiprintf_r+0xe6>
 8006d16:	06d0      	lsls	r0, r2, #27
 8006d18:	bf44      	itt	mi
 8006d1a:	2320      	movmi	r3, #32
 8006d1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006d20:	0711      	lsls	r1, r2, #28
 8006d22:	bf44      	itt	mi
 8006d24:	232b      	movmi	r3, #43	; 0x2b
 8006d26:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006d2a:	f89a 3000 	ldrb.w	r3, [sl]
 8006d2e:	2b2a      	cmp	r3, #42	; 0x2a
 8006d30:	d015      	beq.n	8006d5e <_svfiprintf_r+0xf6>
 8006d32:	9a07      	ldr	r2, [sp, #28]
 8006d34:	4654      	mov	r4, sl
 8006d36:	2000      	movs	r0, #0
 8006d38:	f04f 0c0a 	mov.w	ip, #10
 8006d3c:	4621      	mov	r1, r4
 8006d3e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006d42:	3b30      	subs	r3, #48	; 0x30
 8006d44:	2b09      	cmp	r3, #9
 8006d46:	d94e      	bls.n	8006de6 <_svfiprintf_r+0x17e>
 8006d48:	b1b0      	cbz	r0, 8006d78 <_svfiprintf_r+0x110>
 8006d4a:	9207      	str	r2, [sp, #28]
 8006d4c:	e014      	b.n	8006d78 <_svfiprintf_r+0x110>
 8006d4e:	eba0 0308 	sub.w	r3, r0, r8
 8006d52:	fa09 f303 	lsl.w	r3, r9, r3
 8006d56:	4313      	orrs	r3, r2
 8006d58:	9304      	str	r3, [sp, #16]
 8006d5a:	46a2      	mov	sl, r4
 8006d5c:	e7d2      	b.n	8006d04 <_svfiprintf_r+0x9c>
 8006d5e:	9b03      	ldr	r3, [sp, #12]
 8006d60:	1d19      	adds	r1, r3, #4
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	9103      	str	r1, [sp, #12]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	bfbb      	ittet	lt
 8006d6a:	425b      	neglt	r3, r3
 8006d6c:	f042 0202 	orrlt.w	r2, r2, #2
 8006d70:	9307      	strge	r3, [sp, #28]
 8006d72:	9307      	strlt	r3, [sp, #28]
 8006d74:	bfb8      	it	lt
 8006d76:	9204      	strlt	r2, [sp, #16]
 8006d78:	7823      	ldrb	r3, [r4, #0]
 8006d7a:	2b2e      	cmp	r3, #46	; 0x2e
 8006d7c:	d10c      	bne.n	8006d98 <_svfiprintf_r+0x130>
 8006d7e:	7863      	ldrb	r3, [r4, #1]
 8006d80:	2b2a      	cmp	r3, #42	; 0x2a
 8006d82:	d135      	bne.n	8006df0 <_svfiprintf_r+0x188>
 8006d84:	9b03      	ldr	r3, [sp, #12]
 8006d86:	1d1a      	adds	r2, r3, #4
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	9203      	str	r2, [sp, #12]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	bfb8      	it	lt
 8006d90:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006d94:	3402      	adds	r4, #2
 8006d96:	9305      	str	r3, [sp, #20]
 8006d98:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006e64 <_svfiprintf_r+0x1fc>
 8006d9c:	7821      	ldrb	r1, [r4, #0]
 8006d9e:	2203      	movs	r2, #3
 8006da0:	4650      	mov	r0, sl
 8006da2:	f7f9 fa1d 	bl	80001e0 <memchr>
 8006da6:	b140      	cbz	r0, 8006dba <_svfiprintf_r+0x152>
 8006da8:	2340      	movs	r3, #64	; 0x40
 8006daa:	eba0 000a 	sub.w	r0, r0, sl
 8006dae:	fa03 f000 	lsl.w	r0, r3, r0
 8006db2:	9b04      	ldr	r3, [sp, #16]
 8006db4:	4303      	orrs	r3, r0
 8006db6:	3401      	adds	r4, #1
 8006db8:	9304      	str	r3, [sp, #16]
 8006dba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006dbe:	4826      	ldr	r0, [pc, #152]	; (8006e58 <_svfiprintf_r+0x1f0>)
 8006dc0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006dc4:	2206      	movs	r2, #6
 8006dc6:	f7f9 fa0b 	bl	80001e0 <memchr>
 8006dca:	2800      	cmp	r0, #0
 8006dcc:	d038      	beq.n	8006e40 <_svfiprintf_r+0x1d8>
 8006dce:	4b23      	ldr	r3, [pc, #140]	; (8006e5c <_svfiprintf_r+0x1f4>)
 8006dd0:	bb1b      	cbnz	r3, 8006e1a <_svfiprintf_r+0x1b2>
 8006dd2:	9b03      	ldr	r3, [sp, #12]
 8006dd4:	3307      	adds	r3, #7
 8006dd6:	f023 0307 	bic.w	r3, r3, #7
 8006dda:	3308      	adds	r3, #8
 8006ddc:	9303      	str	r3, [sp, #12]
 8006dde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006de0:	4433      	add	r3, r6
 8006de2:	9309      	str	r3, [sp, #36]	; 0x24
 8006de4:	e767      	b.n	8006cb6 <_svfiprintf_r+0x4e>
 8006de6:	fb0c 3202 	mla	r2, ip, r2, r3
 8006dea:	460c      	mov	r4, r1
 8006dec:	2001      	movs	r0, #1
 8006dee:	e7a5      	b.n	8006d3c <_svfiprintf_r+0xd4>
 8006df0:	2300      	movs	r3, #0
 8006df2:	3401      	adds	r4, #1
 8006df4:	9305      	str	r3, [sp, #20]
 8006df6:	4619      	mov	r1, r3
 8006df8:	f04f 0c0a 	mov.w	ip, #10
 8006dfc:	4620      	mov	r0, r4
 8006dfe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006e02:	3a30      	subs	r2, #48	; 0x30
 8006e04:	2a09      	cmp	r2, #9
 8006e06:	d903      	bls.n	8006e10 <_svfiprintf_r+0x1a8>
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d0c5      	beq.n	8006d98 <_svfiprintf_r+0x130>
 8006e0c:	9105      	str	r1, [sp, #20]
 8006e0e:	e7c3      	b.n	8006d98 <_svfiprintf_r+0x130>
 8006e10:	fb0c 2101 	mla	r1, ip, r1, r2
 8006e14:	4604      	mov	r4, r0
 8006e16:	2301      	movs	r3, #1
 8006e18:	e7f0      	b.n	8006dfc <_svfiprintf_r+0x194>
 8006e1a:	ab03      	add	r3, sp, #12
 8006e1c:	9300      	str	r3, [sp, #0]
 8006e1e:	462a      	mov	r2, r5
 8006e20:	4b0f      	ldr	r3, [pc, #60]	; (8006e60 <_svfiprintf_r+0x1f8>)
 8006e22:	a904      	add	r1, sp, #16
 8006e24:	4638      	mov	r0, r7
 8006e26:	f3af 8000 	nop.w
 8006e2a:	1c42      	adds	r2, r0, #1
 8006e2c:	4606      	mov	r6, r0
 8006e2e:	d1d6      	bne.n	8006dde <_svfiprintf_r+0x176>
 8006e30:	89ab      	ldrh	r3, [r5, #12]
 8006e32:	065b      	lsls	r3, r3, #25
 8006e34:	f53f af2c 	bmi.w	8006c90 <_svfiprintf_r+0x28>
 8006e38:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006e3a:	b01d      	add	sp, #116	; 0x74
 8006e3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e40:	ab03      	add	r3, sp, #12
 8006e42:	9300      	str	r3, [sp, #0]
 8006e44:	462a      	mov	r2, r5
 8006e46:	4b06      	ldr	r3, [pc, #24]	; (8006e60 <_svfiprintf_r+0x1f8>)
 8006e48:	a904      	add	r1, sp, #16
 8006e4a:	4638      	mov	r0, r7
 8006e4c:	f000 f87a 	bl	8006f44 <_printf_i>
 8006e50:	e7eb      	b.n	8006e2a <_svfiprintf_r+0x1c2>
 8006e52:	bf00      	nop
 8006e54:	08007658 	.word	0x08007658
 8006e58:	08007662 	.word	0x08007662
 8006e5c:	00000000 	.word	0x00000000
 8006e60:	08006bb1 	.word	0x08006bb1
 8006e64:	0800765e 	.word	0x0800765e

08006e68 <_printf_common>:
 8006e68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e6c:	4616      	mov	r6, r2
 8006e6e:	4699      	mov	r9, r3
 8006e70:	688a      	ldr	r2, [r1, #8]
 8006e72:	690b      	ldr	r3, [r1, #16]
 8006e74:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	bfb8      	it	lt
 8006e7c:	4613      	movlt	r3, r2
 8006e7e:	6033      	str	r3, [r6, #0]
 8006e80:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006e84:	4607      	mov	r7, r0
 8006e86:	460c      	mov	r4, r1
 8006e88:	b10a      	cbz	r2, 8006e8e <_printf_common+0x26>
 8006e8a:	3301      	adds	r3, #1
 8006e8c:	6033      	str	r3, [r6, #0]
 8006e8e:	6823      	ldr	r3, [r4, #0]
 8006e90:	0699      	lsls	r1, r3, #26
 8006e92:	bf42      	ittt	mi
 8006e94:	6833      	ldrmi	r3, [r6, #0]
 8006e96:	3302      	addmi	r3, #2
 8006e98:	6033      	strmi	r3, [r6, #0]
 8006e9a:	6825      	ldr	r5, [r4, #0]
 8006e9c:	f015 0506 	ands.w	r5, r5, #6
 8006ea0:	d106      	bne.n	8006eb0 <_printf_common+0x48>
 8006ea2:	f104 0a19 	add.w	sl, r4, #25
 8006ea6:	68e3      	ldr	r3, [r4, #12]
 8006ea8:	6832      	ldr	r2, [r6, #0]
 8006eaa:	1a9b      	subs	r3, r3, r2
 8006eac:	42ab      	cmp	r3, r5
 8006eae:	dc26      	bgt.n	8006efe <_printf_common+0x96>
 8006eb0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006eb4:	1e13      	subs	r3, r2, #0
 8006eb6:	6822      	ldr	r2, [r4, #0]
 8006eb8:	bf18      	it	ne
 8006eba:	2301      	movne	r3, #1
 8006ebc:	0692      	lsls	r2, r2, #26
 8006ebe:	d42b      	bmi.n	8006f18 <_printf_common+0xb0>
 8006ec0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006ec4:	4649      	mov	r1, r9
 8006ec6:	4638      	mov	r0, r7
 8006ec8:	47c0      	blx	r8
 8006eca:	3001      	adds	r0, #1
 8006ecc:	d01e      	beq.n	8006f0c <_printf_common+0xa4>
 8006ece:	6823      	ldr	r3, [r4, #0]
 8006ed0:	68e5      	ldr	r5, [r4, #12]
 8006ed2:	6832      	ldr	r2, [r6, #0]
 8006ed4:	f003 0306 	and.w	r3, r3, #6
 8006ed8:	2b04      	cmp	r3, #4
 8006eda:	bf08      	it	eq
 8006edc:	1aad      	subeq	r5, r5, r2
 8006ede:	68a3      	ldr	r3, [r4, #8]
 8006ee0:	6922      	ldr	r2, [r4, #16]
 8006ee2:	bf0c      	ite	eq
 8006ee4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006ee8:	2500      	movne	r5, #0
 8006eea:	4293      	cmp	r3, r2
 8006eec:	bfc4      	itt	gt
 8006eee:	1a9b      	subgt	r3, r3, r2
 8006ef0:	18ed      	addgt	r5, r5, r3
 8006ef2:	2600      	movs	r6, #0
 8006ef4:	341a      	adds	r4, #26
 8006ef6:	42b5      	cmp	r5, r6
 8006ef8:	d11a      	bne.n	8006f30 <_printf_common+0xc8>
 8006efa:	2000      	movs	r0, #0
 8006efc:	e008      	b.n	8006f10 <_printf_common+0xa8>
 8006efe:	2301      	movs	r3, #1
 8006f00:	4652      	mov	r2, sl
 8006f02:	4649      	mov	r1, r9
 8006f04:	4638      	mov	r0, r7
 8006f06:	47c0      	blx	r8
 8006f08:	3001      	adds	r0, #1
 8006f0a:	d103      	bne.n	8006f14 <_printf_common+0xac>
 8006f0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006f10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f14:	3501      	adds	r5, #1
 8006f16:	e7c6      	b.n	8006ea6 <_printf_common+0x3e>
 8006f18:	18e1      	adds	r1, r4, r3
 8006f1a:	1c5a      	adds	r2, r3, #1
 8006f1c:	2030      	movs	r0, #48	; 0x30
 8006f1e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006f22:	4422      	add	r2, r4
 8006f24:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006f28:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006f2c:	3302      	adds	r3, #2
 8006f2e:	e7c7      	b.n	8006ec0 <_printf_common+0x58>
 8006f30:	2301      	movs	r3, #1
 8006f32:	4622      	mov	r2, r4
 8006f34:	4649      	mov	r1, r9
 8006f36:	4638      	mov	r0, r7
 8006f38:	47c0      	blx	r8
 8006f3a:	3001      	adds	r0, #1
 8006f3c:	d0e6      	beq.n	8006f0c <_printf_common+0xa4>
 8006f3e:	3601      	adds	r6, #1
 8006f40:	e7d9      	b.n	8006ef6 <_printf_common+0x8e>
	...

08006f44 <_printf_i>:
 8006f44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006f48:	7e0f      	ldrb	r7, [r1, #24]
 8006f4a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006f4c:	2f78      	cmp	r7, #120	; 0x78
 8006f4e:	4691      	mov	r9, r2
 8006f50:	4680      	mov	r8, r0
 8006f52:	460c      	mov	r4, r1
 8006f54:	469a      	mov	sl, r3
 8006f56:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006f5a:	d807      	bhi.n	8006f6c <_printf_i+0x28>
 8006f5c:	2f62      	cmp	r7, #98	; 0x62
 8006f5e:	d80a      	bhi.n	8006f76 <_printf_i+0x32>
 8006f60:	2f00      	cmp	r7, #0
 8006f62:	f000 80d8 	beq.w	8007116 <_printf_i+0x1d2>
 8006f66:	2f58      	cmp	r7, #88	; 0x58
 8006f68:	f000 80a3 	beq.w	80070b2 <_printf_i+0x16e>
 8006f6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006f70:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006f74:	e03a      	b.n	8006fec <_printf_i+0xa8>
 8006f76:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006f7a:	2b15      	cmp	r3, #21
 8006f7c:	d8f6      	bhi.n	8006f6c <_printf_i+0x28>
 8006f7e:	a101      	add	r1, pc, #4	; (adr r1, 8006f84 <_printf_i+0x40>)
 8006f80:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006f84:	08006fdd 	.word	0x08006fdd
 8006f88:	08006ff1 	.word	0x08006ff1
 8006f8c:	08006f6d 	.word	0x08006f6d
 8006f90:	08006f6d 	.word	0x08006f6d
 8006f94:	08006f6d 	.word	0x08006f6d
 8006f98:	08006f6d 	.word	0x08006f6d
 8006f9c:	08006ff1 	.word	0x08006ff1
 8006fa0:	08006f6d 	.word	0x08006f6d
 8006fa4:	08006f6d 	.word	0x08006f6d
 8006fa8:	08006f6d 	.word	0x08006f6d
 8006fac:	08006f6d 	.word	0x08006f6d
 8006fb0:	080070fd 	.word	0x080070fd
 8006fb4:	08007021 	.word	0x08007021
 8006fb8:	080070df 	.word	0x080070df
 8006fbc:	08006f6d 	.word	0x08006f6d
 8006fc0:	08006f6d 	.word	0x08006f6d
 8006fc4:	0800711f 	.word	0x0800711f
 8006fc8:	08006f6d 	.word	0x08006f6d
 8006fcc:	08007021 	.word	0x08007021
 8006fd0:	08006f6d 	.word	0x08006f6d
 8006fd4:	08006f6d 	.word	0x08006f6d
 8006fd8:	080070e7 	.word	0x080070e7
 8006fdc:	682b      	ldr	r3, [r5, #0]
 8006fde:	1d1a      	adds	r2, r3, #4
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	602a      	str	r2, [r5, #0]
 8006fe4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006fe8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006fec:	2301      	movs	r3, #1
 8006fee:	e0a3      	b.n	8007138 <_printf_i+0x1f4>
 8006ff0:	6820      	ldr	r0, [r4, #0]
 8006ff2:	6829      	ldr	r1, [r5, #0]
 8006ff4:	0606      	lsls	r6, r0, #24
 8006ff6:	f101 0304 	add.w	r3, r1, #4
 8006ffa:	d50a      	bpl.n	8007012 <_printf_i+0xce>
 8006ffc:	680e      	ldr	r6, [r1, #0]
 8006ffe:	602b      	str	r3, [r5, #0]
 8007000:	2e00      	cmp	r6, #0
 8007002:	da03      	bge.n	800700c <_printf_i+0xc8>
 8007004:	232d      	movs	r3, #45	; 0x2d
 8007006:	4276      	negs	r6, r6
 8007008:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800700c:	485e      	ldr	r0, [pc, #376]	; (8007188 <_printf_i+0x244>)
 800700e:	230a      	movs	r3, #10
 8007010:	e019      	b.n	8007046 <_printf_i+0x102>
 8007012:	680e      	ldr	r6, [r1, #0]
 8007014:	602b      	str	r3, [r5, #0]
 8007016:	f010 0f40 	tst.w	r0, #64	; 0x40
 800701a:	bf18      	it	ne
 800701c:	b236      	sxthne	r6, r6
 800701e:	e7ef      	b.n	8007000 <_printf_i+0xbc>
 8007020:	682b      	ldr	r3, [r5, #0]
 8007022:	6820      	ldr	r0, [r4, #0]
 8007024:	1d19      	adds	r1, r3, #4
 8007026:	6029      	str	r1, [r5, #0]
 8007028:	0601      	lsls	r1, r0, #24
 800702a:	d501      	bpl.n	8007030 <_printf_i+0xec>
 800702c:	681e      	ldr	r6, [r3, #0]
 800702e:	e002      	b.n	8007036 <_printf_i+0xf2>
 8007030:	0646      	lsls	r6, r0, #25
 8007032:	d5fb      	bpl.n	800702c <_printf_i+0xe8>
 8007034:	881e      	ldrh	r6, [r3, #0]
 8007036:	4854      	ldr	r0, [pc, #336]	; (8007188 <_printf_i+0x244>)
 8007038:	2f6f      	cmp	r7, #111	; 0x6f
 800703a:	bf0c      	ite	eq
 800703c:	2308      	moveq	r3, #8
 800703e:	230a      	movne	r3, #10
 8007040:	2100      	movs	r1, #0
 8007042:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007046:	6865      	ldr	r5, [r4, #4]
 8007048:	60a5      	str	r5, [r4, #8]
 800704a:	2d00      	cmp	r5, #0
 800704c:	bfa2      	ittt	ge
 800704e:	6821      	ldrge	r1, [r4, #0]
 8007050:	f021 0104 	bicge.w	r1, r1, #4
 8007054:	6021      	strge	r1, [r4, #0]
 8007056:	b90e      	cbnz	r6, 800705c <_printf_i+0x118>
 8007058:	2d00      	cmp	r5, #0
 800705a:	d04d      	beq.n	80070f8 <_printf_i+0x1b4>
 800705c:	4615      	mov	r5, r2
 800705e:	fbb6 f1f3 	udiv	r1, r6, r3
 8007062:	fb03 6711 	mls	r7, r3, r1, r6
 8007066:	5dc7      	ldrb	r7, [r0, r7]
 8007068:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800706c:	4637      	mov	r7, r6
 800706e:	42bb      	cmp	r3, r7
 8007070:	460e      	mov	r6, r1
 8007072:	d9f4      	bls.n	800705e <_printf_i+0x11a>
 8007074:	2b08      	cmp	r3, #8
 8007076:	d10b      	bne.n	8007090 <_printf_i+0x14c>
 8007078:	6823      	ldr	r3, [r4, #0]
 800707a:	07de      	lsls	r6, r3, #31
 800707c:	d508      	bpl.n	8007090 <_printf_i+0x14c>
 800707e:	6923      	ldr	r3, [r4, #16]
 8007080:	6861      	ldr	r1, [r4, #4]
 8007082:	4299      	cmp	r1, r3
 8007084:	bfde      	ittt	le
 8007086:	2330      	movle	r3, #48	; 0x30
 8007088:	f805 3c01 	strble.w	r3, [r5, #-1]
 800708c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8007090:	1b52      	subs	r2, r2, r5
 8007092:	6122      	str	r2, [r4, #16]
 8007094:	f8cd a000 	str.w	sl, [sp]
 8007098:	464b      	mov	r3, r9
 800709a:	aa03      	add	r2, sp, #12
 800709c:	4621      	mov	r1, r4
 800709e:	4640      	mov	r0, r8
 80070a0:	f7ff fee2 	bl	8006e68 <_printf_common>
 80070a4:	3001      	adds	r0, #1
 80070a6:	d14c      	bne.n	8007142 <_printf_i+0x1fe>
 80070a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80070ac:	b004      	add	sp, #16
 80070ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070b2:	4835      	ldr	r0, [pc, #212]	; (8007188 <_printf_i+0x244>)
 80070b4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80070b8:	6829      	ldr	r1, [r5, #0]
 80070ba:	6823      	ldr	r3, [r4, #0]
 80070bc:	f851 6b04 	ldr.w	r6, [r1], #4
 80070c0:	6029      	str	r1, [r5, #0]
 80070c2:	061d      	lsls	r5, r3, #24
 80070c4:	d514      	bpl.n	80070f0 <_printf_i+0x1ac>
 80070c6:	07df      	lsls	r7, r3, #31
 80070c8:	bf44      	itt	mi
 80070ca:	f043 0320 	orrmi.w	r3, r3, #32
 80070ce:	6023      	strmi	r3, [r4, #0]
 80070d0:	b91e      	cbnz	r6, 80070da <_printf_i+0x196>
 80070d2:	6823      	ldr	r3, [r4, #0]
 80070d4:	f023 0320 	bic.w	r3, r3, #32
 80070d8:	6023      	str	r3, [r4, #0]
 80070da:	2310      	movs	r3, #16
 80070dc:	e7b0      	b.n	8007040 <_printf_i+0xfc>
 80070de:	6823      	ldr	r3, [r4, #0]
 80070e0:	f043 0320 	orr.w	r3, r3, #32
 80070e4:	6023      	str	r3, [r4, #0]
 80070e6:	2378      	movs	r3, #120	; 0x78
 80070e8:	4828      	ldr	r0, [pc, #160]	; (800718c <_printf_i+0x248>)
 80070ea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80070ee:	e7e3      	b.n	80070b8 <_printf_i+0x174>
 80070f0:	0659      	lsls	r1, r3, #25
 80070f2:	bf48      	it	mi
 80070f4:	b2b6      	uxthmi	r6, r6
 80070f6:	e7e6      	b.n	80070c6 <_printf_i+0x182>
 80070f8:	4615      	mov	r5, r2
 80070fa:	e7bb      	b.n	8007074 <_printf_i+0x130>
 80070fc:	682b      	ldr	r3, [r5, #0]
 80070fe:	6826      	ldr	r6, [r4, #0]
 8007100:	6961      	ldr	r1, [r4, #20]
 8007102:	1d18      	adds	r0, r3, #4
 8007104:	6028      	str	r0, [r5, #0]
 8007106:	0635      	lsls	r5, r6, #24
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	d501      	bpl.n	8007110 <_printf_i+0x1cc>
 800710c:	6019      	str	r1, [r3, #0]
 800710e:	e002      	b.n	8007116 <_printf_i+0x1d2>
 8007110:	0670      	lsls	r0, r6, #25
 8007112:	d5fb      	bpl.n	800710c <_printf_i+0x1c8>
 8007114:	8019      	strh	r1, [r3, #0]
 8007116:	2300      	movs	r3, #0
 8007118:	6123      	str	r3, [r4, #16]
 800711a:	4615      	mov	r5, r2
 800711c:	e7ba      	b.n	8007094 <_printf_i+0x150>
 800711e:	682b      	ldr	r3, [r5, #0]
 8007120:	1d1a      	adds	r2, r3, #4
 8007122:	602a      	str	r2, [r5, #0]
 8007124:	681d      	ldr	r5, [r3, #0]
 8007126:	6862      	ldr	r2, [r4, #4]
 8007128:	2100      	movs	r1, #0
 800712a:	4628      	mov	r0, r5
 800712c:	f7f9 f858 	bl	80001e0 <memchr>
 8007130:	b108      	cbz	r0, 8007136 <_printf_i+0x1f2>
 8007132:	1b40      	subs	r0, r0, r5
 8007134:	6060      	str	r0, [r4, #4]
 8007136:	6863      	ldr	r3, [r4, #4]
 8007138:	6123      	str	r3, [r4, #16]
 800713a:	2300      	movs	r3, #0
 800713c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007140:	e7a8      	b.n	8007094 <_printf_i+0x150>
 8007142:	6923      	ldr	r3, [r4, #16]
 8007144:	462a      	mov	r2, r5
 8007146:	4649      	mov	r1, r9
 8007148:	4640      	mov	r0, r8
 800714a:	47d0      	blx	sl
 800714c:	3001      	adds	r0, #1
 800714e:	d0ab      	beq.n	80070a8 <_printf_i+0x164>
 8007150:	6823      	ldr	r3, [r4, #0]
 8007152:	079b      	lsls	r3, r3, #30
 8007154:	d413      	bmi.n	800717e <_printf_i+0x23a>
 8007156:	68e0      	ldr	r0, [r4, #12]
 8007158:	9b03      	ldr	r3, [sp, #12]
 800715a:	4298      	cmp	r0, r3
 800715c:	bfb8      	it	lt
 800715e:	4618      	movlt	r0, r3
 8007160:	e7a4      	b.n	80070ac <_printf_i+0x168>
 8007162:	2301      	movs	r3, #1
 8007164:	4632      	mov	r2, r6
 8007166:	4649      	mov	r1, r9
 8007168:	4640      	mov	r0, r8
 800716a:	47d0      	blx	sl
 800716c:	3001      	adds	r0, #1
 800716e:	d09b      	beq.n	80070a8 <_printf_i+0x164>
 8007170:	3501      	adds	r5, #1
 8007172:	68e3      	ldr	r3, [r4, #12]
 8007174:	9903      	ldr	r1, [sp, #12]
 8007176:	1a5b      	subs	r3, r3, r1
 8007178:	42ab      	cmp	r3, r5
 800717a:	dcf2      	bgt.n	8007162 <_printf_i+0x21e>
 800717c:	e7eb      	b.n	8007156 <_printf_i+0x212>
 800717e:	2500      	movs	r5, #0
 8007180:	f104 0619 	add.w	r6, r4, #25
 8007184:	e7f5      	b.n	8007172 <_printf_i+0x22e>
 8007186:	bf00      	nop
 8007188:	08007669 	.word	0x08007669
 800718c:	0800767a 	.word	0x0800767a

08007190 <memcpy>:
 8007190:	440a      	add	r2, r1
 8007192:	4291      	cmp	r1, r2
 8007194:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007198:	d100      	bne.n	800719c <memcpy+0xc>
 800719a:	4770      	bx	lr
 800719c:	b510      	push	{r4, lr}
 800719e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80071a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80071a6:	4291      	cmp	r1, r2
 80071a8:	d1f9      	bne.n	800719e <memcpy+0xe>
 80071aa:	bd10      	pop	{r4, pc}

080071ac <memmove>:
 80071ac:	4288      	cmp	r0, r1
 80071ae:	b510      	push	{r4, lr}
 80071b0:	eb01 0402 	add.w	r4, r1, r2
 80071b4:	d902      	bls.n	80071bc <memmove+0x10>
 80071b6:	4284      	cmp	r4, r0
 80071b8:	4623      	mov	r3, r4
 80071ba:	d807      	bhi.n	80071cc <memmove+0x20>
 80071bc:	1e43      	subs	r3, r0, #1
 80071be:	42a1      	cmp	r1, r4
 80071c0:	d008      	beq.n	80071d4 <memmove+0x28>
 80071c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80071c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80071ca:	e7f8      	b.n	80071be <memmove+0x12>
 80071cc:	4402      	add	r2, r0
 80071ce:	4601      	mov	r1, r0
 80071d0:	428a      	cmp	r2, r1
 80071d2:	d100      	bne.n	80071d6 <memmove+0x2a>
 80071d4:	bd10      	pop	{r4, pc}
 80071d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80071da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80071de:	e7f7      	b.n	80071d0 <memmove+0x24>

080071e0 <_free_r>:
 80071e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80071e2:	2900      	cmp	r1, #0
 80071e4:	d044      	beq.n	8007270 <_free_r+0x90>
 80071e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80071ea:	9001      	str	r0, [sp, #4]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	f1a1 0404 	sub.w	r4, r1, #4
 80071f2:	bfb8      	it	lt
 80071f4:	18e4      	addlt	r4, r4, r3
 80071f6:	f000 f913 	bl	8007420 <__malloc_lock>
 80071fa:	4a1e      	ldr	r2, [pc, #120]	; (8007274 <_free_r+0x94>)
 80071fc:	9801      	ldr	r0, [sp, #4]
 80071fe:	6813      	ldr	r3, [r2, #0]
 8007200:	b933      	cbnz	r3, 8007210 <_free_r+0x30>
 8007202:	6063      	str	r3, [r4, #4]
 8007204:	6014      	str	r4, [r2, #0]
 8007206:	b003      	add	sp, #12
 8007208:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800720c:	f000 b90e 	b.w	800742c <__malloc_unlock>
 8007210:	42a3      	cmp	r3, r4
 8007212:	d908      	bls.n	8007226 <_free_r+0x46>
 8007214:	6825      	ldr	r5, [r4, #0]
 8007216:	1961      	adds	r1, r4, r5
 8007218:	428b      	cmp	r3, r1
 800721a:	bf01      	itttt	eq
 800721c:	6819      	ldreq	r1, [r3, #0]
 800721e:	685b      	ldreq	r3, [r3, #4]
 8007220:	1949      	addeq	r1, r1, r5
 8007222:	6021      	streq	r1, [r4, #0]
 8007224:	e7ed      	b.n	8007202 <_free_r+0x22>
 8007226:	461a      	mov	r2, r3
 8007228:	685b      	ldr	r3, [r3, #4]
 800722a:	b10b      	cbz	r3, 8007230 <_free_r+0x50>
 800722c:	42a3      	cmp	r3, r4
 800722e:	d9fa      	bls.n	8007226 <_free_r+0x46>
 8007230:	6811      	ldr	r1, [r2, #0]
 8007232:	1855      	adds	r5, r2, r1
 8007234:	42a5      	cmp	r5, r4
 8007236:	d10b      	bne.n	8007250 <_free_r+0x70>
 8007238:	6824      	ldr	r4, [r4, #0]
 800723a:	4421      	add	r1, r4
 800723c:	1854      	adds	r4, r2, r1
 800723e:	42a3      	cmp	r3, r4
 8007240:	6011      	str	r1, [r2, #0]
 8007242:	d1e0      	bne.n	8007206 <_free_r+0x26>
 8007244:	681c      	ldr	r4, [r3, #0]
 8007246:	685b      	ldr	r3, [r3, #4]
 8007248:	6053      	str	r3, [r2, #4]
 800724a:	4421      	add	r1, r4
 800724c:	6011      	str	r1, [r2, #0]
 800724e:	e7da      	b.n	8007206 <_free_r+0x26>
 8007250:	d902      	bls.n	8007258 <_free_r+0x78>
 8007252:	230c      	movs	r3, #12
 8007254:	6003      	str	r3, [r0, #0]
 8007256:	e7d6      	b.n	8007206 <_free_r+0x26>
 8007258:	6825      	ldr	r5, [r4, #0]
 800725a:	1961      	adds	r1, r4, r5
 800725c:	428b      	cmp	r3, r1
 800725e:	bf04      	itt	eq
 8007260:	6819      	ldreq	r1, [r3, #0]
 8007262:	685b      	ldreq	r3, [r3, #4]
 8007264:	6063      	str	r3, [r4, #4]
 8007266:	bf04      	itt	eq
 8007268:	1949      	addeq	r1, r1, r5
 800726a:	6021      	streq	r1, [r4, #0]
 800726c:	6054      	str	r4, [r2, #4]
 800726e:	e7ca      	b.n	8007206 <_free_r+0x26>
 8007270:	b003      	add	sp, #12
 8007272:	bd30      	pop	{r4, r5, pc}
 8007274:	20002cd8 	.word	0x20002cd8

08007278 <sbrk_aligned>:
 8007278:	b570      	push	{r4, r5, r6, lr}
 800727a:	4e0e      	ldr	r6, [pc, #56]	; (80072b4 <sbrk_aligned+0x3c>)
 800727c:	460c      	mov	r4, r1
 800727e:	6831      	ldr	r1, [r6, #0]
 8007280:	4605      	mov	r5, r0
 8007282:	b911      	cbnz	r1, 800728a <sbrk_aligned+0x12>
 8007284:	f000 f8bc 	bl	8007400 <_sbrk_r>
 8007288:	6030      	str	r0, [r6, #0]
 800728a:	4621      	mov	r1, r4
 800728c:	4628      	mov	r0, r5
 800728e:	f000 f8b7 	bl	8007400 <_sbrk_r>
 8007292:	1c43      	adds	r3, r0, #1
 8007294:	d00a      	beq.n	80072ac <sbrk_aligned+0x34>
 8007296:	1cc4      	adds	r4, r0, #3
 8007298:	f024 0403 	bic.w	r4, r4, #3
 800729c:	42a0      	cmp	r0, r4
 800729e:	d007      	beq.n	80072b0 <sbrk_aligned+0x38>
 80072a0:	1a21      	subs	r1, r4, r0
 80072a2:	4628      	mov	r0, r5
 80072a4:	f000 f8ac 	bl	8007400 <_sbrk_r>
 80072a8:	3001      	adds	r0, #1
 80072aa:	d101      	bne.n	80072b0 <sbrk_aligned+0x38>
 80072ac:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80072b0:	4620      	mov	r0, r4
 80072b2:	bd70      	pop	{r4, r5, r6, pc}
 80072b4:	20002cdc 	.word	0x20002cdc

080072b8 <_malloc_r>:
 80072b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072bc:	1ccd      	adds	r5, r1, #3
 80072be:	f025 0503 	bic.w	r5, r5, #3
 80072c2:	3508      	adds	r5, #8
 80072c4:	2d0c      	cmp	r5, #12
 80072c6:	bf38      	it	cc
 80072c8:	250c      	movcc	r5, #12
 80072ca:	2d00      	cmp	r5, #0
 80072cc:	4607      	mov	r7, r0
 80072ce:	db01      	blt.n	80072d4 <_malloc_r+0x1c>
 80072d0:	42a9      	cmp	r1, r5
 80072d2:	d905      	bls.n	80072e0 <_malloc_r+0x28>
 80072d4:	230c      	movs	r3, #12
 80072d6:	603b      	str	r3, [r7, #0]
 80072d8:	2600      	movs	r6, #0
 80072da:	4630      	mov	r0, r6
 80072dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80072e0:	4e2e      	ldr	r6, [pc, #184]	; (800739c <_malloc_r+0xe4>)
 80072e2:	f000 f89d 	bl	8007420 <__malloc_lock>
 80072e6:	6833      	ldr	r3, [r6, #0]
 80072e8:	461c      	mov	r4, r3
 80072ea:	bb34      	cbnz	r4, 800733a <_malloc_r+0x82>
 80072ec:	4629      	mov	r1, r5
 80072ee:	4638      	mov	r0, r7
 80072f0:	f7ff ffc2 	bl	8007278 <sbrk_aligned>
 80072f4:	1c43      	adds	r3, r0, #1
 80072f6:	4604      	mov	r4, r0
 80072f8:	d14d      	bne.n	8007396 <_malloc_r+0xde>
 80072fa:	6834      	ldr	r4, [r6, #0]
 80072fc:	4626      	mov	r6, r4
 80072fe:	2e00      	cmp	r6, #0
 8007300:	d140      	bne.n	8007384 <_malloc_r+0xcc>
 8007302:	6823      	ldr	r3, [r4, #0]
 8007304:	4631      	mov	r1, r6
 8007306:	4638      	mov	r0, r7
 8007308:	eb04 0803 	add.w	r8, r4, r3
 800730c:	f000 f878 	bl	8007400 <_sbrk_r>
 8007310:	4580      	cmp	r8, r0
 8007312:	d13a      	bne.n	800738a <_malloc_r+0xd2>
 8007314:	6821      	ldr	r1, [r4, #0]
 8007316:	3503      	adds	r5, #3
 8007318:	1a6d      	subs	r5, r5, r1
 800731a:	f025 0503 	bic.w	r5, r5, #3
 800731e:	3508      	adds	r5, #8
 8007320:	2d0c      	cmp	r5, #12
 8007322:	bf38      	it	cc
 8007324:	250c      	movcc	r5, #12
 8007326:	4629      	mov	r1, r5
 8007328:	4638      	mov	r0, r7
 800732a:	f7ff ffa5 	bl	8007278 <sbrk_aligned>
 800732e:	3001      	adds	r0, #1
 8007330:	d02b      	beq.n	800738a <_malloc_r+0xd2>
 8007332:	6823      	ldr	r3, [r4, #0]
 8007334:	442b      	add	r3, r5
 8007336:	6023      	str	r3, [r4, #0]
 8007338:	e00e      	b.n	8007358 <_malloc_r+0xa0>
 800733a:	6822      	ldr	r2, [r4, #0]
 800733c:	1b52      	subs	r2, r2, r5
 800733e:	d41e      	bmi.n	800737e <_malloc_r+0xc6>
 8007340:	2a0b      	cmp	r2, #11
 8007342:	d916      	bls.n	8007372 <_malloc_r+0xba>
 8007344:	1961      	adds	r1, r4, r5
 8007346:	42a3      	cmp	r3, r4
 8007348:	6025      	str	r5, [r4, #0]
 800734a:	bf18      	it	ne
 800734c:	6059      	strne	r1, [r3, #4]
 800734e:	6863      	ldr	r3, [r4, #4]
 8007350:	bf08      	it	eq
 8007352:	6031      	streq	r1, [r6, #0]
 8007354:	5162      	str	r2, [r4, r5]
 8007356:	604b      	str	r3, [r1, #4]
 8007358:	4638      	mov	r0, r7
 800735a:	f104 060b 	add.w	r6, r4, #11
 800735e:	f000 f865 	bl	800742c <__malloc_unlock>
 8007362:	f026 0607 	bic.w	r6, r6, #7
 8007366:	1d23      	adds	r3, r4, #4
 8007368:	1af2      	subs	r2, r6, r3
 800736a:	d0b6      	beq.n	80072da <_malloc_r+0x22>
 800736c:	1b9b      	subs	r3, r3, r6
 800736e:	50a3      	str	r3, [r4, r2]
 8007370:	e7b3      	b.n	80072da <_malloc_r+0x22>
 8007372:	6862      	ldr	r2, [r4, #4]
 8007374:	42a3      	cmp	r3, r4
 8007376:	bf0c      	ite	eq
 8007378:	6032      	streq	r2, [r6, #0]
 800737a:	605a      	strne	r2, [r3, #4]
 800737c:	e7ec      	b.n	8007358 <_malloc_r+0xa0>
 800737e:	4623      	mov	r3, r4
 8007380:	6864      	ldr	r4, [r4, #4]
 8007382:	e7b2      	b.n	80072ea <_malloc_r+0x32>
 8007384:	4634      	mov	r4, r6
 8007386:	6876      	ldr	r6, [r6, #4]
 8007388:	e7b9      	b.n	80072fe <_malloc_r+0x46>
 800738a:	230c      	movs	r3, #12
 800738c:	603b      	str	r3, [r7, #0]
 800738e:	4638      	mov	r0, r7
 8007390:	f000 f84c 	bl	800742c <__malloc_unlock>
 8007394:	e7a1      	b.n	80072da <_malloc_r+0x22>
 8007396:	6025      	str	r5, [r4, #0]
 8007398:	e7de      	b.n	8007358 <_malloc_r+0xa0>
 800739a:	bf00      	nop
 800739c:	20002cd8 	.word	0x20002cd8

080073a0 <_realloc_r>:
 80073a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073a4:	4680      	mov	r8, r0
 80073a6:	4614      	mov	r4, r2
 80073a8:	460e      	mov	r6, r1
 80073aa:	b921      	cbnz	r1, 80073b6 <_realloc_r+0x16>
 80073ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80073b0:	4611      	mov	r1, r2
 80073b2:	f7ff bf81 	b.w	80072b8 <_malloc_r>
 80073b6:	b92a      	cbnz	r2, 80073c4 <_realloc_r+0x24>
 80073b8:	f7ff ff12 	bl	80071e0 <_free_r>
 80073bc:	4625      	mov	r5, r4
 80073be:	4628      	mov	r0, r5
 80073c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80073c4:	f000 f838 	bl	8007438 <_malloc_usable_size_r>
 80073c8:	4284      	cmp	r4, r0
 80073ca:	4607      	mov	r7, r0
 80073cc:	d802      	bhi.n	80073d4 <_realloc_r+0x34>
 80073ce:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80073d2:	d812      	bhi.n	80073fa <_realloc_r+0x5a>
 80073d4:	4621      	mov	r1, r4
 80073d6:	4640      	mov	r0, r8
 80073d8:	f7ff ff6e 	bl	80072b8 <_malloc_r>
 80073dc:	4605      	mov	r5, r0
 80073de:	2800      	cmp	r0, #0
 80073e0:	d0ed      	beq.n	80073be <_realloc_r+0x1e>
 80073e2:	42bc      	cmp	r4, r7
 80073e4:	4622      	mov	r2, r4
 80073e6:	4631      	mov	r1, r6
 80073e8:	bf28      	it	cs
 80073ea:	463a      	movcs	r2, r7
 80073ec:	f7ff fed0 	bl	8007190 <memcpy>
 80073f0:	4631      	mov	r1, r6
 80073f2:	4640      	mov	r0, r8
 80073f4:	f7ff fef4 	bl	80071e0 <_free_r>
 80073f8:	e7e1      	b.n	80073be <_realloc_r+0x1e>
 80073fa:	4635      	mov	r5, r6
 80073fc:	e7df      	b.n	80073be <_realloc_r+0x1e>
	...

08007400 <_sbrk_r>:
 8007400:	b538      	push	{r3, r4, r5, lr}
 8007402:	4d06      	ldr	r5, [pc, #24]	; (800741c <_sbrk_r+0x1c>)
 8007404:	2300      	movs	r3, #0
 8007406:	4604      	mov	r4, r0
 8007408:	4608      	mov	r0, r1
 800740a:	602b      	str	r3, [r5, #0]
 800740c:	f7fc f8c0 	bl	8003590 <_sbrk>
 8007410:	1c43      	adds	r3, r0, #1
 8007412:	d102      	bne.n	800741a <_sbrk_r+0x1a>
 8007414:	682b      	ldr	r3, [r5, #0]
 8007416:	b103      	cbz	r3, 800741a <_sbrk_r+0x1a>
 8007418:	6023      	str	r3, [r4, #0]
 800741a:	bd38      	pop	{r3, r4, r5, pc}
 800741c:	20002ce0 	.word	0x20002ce0

08007420 <__malloc_lock>:
 8007420:	4801      	ldr	r0, [pc, #4]	; (8007428 <__malloc_lock+0x8>)
 8007422:	f000 b811 	b.w	8007448 <__retarget_lock_acquire_recursive>
 8007426:	bf00      	nop
 8007428:	20002ce4 	.word	0x20002ce4

0800742c <__malloc_unlock>:
 800742c:	4801      	ldr	r0, [pc, #4]	; (8007434 <__malloc_unlock+0x8>)
 800742e:	f000 b80c 	b.w	800744a <__retarget_lock_release_recursive>
 8007432:	bf00      	nop
 8007434:	20002ce4 	.word	0x20002ce4

08007438 <_malloc_usable_size_r>:
 8007438:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800743c:	1f18      	subs	r0, r3, #4
 800743e:	2b00      	cmp	r3, #0
 8007440:	bfbc      	itt	lt
 8007442:	580b      	ldrlt	r3, [r1, r0]
 8007444:	18c0      	addlt	r0, r0, r3
 8007446:	4770      	bx	lr

08007448 <__retarget_lock_acquire_recursive>:
 8007448:	4770      	bx	lr

0800744a <__retarget_lock_release_recursive>:
 800744a:	4770      	bx	lr

0800744c <_init>:
 800744c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800744e:	bf00      	nop
 8007450:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007452:	bc08      	pop	{r3}
 8007454:	469e      	mov	lr, r3
 8007456:	4770      	bx	lr

08007458 <_fini>:
 8007458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800745a:	bf00      	nop
 800745c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800745e:	bc08      	pop	{r3}
 8007460:	469e      	mov	lr, r3
 8007462:	4770      	bx	lr
